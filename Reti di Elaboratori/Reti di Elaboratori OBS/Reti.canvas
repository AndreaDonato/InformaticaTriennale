{
	"nodes":[
		{"id":"b72f299bae389d13","type":"text","text":"# Nodi\n\nSe le Reti sono grafi, cosa sono i nodi? Abbiamo due macro-categorie:\n\n- **_Nodi estremali_** (o **_sistemi terminali_**) - situati alle **periferie** della rete, sono le \"foglie\". C'è una distinzione interna tra\n\t- **_Host_** - tipicamente è il nome che si dà al dispositivo (dell') utente che vuole usare un servizio;\n\t- **_Server_** - tipicamente è il nome che si dà al dispositivo (spesso a elevate prestazioni) che offre servizi agli host.\n- **_Nodi di interconnessione_** - sostanzialmente dei ripetitori, che all'occorrenza possono modificare il segnale che vi transita (e.g. amplificazione, incremento di un counter per tenere traccia del passaggio). Una trasmissione senza modifiche è detta **trasparente**. Ulteriormente divisi in\n\t- **_Router_** - collegano tra loro più reti;\n\t- **_Switch_** - collegano tra loro più nodi estremali all'interno di una rete.\n","x":-4940,"y":638,"width":700,"height":448,"color":"4"},
		{"id":"06174ae2aacf2d26","type":"text","text":"# Tipi di Reti\n\nLe Reti si classificano in base a quanto sono grosse. Già.\n\n- **Personal Area Network** (**PAN**) - tipicamente pochi metri (e.g. Bluetooth);\n- **_Local Area Network_** (**_LAN_**) - tipicamente entro un appartamento (e.g. Wi-Fi, Ethernet). Ogni nodo estremale possiede un indirizzo (**MAC**) che lo identifica univocamente all’interno della LAN. Si può implementare come\n\t- **cavo condiviso** - tutti i dispositivi sono connessi al router tramite un cavo comune. Questa roba non si fa più, anche perché si creano interferenze e non esiste la privacy (chiunque poteva attaccarsi al cavo e leggere il traffico dati di tutti, \"oggi a meno che tu non sia l'NSA non lo fai\");\n\t- **switch** - da un lato ha i vari dispositivi in parallelo, dall'altra il router. Permette la trasmissione simultanea di più host.\n- **Metropolitan Area Network** (**MAN**) - tipicamente copre una città;\n- **_Wide Area Network_** (**_WAN_**) - tipicamente copre un paese o una nazione ed è gestita da un **_Internet Service Provider_** (**_ISP_**). Abbiamo anche qui due casi:\n\t- **point-to-point** - ho due reti collegate tramite un singolo mezzo di trasmissione. Questo è il modo più semplice di realizzare una **internet** (con la i minuscola, che qui ci tengono, abbreviativo per **internetwork**), ovvero una rete di reti;\n\t- **commutazione** - ho più reti collegate tramite più mezzi di trasmissione, il che probabilmente includerà anche più nodi di interconnessione.\n- **_Internet_** - la rete di tutte le reti, il Tutto, il MoaN (Mother of All Networks), una specie di divinità, un concetto filosofico, ...","x":-4128,"y":-220,"width":668,"height":740,"color":"4"},
		{"id":"4f9f693b64bc0e3f","type":"text","text":"# Glossario delle Reti\n\n- **_edge router_** - i router più periferici dell'Internet;\n- **_headend_** - termine generico che si riferisce a un nodo cruciale di una rete di telecomunicazioni, in cui convergono e vengono aggregati più segnali. Un edge router è un headend, ma se ad esempio vi sono molti cavi coassiali che vorrebbero entrarvi si può usare un cable headend, ovvero un dispositivo fisico che raggruppa le varie sorgenti per trasmetterle all'edge router;\n- **_access point_** - pezzetto di HW che funge da interfaccia tra il segnale Wi-Fi e il router;\n- **_Internet Service Provider_** (**_ISP_**) - riferito ad un'organizzazione di qualsiasi tipo (privata, no-profit, ...) che fornisce il servizio per l'accesso a Internet. Sono gestite da ISP\n\t- le **reti di accesso** ad Internet;\n\t- alcune infrastrutture che collegano più reti di accesso locali (**ISP regionale**)\n\t- le componenti del **nucleo di rete** a cui si connettono le reti di accesso e gli ISP regionali (**ISP globali**, o di **livello 1**)","x":-5752,"y":-220,"width":716,"height":740,"color":"4"},
		{"id":"795690d5ce7e1c11","type":"text","text":"# Link (Layer Fisico)\n\nI collegamenti fisici tra nodi possono essere realizzati in diversi modi.\n\n- **_Supporti guidati_** - I segnali si propagano in mezzi solidi (cavi). Esempi sono\n\t- **Doppino intrecciato** - due fili di rame isolati, uno per inviare i dati ed uno per riceverli (e.g. Ethernet, fino a 10 Gbps). Suscettibile a interferenze EM;\n\t- **Cavo coassiale** - due fili di rame concentrici, entrambi bidirezionali. Supporta i canali (**FDM**, $\\sim 100$ Mbps ciascuno), molto resistente alle  interferenze ma ad oggi soppiantato dalla fibra ottica;\n\t- **Fibra ottica** - fibra di vetro che sfrutta la riflessione totale interna della luce. Ogni fotone trasporta un singolo bit. Velocissimo ($v \\sim c$), basso rate di errore, ovviamente immune all'interferenza EM, costituisce la quasi totalità dei collegamenti nelle dorsali di Internet;\n- **_Propagazione libera_** - Spazia dal **Wi-Fi** domestico al **segnale satellitare**, e sfrutta lo spettro elettromagnetico con tutti gli ostacoli che ne conseguono (riflessione, attenuazione, interferenza). La potenza del segnale sferico decade come $1/r^2 \\Rightarrow$ molto forte nelle immediate vicinanze, molto debole poco dopo. Questo rende i link a propagazione libera dei canali **_half-duplex_** $\\Rightarrow$ chi riceve non può trasmettere a sua volta, perché con il forte segnale in uscita coprirebbe il segnale debole in entrata.","x":-4940,"y":1143,"width":700,"height":565,"color":"4"},
		{"id":"0c876453e3807959","type":"text","text":"# Pose e Coreografia\n\nHo un pacchetto con una destinazione. Devo avere chiare due cose:\n\n- Il percorso che seguirà nell'Internet attraverso i vari router, detto **_instradamento_** o **_routing_**. Definito da speciali **_algoritmi di instradamento_**, è un concetto **_globale_** (che riguarda cioè la rete nella sua interezza);\n- Il modo in cui il singolo router smista i pacchetti nel link corretto, ovvero la funzione interna che lega il segnale in ingresso a quello in uscita: internamente, ogni router ha una **_local forwarding table_** contenente le varie associazioni con i nodi adiacenti. Per scrivere le tabelle mi servono i percorsi. Viene detto **_commutazione_** (o **_forwarding_**, o **_switching_**).\n\nIn pratica, se il *forwarding* è la regola locale che definisce come si \"posiziona\" il singolo router, il *routing* è la \"coreografia\" globale risultante.","x":-3273,"y":1570,"width":700,"height":410,"color":"4"},
		{"id":"4958894e7197fe3c","type":"text","text":"# Rete\n\nInfrastruttura \"a grafo\" composta da dispositivi (_**nodi**_) che possono scambiarsi informazioni tramite dei collegamenti (**_link_**)","x":-3084,"y":1045,"width":323,"height":196,"color":"6"},
		{"id":"a569f47822207faf","type":"text","text":"# Struttura di Internet\n\nL'Internet può essere suddiviso con un criterio di \"profondità\".\n\n- **Periferia della rete** (**network edge**) - host e server;\n- **_Reti di accesso_** (**_access network_**) - tutto ciò che è connesso al router più periferico (**edge router**, ovvero il primo router che incontra il segnale partito da un host o da un server), a sua volta connesso con l'Internet. La connessione all'edge router può presentarsi in diversi gusti.\n\t- **Cavo** - Puro e semplice, non ci sono intermediari. Si collega insieme agli altri cavi della zona a un **cable headend**;\n\t- **Digital Subscriber Line** (**DSL**) - Sfrutta le linee telefoniche come cavi. Usa un **DSLAM** (**DSL Access Multiplexer**), uno specifico **headend** che smista il traffico internet e telefonico;\n\t- **Wireless LAN** (**WLAN**) - Mediato da un **access point** fisico che si interfaccia con il router domestico;\n\t- Rete cellulare;\n- **_Nucleo di Rete_** (**_dorsale_**, **_core_**, **_backbone_**) - questi termini vengono spesso usati in modo intercambiabile in quanto reti ad alta velocità che rappresentano la \"spina dorsale\" di Internet. In pratica, il nucleo di rete si occupa di collegare tra loro le reti di accesso (gestite da **ISP locali**). **NON** ciascuna di esse con tutte le altre (sono milioni e sarebbe $O(n^2)$), ma attraverso delle reti di più alto livello. ","x":-4940,"y":-220,"width":700,"height":740,"color":"4"},
		{"id":"c842e00522cec07d","type":"text","text":"## Velocità e latenze\n\n- DSL\n\t- Downstream: $24\\div52$ Mbps\n\t- Upstream: $3\\div16$ Mbps\n\t- Latenza: ?????\n- Ethernet\n\t- 100 Mbps, 1 Gbps, 10 Gbps\n- HFC\n\t- Downstream: $40\\div1200$ Mbps\n\t- Upstream: $30\\div100$ Mbps\n\t- Latenza: ???\n- Fibra\n- Microonde\n- Wi-Fi\n\t- Trasmissione: 11-54-450 Mbps\n\t- Latenza: ????\n- 4G\n- Satellite\n\t- Trasmissione: fino a $45$ Mbps\n\t-  latenza (end-end): $\\sim 270 ms$.","x":-5752,"y":1143,"width":716,"height":565,"color":"2"},
		{"id":"0276409902e40e9c","type":"text","text":"## Tradurre \"bursty\" in matematica\n\nCi sono $n$ utenti, ognuno dei quali ha una (bassa) probabilità $p$ di essere attivo in un dato istante. Quanti utenti sono attivi contemporaneamente?\nOvviamente problema binomiale.\n\n$$\nP(x) = \\binom{n}{i}\\,p^i\\,(1-p^{n-i})\n$$\nda cui segue la cumulativa (qui nel caso $x > k$)\n\n$$\nP(x > k) = \\sum^n_{i = k}\\binom{n}{i}\\,p^i\\,(1-p^{n-i})\n$$","x":-5736,"y":1930,"width":700,"height":440,"color":"4"},
		{"id":"a3eaa4b44f0f3c44","type":"text","text":"# Giungla pseudo-gerarchica ISP\n\nQuello di ISP è quasi un concetto filosofico. Io che ti metto l'hotspot sono tanto ISP quanto lo è Fastweb. Circa. In realtà c'è una specie di gerarchia.\n\n- Io che metto l'hotspot sono considerabile un edge router che funge da ISP locale (livello 3);\n- Il mio telefono però ha a sua volta un ISP, stavolta regionale (livello 2, e.g. *Fastweb*). Questo ISP ha accordi alla pari (**_peer-to-peer_**) per comunicare con altri ISP regionali senza passare dal nucleo di Internet. Tuttavia può essere necessario raggiungere nodi che necessitano un passaggio per le dorsali, motivo per cui i *livello 2* **_pagano il transito_** ai *livello 1*;\n- In cima alla catena alimentare troviamo gli **_ISP globali_** (livello 1, e.g. *AT&T*), connessi tra loro tramite degli **_Internet Exchange Point_** (**_IXP_**);\n- Ultimamente vi sono entità (e.g. Google, Netflix) che non hanno tutta questa voglia di pagare gli ISP più grossi, motivo per cui costruiscono delle proprie _**reti dei content provider**_ a livello degli ISP globali riuscendo a bypassarli e ad offrire un servizio più efficiente ai consumatori.","x":-5752,"y":-880,"width":716,"height":497,"color":"4"},
		{"id":"44898ee22f42afdc","type":"text","text":"# Prestazioni","x":-1800,"y":1400,"width":240,"height":50,"color":"6"},
		{"id":"665f35bd71acbb90","type":"text","text":"# Forwarding","x":-1800,"y":1750,"width":240,"height":50,"color":"6"},
		{"id":"981b264b7f7630c2","type":"text","text":"# Store&Forward\n\nUn pacchetto deve raggiungere completamente il nodo destinazione prima che questo possa iniziare il processo di *forwarding* (**_store&forward_**).\n\nLa trasmissione però richiede tempo, quindi è possibile che arrivino più pacchetti di quanti il router ne riesce effettivamente a smistare.\nQuesto implica che deve avere un *buffer* in cui mettere in coda i pacchetti in attesa. Nel migliore dei casi questo mi genera un **_queuing delay_**, e nel peggiore, ovvero se il buffer si riempie, può verificarsi la **_perdita dei pacchetti_**.\n\nD'altronde, quando mando un pacchetto su Internet devo essere consapevole che nessuno mi potrà mai garantire il suo effettivo arrivo a destinazione.\n\nNotare che il primo bit di un pacchetto può arrivare a destinazione prima che questo sia stato completamente trasmesso dal router di partenza sul link!","x":-1280,"y":1570,"width":680,"height":410,"color":"4"},
		{"id":"c45a83a3705f7881","type":"text","text":"# Latenza\n\nIl tempo totale necessario ad un pacchetto per essere inviato completamente da un nodo origine ad un nodo destinatario è detto **_latenza_** o _**delay**_.\n\nSi può scrivere come somma di 4 contributi:\n\n- Delay di Queuing ($D_q$) - dato dal tempo di attesa in coda dovuto al meccanismo di **store&forward**, qui il pacchetto aspetta di essere processato. Difficile da stimare, divergente se il pacchetto si perde;\n- Delay di Elaborazione ($D_e$) - dato dalle operazioni interne effettuate dal nodo sul pacchetto (controllo errori, determinazione del link di uscita, ...), in genere trascurabile rispetto agli altri ($D_e \\lesssim\\mu s$);\n- Delay di Trasmissione ($D_t$) - il router deve caricare tutto il pacchetto di lunghezza $L$ sul link avente bit rate $R$ $\\Rightarrow$ ci mette un tempo $D_t = L/R$. Tipicamente è il termine dominante, nonché l'unico che dipende dalla lunghezza del pacchetto. Trasmettere un $L$ enorme su un $R$ basso fa da bottleneck per l'intero sistema;\n- Delay di Propagazione ($D_p$) - quanto ci mette il pacchetto a transitare sul link, e dipende esclusivamente dalle caratteristiche di quest'ultimo. Se è lungo $k$ e i bit si propagano a velocità $v$ serve un tempo $D_p = k/v$. In genere è indicato come tempo di propagazione dell'ultimo bit del pacchetto (non cambia nulla, è solo per ricordarsi che esiste la politica di *store&forward*).\n\nIn sintesi quelli fondamentali sono [trasmissione e propagazione](https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/transmission-vs-propogation-delay/transmission-propagation-delay-ch1/index.html), e ogni router da cui passa il segnale (anche detto **_hop_**) introduce un termine dominante $L/R$.","x":-1280,"y":780,"width":680,"height":674,"color":"4"},
		{"id":"45a11294a8434cf8","type":"text","text":"# Glossario delle Prestazioni\n\n- **_trasmissione_** - il caricamento del pacchetto sul link da parte del router (\"modulare il segnale nel cavo\"). **_NON_** include la propagazione sul link.\n\t- Ogni link è caratterizzato da una **massima velocità di trasmissione** $R$ (*Rate*, misurato in bit/s), anche detta **_bit rate_** o **transmission rate**;\n- **_larghezza di banda_** (**_bandwidth_**) - si può usare per intendere\n\t- la larghezza dell'intervallo di frequenze utilizzate dal sistema trasmissivo ($Hz$);\n\t- il **bit rate** (bit/s), ad essa proporzionale.\n- **_throughput_** ($T$)- quantità di bit al secondo che passano a regime attraverso un generico punto della rete. Notare che è una misura di velocità effettiva, e che il suo massimo è il **bit rate** $\\Rightarrow$ è una misura effettiva di bit rate, e si effettua con un **_ping_**, ovvero un bit-sonda che mando avanti e indietro dal server che mi interessa;\n- **_bottleneck_** - quel collegamento che limita il throughput dell'intero percorso end-to-end;","x":-1940,"y":495,"width":520,"height":617,"color":"4"},
		{"id":"305c16fa5fcbfca6","type":"text","text":"# Teoria delle Code\n\nPer il Delay di Queuing c'è tutta una teoria (delle code) che calcola il ritardo medio in coda in funzione dell'intensità del traffico $La/R$ , dove $a$ è il rate di arrivo di pacchetti in coda.\n\nIn questo modo si trova che questo ritardo diverge già per un traffico $La/R = 1$ $\\Rightarrow$ il router non sopporta un rate di arrivo dei pacchetti identico al rate di smistamento ([vedere per credere!](https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/queuing-loss-applet/index.html)).\n\nQuesto succede perché $a$ è un rate medio, e \"quando sono fortunato e me ne arrivano meno mentre la queue è vuota non posso anticiparmi il lavoro\".\n\nCredo in realtà succeda anche perché non sto considerando il micro-ritardo di processamento interno, che seppur trascurabile sul singolo pacchetto magari sulla coda fa effetto.","x":-1280,"y":285,"width":680,"height":420,"color":"3"},
		{"id":"0e49609704fa8c9e","type":"text","text":"# Gestire le Congestioni\n\nCosa succede se a un certo punto del percorso tra i router un pacchetto entra in un loop? Resta intrappolato all'infinito, sprecando banda? Sconveniente. Devo metterci un *cut-off* $\\Rightarrow$ introduco un **_Time To Live_** (**_TTL_**), in pratica un numero che viene decrementato a ogni router che incontra (e che quindi rappresenta quanti altri router possono inoltrarlo).\n\nQuando il TTL diventa 0 il pacchetto muore. In questi casi sarebbe buona educazione da parte del router mandare un feedback a chi glielo ha inviato (\"*hey, ti ricordi quel bellissimo pacchetto che mi avevi mandato? sì, ecco, è morto*\").\n\nConoscere il motivo della perdita di un pacchetto è fondamentale. Se ad esempio viene perso per traffico (e quindi per via di una coda piena) dovrei rallentare la trasmissione per evitare di perderne altri.\n\nIl protocollo TCP/IP, ad esempio, è in grado di capire se una perdita è causata dal traffico o da altri fattori.","x":-2540,"y":560,"width":540,"height":552,"color":"4"},
		{"id":"56958c816f8128f6","type":"text","text":"# Sicurezza","x":-3042,"y":590,"width":240,"height":50,"color":"#4545ff"},
		{"id":"d7a25775f996e167","type":"text","text":"# Leak della struttura di rete (Latenza + TTL)\n\nScelgo una destinazione e mando pacchetti con un TTL sempre maggiore. Grazie al progressivo delay sono in grado di stimare il percorso end-to-end. \n\n... o quasi. Nessuno mi garantisce che ogni pacchetto seguirà sempre lo stesso percorso. Esistono però programmi diagnostici (e.g. **_traceroute_** su UNIX, o **_tracert_** su Windows) che restituiscono suddetti delay.\n\nNon c'è da stupirsi se a volte i router scelgono di non mandare feedback alla morte di un pacchetto per esaurimento del TTL.\nSe accetto il meccanismo dei TTL potrei far leakare la struttura interna della rete. ","x":-2540,"y":-20,"width":540,"height":440,"color":"#4545ff"},
		{"id":"45b932caa35cd5e2","type":"text","text":"# Rete (guarda slides) tipo intro ai termini\n\nrete = nodi (computer) collegati da collegamenti (link). Distinguo i nodi estremali (host (vuole usare il servizio) o server (lo fornisce), non è una distinzione rigida) e quelli di interconnessione (router collega due reti o switch collegano terminali in locale). Dispositivi che possono scambiarsi info. Durante i passaggi di info queste spesso si modificano (fisico, quindi amplificazione, o tenere traccia del passaggio. esistono anche trasmissioni trasparenti).\n\nperiferia della rete -> host e server\nrete di accesso: utenti (problemi: max utenti per antenna)\nnucleo di rete: router interconnessi che fanno interagire sottoreti indirizzando il traffico\n\n(guarda slides)\n\nreti via cavo: tutto collegato allo stesso cavo condiviso. ogni casa ha splitter e modem.\n\nasimmetria: ci si aspetta che l'host scarichi più di quanto carica\n\na casa modem, router e access point sono integrati nello stesso coso.\n\n\"half duplex\" -> mentre trasmetto non posso ricevere. Questo perché la potenza del segnale scende come 1/r^2, e chi riceve vede un segnale debole -> non può trasmettere a sua volta, perché copro il segnale debole. Questo per il wifi e simili, su cavo faccio come voglio.\n\nsplitting di frequenze (anche su stesso cavo) ha costo (multiplexing?), nell'esempio del cavo sopra (credo) sia tutto su stessa frequenza.\n\n\n","x":-2270,"y":-1900,"width":640,"height":860,"color":"1"},
		{"id":"38f42aa977e02595","type":"text","text":"# (\"... comunque lo vedremo meglio\")\n\nnon ci sono computer, solo router che fanno commutazione di pacchetto (= forwarding = switching: qualcosa entra da una porta, lo faccio uscire da un'altra, ognuno ha una tabella di corrispondenze, è na roba LOCALE). NON sa che percorso farà. Ma chi le scrive le tabelle? Serve sapere i percorsi -> serve Algoritmo di Instradamento. Il ROUTING è un'azione GLOBALE.\n\nforwarding: come mi devo mettere; routing: coreografia\n\nstore and forward: prima ricevo tutto, poi mando. na specie de buffering. Pushare il pacchetto nel cavo = trasmettere, ergo se devo mettere L bit di pacchetto a velocità R bit/s ci metto L/R secondi ed è detto ritardo di trasmissione (trasmissione è solo l'uploat del pacchetto nel collegamento (cavo), poi c'è delay di trasporto ma spesso è trascurabile). \"modulare il segnale nel cavo\". ogni router che trasmette (HOP) porta un ritardo +L/R. Se poi mi interessa il delay del segnale totale trasportato da N pacchetti moltiplico per N. Poi c'è ritardo di accodamento (vedi slides).\n\nTEORIA DELLE CODE???\n\nA - algoritmo per ottimizzare commutaizone di circuito?\n\nSe multiplexo sulle frequenze (costo alto) mitigo il problema delle code. Posso farlo anche sul tempo (costo minore, eg bluetooth), ma sono a rischio latenza. Qual è meglio? Dipende da che ci devo fare. Comm di circuito però non si usa su Internet. cellulari usano entrambi. pacchetto consente a più utenti di usare la rete. Internet è _bursty_, impulsiva, dati inframezzati da lunghi silenzi. Mi baso sul fatto che molti stanno zitti per permettere a più persone di parlare (e.g. se ho 35 utenti P(attivi>20) $\\sim$ poco, conto con binomiale). se uso comm circuito dedico una linea fissa e non sfrutto le \"caratteristiche\" degli utenti (che stanno spesso zitti).\n\nSe mando un pacchetto su Internet non ho garanzie che arrivi a destinazione. Tutti i tentativi per dare garanzie (ovvero strutturare diversamente i protocolli) hanno fallito miseramente. Comm di circuito garantisce, ma se non comunico spreco risorse. \"Internet è accettare che tutti provano e provare a risolvere quando si creano problemi\".\n\nISP punto debole di interet, in mano ai grandi fornitori. interconnessi, guidati dagli interessi aziendali più che geografici. Abbiamo milioni di ISP di accesso. Li collego tutti tra loro? No, è $O(n^2)$. Inizialmente: ISP di transito globale a fare da centralino (pagato da ISP locali). Ora ci sono tanti ISP globali collegati da IXP (internet exchange point, collegamento di peering). La rete degli IXP ha una rete dei content provider.\n\nSegue discorso sulla legislazione perché sta roba dà un sacco di potere\n\n","x":-1580,"y":-1981,"width":640,"height":1120,"color":"1"},
		{"id":"435d7ec357e56abd","type":"text","text":"# prestazioni slides 3\n\nthroughput è una misura a regime (un po' una misura del bitrate effettivo, ed è sistematicamente minore o uguale). è il flusso/portata della fluidodinamica. Non basta un ping (singolo bit, quello misura la latenza).\ncolli di bottiglia creano grossi problemi su internet, ma non nelle dorsali (backbone, sono enormi), quanto quelli che si collegano.\ntutto questo comunque resta molto teorico perché non considero perdite e ritardi, all'atto pratico misuro per sapere quant'è.\nSeguono i ritardi che sommati fanno la latenza\n- processamento (elaborazione del pacchetto: controllo errori, switching, ... tipicamente svariati odg meno degli altri)\n- Trasmissione (tutta  la dipendenza dalla grandezza del pacchetto è qua)\n- Accodamento (queuing delay, dipende dal traffico, difficile da calcolare, c'è teoria delle code)\n- propagazione (SOLO lunghezza del cavo, satellite 300ms, cavo oceanico 30ms)\n\ni primi bit caricati in trasmissione non devono aspettare gli ultimi. Infatti, se ho n bit e ognuno ci mette m secondi, l'ultimo verrà processato dopo nxm secondi. Ma intanto il primo è partito. Magari è pure arrivato all'altro router, il quale però deve aspettare di ricevere tutto il pacchetto per inoltrarlo.\nAttenzione a fare pacchetti troppo grossi, il ritardo di trasmissione schizza alle stelle. (posso cambiarlo su pc con la mia connessione???)\n\nSe sto trasmettendo un pacchetto enorme con bassa velocità ci metto un botto, il che blocca la rete per tutti!\n\n","x":-920,"y":-1840,"width":640,"height":740,"color":"1"},
		{"id":"c3e8022233e42700","type":"text","text":"# Ritardi\n\n- accodamento (\"quando siamo fortunati non possiamo portarci avanti col lavoro) rivedilo che non ho capito cosa vuole dire (vedi animazione di due slides dopo, perdita di pacchetti, mettendo stesso rate di emission e transmission) --> se si riempie la coda perdo pacchetti --> un pacchetto perso ha tempo di attesa infinito\n\nse ci stanno dei loop nel percorso router i pacchetti intrappolati restano all'infinito? Devo metterci un cut-off -> tempo di vita (TTL time to live), spesso espresso in \"quanti altri router possono inoltrarlo\". Se il pacchetto muore in genere il router manda un feedback a chi glielo ha inviato (\"hey, il tuo pacchetto è morto). Se mando TTL sempre crescenti stimo il percorso (non proprio, nessuno mi dice che faccio sempre lo stesso $\\forall$ invio).\nPer vari motivi i router possono non rispondere quando muore il pacchetto. Se accetto i TTL potrei far leakare la struttura interna della rete. Se il pacchetto arriva a coda piena viene scartato. La rete non è per niente gentile con i pacchetti, sta a me farlo arrivare. Pacchetti persi nel 99% dei casi sono code e strade sbagliate (per motivi) se parlo di dorsali. Nella periferia posso avere interferenze (e.g. wifi). TCP/IP capisce se è una perdita per traffico o casuale. Importante perché se perdo per traffico dovrei rallentare, altrimenti scialla.\n\n- rate\\*ritardo = numero massimo di bit nel buffer (-> definisce grandezza del buffer). volume del \"tubo\" di trasmissione. non utilissimo perché a me interessa il throughput, cioè la sezione\n\n","x":-280,"y":-1830,"width":640,"height":720,"color":"1"},
		{"id":"187dc42cfef0546d","type":"text","text":"# Appunti lezioni raw in rosso - magari poi ci faccio un txt","x":-1492,"y":-2200,"width":465,"height":102,"color":"1"},
		{"id":"5b4bbd10c0ed915d","type":"text","text":"# Sicurezza\n\n\n\nQuasi tutti i governi fanno sniffing, anche se è crittografato.\nBanalmente ho i metadati, quindi posso risalire a chi parla (magari senza sapere cosa), ma posso mettermi ad ascoltare più \"vicino\" ai due che parlano. Se sei un governo puoi fare la qualunque, compreso con le crittografie (non tutto no? se faccio RSA col cazzo mi sa). Tecnicamente sniffing era attaccarmi col cavo (quando c'era un cavo per tutti) ma oggi dipende dalla tecnologia usata ed è un concetto astratto.\n\nPosso fare cose illegali in N (con N enorme) modi. Tipo, posso inviare pacchetti mettendo un mittente che non sono io (se mando la droga e metto come mittente qualcun altro quello non va in galera perché non è dimostrabile che l'ha mandato lui), oppure da router posso tenermi i pacchetti e leggerli, o inoltrarli a una macchina a mia scelta.\n\nContro queste cose c'è roba tipo\n- l'autenticazione\n- confidenzialità (crittografia)\n- autenticità\n- restrizioni di accesso (e.g. VPN protetta da password)\n- firewall (a livello di rete)\n\nCi sono attacchi diversi a seconda di\n- come reagisco alle richieste\n- come creo la connessione (e.g. TCP)\n- ...\n\nDi base si può fare tutto, è una giungla!\nSe mi fingo un altro comunque l'altro può trasmettere, a rigore dovrei anche preoccuparmi di bloccare quello che interpreto (man-in-the-middle).\n\n","x":-3360,"y":-433,"width":739,"height":853,"color":"1"},
		{"id":"9ed19d6e9980b34b","type":"text","text":"# Come invio i messaggi sui Link?\n\nHo sostanzialmente due modi per farlo.\n\n- **_Commutazione di Circuito_** - Letteralmente, creo un collegamento fisico riservato alla coppia sorgente-destinazione, sulla quale sono gli unici a poter comunicare (salvo collegamenti fisici alla linea da parte di terzi, dove i terzi sono verosimilmente i servizi segreti). Garantisce prestazioni stabili, e viene usato nelle linee telefoniche. Naturalmente si può fare anche senza dedicare un intero cavo al singolo canale di comunicazione:\n\t- **_Frequency Division Multiplexing_** (**_FDM_**) - Ogni cavo trasmette un certo range di frequenze EM. Allora le suddivido in N canali, e ad ognuno di questi assegno una certa larghezza di banda (che però sarà stretta);\n\t- **_Time Division Multiplexing_** (**_TDM_**) - Sostanzialmente tratto i canali come una *ready queue* e faccio *preemptive scheduling*. Entro il proprio intervallo di tempo assegnatogli, ogni canale trasmette avendo a disposizione la banda massima;\n- **_Commutazione di Pacchetto_** - Ogni messaggio viene suddiviso in **_pacchetti_**. La rete si occupa di instradare i singoli pacchetti e *tenta* di non fare casino. Interessante notare come nonostante possa fare casino in molti modi (e in effetti lo fa: li perde, sbaglia l'ordine di arrivo, li inoltra a terzi, ...) è il metodo più utilizzato su Internet. Ovviamente il motivo c'è: le comunicazioni sono spesso **_bursty_**, nel senso che gli host stanno *quasi* sempre zitti, tranne in singoli momenti isolati in cui vomitano un enorme messaggio da inviare. Non ha senso dedicare un circuito a una comunicazione in cui non succede *quasi* mai niente: blocco delle risorse che restano inutilizzate quando magari altri host rimasti tagliati fuori potrebbero comunicare il proprio messaggio *bursty*. Idealmente dovrei dare la sensazione all'host di avere una connessione dedicata, il che in parte si risolve aumentando la banda e in parte non si risolve perché ci stanno mille problemi.","x":-4940,"y":1761,"width":700,"height":780,"color":"4"},
		{"id":"deea8f39a16646e1","type":"text","text":"**Throughput Minimo Garantito**: Questo è come l'assicurazione che un servizio Internet ti dà. Supponiamo che tu stia giocando a un videogioco online e non vuoi che la connessione diventi troppo lenta. Il \"throughput minimo garantito\" è come la promessa dell'azienda che la tua connessione rimarrà almeno a una certa velocità. Quindi, anche se Internet diventa affollato, sei sicuro di avere almeno quella velocità per continuare a giocare senza problemi.","x":-1680,"y":-260,"width":546,"height":267},
		{"id":"ed6dd0d5b788bd3e","type":"text","text":"# In pratica e in breve\n\nPer accedere ad Internet ($\\Rightarrow$ scambiare dati con qualsiasi altro nodo collegato), gli host si devono in qualche modo connettere agli ISP (aziendali, università, commerciali), i quali a loro volta devono essere interconnessi (tramite ISP più grandi o IXP).\n\nLa risultante rete di reti è molto complessa, perché la sua evoluzione è figlia di un abnorme ammasso disordinato di fattori (politici, economici, nazionali, ...).","x":-4570,"y":-880,"width":772,"height":300,"color":"3"},
		{"id":"9446a50b389809a0","type":"text","text":"ci sono anche delle vie di mezzo tipo TLS (sicurezza). prima se mandavo una password era in chiaro, chi trovava il pacchetto (non facilissimo) aveva vinto. Transport Layer Security usa TCP ma sta sotto l'applicazione. Quindi io scrivo la phrase in chiaro, tls la critta e la passa a tcp. non lo faccio a livello tcp perché è un casino cambiare un protocollo così lento ad evolversi (super diffuso).","x":-3318,"y":-800,"width":656,"height":200},
		{"id":"1b501ca1023c98e0","type":"text","text":"# Perdite\n\nInternet di base è non affidabile (\"best effort\"), il che significa che i pacchetti possono essere persi o consegnati in ordine casuale.\n\nSe il pacchetto arriva a coda piena viene scartato. La rete non è per niente gentile con i pacchetti, sta a me farlo arrivare. Pacchetti persi nel 99% dei casi sono code e strade sbagliate (per motivi) se parlo di dorsali. Nella periferia posso avere interferenze (e.g. wifi). ","x":-2019,"y":2012,"width":680,"height":276,"color":"1"},
		{"id":"f1e9ad03f9edbfdd","type":"text","text":"# Prova\n\n- a cambiare la dimensione dei pacchetti TCP/IP di un computer (impostazioni del SO? chissà)","x":-545,"y":1182,"width":420,"height":240,"color":"5"},
		{"id":"5b16a0a8827edeef","type":"text","text":"# Formulario (?)\n\n- Massimo numero di bit su un link - $R\\cdot D_p$\n- Avere un TDM (e.g. 10 slot/s) tipicamente in un esercizio significa che ad ogni host è associato uno solo degli slot indicati nel TDM (e.g. 1 slot/s).","x":-545,"y":1454,"width":422,"height":267,"color":"2"},
		{"id":"e98fee2b8eb0a179","type":"file","file":"RitardoMedioInCoda.png","x":-545,"y":285,"width":461,"height":420},
		{"id":"165209213bc6a130","type":"text","text":"## Sulla divisione delle Reti e di Internet\n\nIn pratica, Internet è un sistema talmente complesso che ho una mezza infinità di modi di suddividerlo. Diciamo che a seconda di cosa mi serve fare uso la divisione che più mi è utile. ","x":-4570,"y":-520,"width":772,"height":137,"color":"4"},
		{"id":"23227e82062b49bc","type":"text","text":"# Struttura delle Reti","x":-3964,"y":836,"width":340,"height":50,"color":"6"},
		{"id":"1ec4d0918042c205","type":"text","text":"# Tramissioni su Rete","x":-3968,"y":1401,"width":348,"height":50,"color":"6"},
		{"id":"5cf8d16de6efff56","type":"text","text":"# Commutazione di Pacchetto","x":-4028,"y":2125,"width":468,"height":50,"color":"6"},
		{"id":"8ca68ef0d9cba75a","type":"text","text":"# Where stack protocollare?\n\nOvunque sia necessario far comunicare più elaboratori, in un range che spazia da una semplice LAN fino all'Internet.\n\nSu **LAN** si possono trovare diversi esempi di stack protocollari proprietarie nate tra gli anni '70 e '90, come **NetBIOS** (**Microsoft**) o **AppleTalk**.\n\nCon l'avvento di **_Internet_** si è però tutto uniformato a **_TCP/IP_**, rimasto praticamente l'unico ad oggi in uso.","x":-5736,"y":3655,"width":700,"height":278,"color":"4"},
		{"id":"1a0fe951bbf51b93","type":"text","text":"# Simmetrie tra le stack protocollari\n\nSe comunico voglio sia inviare che ricevere, quindi\n\n- ci sono almeno due stack, una per chi invia e una per chi riceve;\n- tutti gli host possono essere sia mittente che destinatario.\n\nDa questo segue che guardando le varie stack in **_orizzontale_** troviamo una **_simmetria logica_**, ovvero **protocolli omologhi** e **oggetti identici**.\n\nConcettualmente, il **_collegamento logico_** è tra layer di pari livello di tutte le stack, che parlano la stessa \"lingua\" $\\Rightarrow$ il layer $N$ di un dispositivo comunica virtualmente solo e soltanto con il layer $N$ degli altri dispositivi.\n\nL'effettivo **_flusso di informazione_** è però **_verticale_**, eccetto per il livello più basso che rappresenta lo spostamento fisico.\n\nLungo la propria stack, il mittente applica delle funzioni per incapsulare il messaggio (e.g. lo critta e lo mette in una scatola), questo viene fisicamente trasportato al nodo successivo dal livello più basso (e.g. il furgone delle poste) e infine il destinatario applica le funzioni inverse (in ordine inverso, perché stavolta il messaggio risale la stack) per riottenere il messaggio originale (e.g. apre la scatola e lo decritta). \n\nNel complesso, l'informazione \"scende\" e \"risale\" lungo le stack protocollari.\n","x":-4940,"y":2716,"width":700,"height":620,"color":"4"},
		{"id":"f6c22dc935238119","type":"text","text":"# Protocolli e Servizi\n\nIl servizio è il **_cosa_** garantisco (e.g. in questo caso un insieme di primitive che uno strato offre a quello superiore), il protocollo è **_come_** implemento il servizio.\n\n```\nServizio del livello di trasporto: \"Usa la mia primitiva INVIA. Ti garantisco che i tuoi pacchetti arriveranno a destinazione tutti e in ordine, se si disordinano ci penso io a rimetterli a posto\"\nProtocollo del livello di trasporto: TCP\n```\n\nOgni layer, secondo il proprio protocollo, implementa dei servizi usando le proprie risorse e i servizi forniti dal livello sottostante.\n\n Tramite i servizi si possono vedere i layer come delle **_black box_** $\\Rightarrow$ ci si può dimenticare dell'implementazione (protocollo) sottostante in favore di una vista di più alto livello che consta di input e output (servizi e/o informazioni).","x":-5736,"y":3156,"width":700,"height":440,"color":"4"},
		{"id":"4df27d69ac9764ca","type":"text","text":"# What is stack protocollare?\n\nUn **_Protocollo_** definisce l’insieme di regole che mittente e destinatario (e tutti i sistemi intermedi coinvolti) devono rispettare per essere in grado di comunicare.\n\nSe ho una situazione complessa è comodo suddividere i compiti fra più livelli (detti **_layer_**, o *strati*) indipendenti, secondo il buon vecchio principio di modularità.\n\nAd ogni livello corrisponderà quindi (almeno) un \"sotto-Protocollo\" (inteso come modularizzazione del Protocollo che definisce l'intero scambio di messaggi) che da qui in poi chiamerò **_protocollo_** (già... fa ridere).\n\nPer realizzare il Protocollo abbiamo creato una stratificazione di protocolli detta **_layering di protocolli_** o **_stack protocollare_**.\n\nQuesto porta in generale diversi vantaggi:\n\n- Concettualmente è più chiaro cosa succede $\\Rightarrow$ è più facile costruire modelli;\n- L'aggiornamento e/o la sostituzione dei moduli è più semplice e trasparente (è ben chiaro cosa sto facendo, e dove), e non influisce sul resto del sistema.\n\nOgni layer _comunica in modo_ **_bidirezionale_** _con i livelli adiacenti_, realizzando coppie *provider-user*, in cui il primo offre al secondo un **_servizio_**.\n","x":-4940,"y":3376,"width":700,"height":557,"color":"4"},
		{"id":"472a39255272296f","type":"file","file":"Stack Protocollare/Layering.png","x":-5736,"y":2716,"width":700,"height":380},
		{"id":"1bd86960d6e5a8e2","type":"text","text":"# Stack protocollare","x":-3962,"y":3630,"width":336,"height":50,"color":"6"},
		{"id":"89560ca8221b899c","type":"text","text":"# Messaggio di Richiesta HTTP\n\n Inviato dal client al server, consta di tre parti:\n \n - ***Riga di richiesta*** - Una stringa avente sintassi `metodo URI versione_HTTP \\r \\n`, dove\n\t- `metodo` specifica *cosa* voglio fare;\n\t- `URI` specifica l'oggetto all'interno del server con cui voglio interagire. ;\n\t- `versione_HTTP` serve ad assicurarmi che parleremo la stessa lingua;\n\t- `\\r \\n`, caratteri di ritorno a capo e avanzamento riga, comunicano la fine della stringa di richiesta.\n- ***Intestazione (header)*** - Varie righe aventi sintassi `parametro: valore` che specificano informazioni utili alla richiesta;\n- ***Corpo (body)*** - Payload diretto al server, preceduto da una riga vuota. Tipicamente vuoto a sua volta, a meno che non si faccia una richiesta di upload (metodo POST).\n\t","x":-11985,"y":7956,"width":473,"height":580,"color":"4"},
		{"id":"a30868312d411d98","type":"text","text":"# Messaggio di Risposta HTTP\n\nRisposta del server al client, anche qui tre parti:\n\n- Riga di stato - Una stringa avente sintassi `versione_HTTP STATUS PHRASE \\r \\n`, dove\n\t- `versione_HTTP` serve ad assicurarmi che parleremo la stessa lingua;\n\t- `STATUS` è un codice che identifica l'esito della richiesta;\n\t- `PHRASE` è una breve descrizione testuale associata al codice `STATUS`.\n- ***Intestazione (header)*** - Varie righe aventi sintassi `parametro: valore` che specificano informazioni utili alla risposta;\n- ***Corpo (body)*** - L'effettivo contenuto della risposta. Spesso in caso di errore si tratta della stampa a schermo a caratteri cubitali del codice di errore.","x":-11437,"y":7956,"width":473,"height":580,"color":"4"},
		{"id":"55d3231875e83cc8","type":"text","text":"# Codici di Risposta\n\n\tSe sei un Server devi rispondere bene, altrimenti dall'altra parte non capiscono\nVi sono 5 categorie di codici `STATUS`, il cui significato è poi chiarito dalla `PHRASE`:\n\n- ***Codici 1xx*** - la risposta contiene solo informazioni.\n\t- `100 Continue` indica che il server è pronto a ricevere la richiesta del client;\n- ***Codici 2xx*** - l'operazione è andata a buon fine.\n\t- `200 OK` è la risposta che vorremmo ricevere sempre, e restituisce del contenuto;\n\t- `204 No Content` significa \"tutto bene, ma non ho niente da inviarti\", può succedere se ad esempio chiedo di salvare la pagina;\n- ***Codici 3xx*** - \"ho dovuto reindirizzare la richiesta che mi hai fatto\".\n\t- `301 Moved Permanently` significa esattamente \"quello che chiedi non è più qui, da adesso in poi reindirizzo tutte le tue richieste per questo oggetto al nuovo URI;\n- ***Codici 4xx*** - errore nella richiesta del client.\n\t- `400 Bad Request` significa \"non ho capito, ed è colpa tua\";\n\t- `403 Forbidden` è un \"non hai i permessi per chiedermi questa risorsa\";\n\t- `404 Not Found` è un \"la risorsa che chiedi non esiste su questo server\";\n- ***Codici 5xx*** - \"non ci sono riuscito, ma è colpa mia\".\n\t- `500 Internal Server Error` significa \"non so manco io che è successo\";\n\t- `503 Service Unavailable` indica che il server al momento non può gestire la richiesta, in pratica è un \"riprova più tardi\"\n\t- `505 HTTP Version Not Supported` significa \"no hablo tacos\".","x":-10855,"y":7956,"width":700,"height":1040,"color":"4"},
		{"id":"973215b7fd31a26a","type":"text","text":"### Esempio di GET\n```\nGET /page.html?parametro=valore HTTP/1.1\nHost: example.com\n```","x":-13000,"y":9096,"width":459,"height":160,"color":"4"},
		{"id":"ee9aa768d32eb89f","type":"text","text":"# Parametri delle query\n\nSebbene esistano parametri per diversi metodi, quelli che compaiono nell'URL sono comunemente associati al metodo GET.\n\nNon esiste una lista assoluta di parametri standard, poiché dipendono da come è scritto il singolo server.\n\nComplessivamente possiamo trovare parametri di\n\n- **ricerca o filtro** - specificano una query all'interno del server:\n\t`?q=termine_di_ricerca`\n\t`?categoria=notizie&anno=2022`\n- **ordinamento** - specificano l'ordine dei risultati restituiti dal server:\n\t`?ordine=asc&campo=data`\n- **paginazione** - specificano come vengono visualizzati i risultati della richiesta:\n\t`?pagina=2&per_pagina=10`\n- **autenticazione** - comunicano token di accesso e/o credenziali utente:\n\t`?token=abc123`\n- **localizzazione** - specificano la localizzazione e/o le preferenze linguistiche dell'utente:\n\t`?lingua=it_IT&paese=IT`\n\nChi crea il server può definire dei parametri personalizzati per trasmettere informazioni specifiche:\n\n\t ?parametro1=valore1&parametro2=valore2","x":-13000,"y":9307,"width":459,"height":904,"color":"4"},
		{"id":"ada1ce65a17b1ff7","type":"text","text":"### Esempio di POST\n```\nPOST /endpoint HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 25\n\nparametro1=valore1&parametro2=valore2\n```","x":-12444,"y":9096,"width":459,"height":301,"color":"4"},
		{"id":"be024ab3c20ae124","type":"text","text":"### Esempio di PUT\n```\nPUT /risorsa HTTP/1.1\nHost: example.com\nContent-Type: application/json\nContent-Length: 43\n\n{\"chiave\": \"valore\", \"altro\": \"dato da salvare\"}\n```","x":-12444,"y":9436,"width":459,"height":301,"color":"4"},
		{"id":"16f174d47e0dd2b5","type":"text","text":"### Esempio di richiesta\n```\nGET /index.html HTTP/1.1\\r\\n\nHost: www-net.cs.umass.edu\\r\\n\nUser-Agent: Firefox/3.6.10\\r\\n\nAccept: text/html,application/xhtml+xml\\r\\n\nAccept-Language: en-us,en;q=0.5\\r\\n\nAccept-Encoding: gzip,deflate\\r\\n\nAccept-Charset: ISO-8859-1,utf-8;q=0.7\\r\\n\nKeep-Alive: 115\\r\\n\nConnection: keep-alive\\r\\n\n\\r\\n\n```","x":-11985,"y":9956,"width":473,"height":447,"color":"4"},
		{"id":"ff01e5961e252647","type":"text","text":"# Campi degli Header\n\n### Solo Client\n\n- **Accept** - Indica i tipi di contenuto che accetta come risposta;\n- **Accept-Charset** - Indica i set di caratteri che accetta come risposta;\n- **Accept-Encoding** - Indica le codifiche che accetta come risposta;\n- **Accept-Language** - Indica le lingue in cui accetta la risposta;\n- **Authorization** - Trasmette le credenziali di autenticazione;\n- **Cookie** - Invia i cookie al server.\n- **Host** - Specifica il nome dell'host e la relativa porta al quale è destinata la richiesta;\n- **If-Modified-Since**: Richiede la risorsa solo se è stata modificata dopo una data specificata;\n- **Upgrade** - Usato dal client per chiedere al server di cambiare il protocollo utilizzato;\n- **User-Agent** - Specifica al server il software utilizzato per inviare il messaggio HTTP;\n### Solo Server\n- **Last-Modified** - Indica la data e l'ora dell'ultima modifica alla risorsa;\n- **Expires** - Specifica la scadenza della risorsa ($\\Rightarrow$ quando non deve più essere considerata valida se trovata in cache);\n- **ETag** - Identificatore univoco per una specifica versione di una risorsa;\n- **Accept-Ranges** - Stai scaricando un file e ti salta la connessione. Devi riscaricarlo tutto? No, se questo valore è impostato a `bytes` puoi riprendere da dove ti eri interrotto! \n- **Location** - Reindirizza il client a una nuova locazione URL;\n- **Server** - Comunica al client il processo server che ha generato la risposta;\n- **Set-Cookie** - Invia cookie al client;\n### Sia Client che Server\n- **Cache-Control** - Specifica le istruzioni di caching;\n- **Connection** - Indica se a seguito del messaggio voglio chiudere la connessione (`close`, comportamento predefinito di HTTP/1.0) o se voglio mantenerla attiva (`keep-alive`, comportamento predefinito di HTTP/1.1); \n- **Content-Encoding** - Indica la codifica del corpo del messaggio;\n- **Content-Language** - Indica la lingua del corpo del messaggio;\n- **Content-Length** - Indica la lunghezza del messaggio nel body. Utile quando uso il metodo HEAD per capire quanto è grande il file che voglio scaricare;\n- **Content-Type** - Indica il tipo di contenuto presente nel body (INDICA ANCHE QUELLO RICHIESTO??? IN ESAME DICE QUESTO!!!);\n- **Date** - Specifica data e ora d'invio del messaggio;\n- **Keep-Alive** - Quando `Connection` è impostato su `keep-alive`, questo parametro specifica dopo quanto tempo il server chiuderà la connessione dopo l'ultimo messaggio inviato (`timeout=60` imposta la tolleranza a 1 minuto) oppure al raggiungimento di quale numero massimo di richieste (`max`);\n- **Server**: Usato dal server per identificarsi con il client.\n","x":-11875,"y":8656,"width":805,"height":1200,"color":"3"},
		{"id":"44ce1eef2a1a2afa","type":"text","text":"### Esempio di Risposta\n\n```\nHTTP/1.1 200 OK\\r\\n\nDate: Sun, 26 Sep 2010 20:09:20 GMT\\r\\n\nServer: Apache/2.0.52 (CentOS)\\r\\n\nLast-Modified: Tue, 30 Oct 2007 17:00:02 GMT\\r\\n\nETag: \"17dc6-a5c-bf716880\"\\r\\n\nAccept-Ranges: bytes\\r\\n\nContent-Length: 2652\\r\\n\nKeep-Alive: timeout=10, max=100\\r\\n\nConnection: Keep-Alive\\r\\n\nContent-Type: text/html; charset=ISO-8859-1\\r\\n\n\\r\\n\n[document content...]\n[...]\n```","x":-11475,"y":9956,"width":511,"height":447,"color":"4"},
		{"id":"6ce8f85f78362603","type":"text","text":"# Metodi di Richiesta\n\n- ***GET*** - Richiede la risorsa `path` al server. Può essere usato per richiedere metadati o per far generare sul momento la risorsa di cui ho bisogno.\n\t- Lo stesso indirizzo IP con cui ho stabilito la connessione potrebbe contenere più domini, per cui sono obbligato a specificare il campo `host` dell'header;\n\t- Posso fornire al server ulteriori specifiche su *come* rispondermi aggiungendo `?` alla fine dell'`URI` e scrivendo ***parametri*** (nella forma `parametro=valore`) separati da `&` (e.g. `/page.html?categoria=notizie&anno=2022`);\n\t- Esiste una variante del GET, detto ***GET CONDIZIONALE***, per sfruttare il **_web caching_** $\\Rightarrow$ richiede la pagina al server solo se è stata modificata rispetto alla versione che conosce;\n\t- Il GET dovrebbe essere sempre una richiesta ***idempotente***, nel senso che due GET di fila dovrebbero produrre lo stesso risultato. Questo non è sempre vero, perché esistono parametri dinamici che possono modificare lo stato del server. Possiamo considerarla una vulnerabilità, potrei usarli per fare injection (e.g. SQL), cambiare le autorizzazioni o accedere a risorse riservate;\n- ***HEAD*** - Richiede l'header che verrebbe restituito a seguito di una richiesta GET. Usato principalmente nei controlli di validità della ***web cache*** (e.g. \"la pagina è stata modificata?\");\n- ***POST*** - Invia dati al server tramite il body. E come fa il server a sapere cosa fare con questi dati?\n\t- L'applicazione server definisce degli ***endpoint*** (in pratica degli URL), ovvero dei \"contenitori\" di richieste di azioni simili (e.g. `/crea`, `/aggiungi`, `/elimina`, ...);\n\t- Nella richiesta POST posso quindi specificare direttamente l'endpoint a cui è diretta (e.g. so di voler creare un file e so che il server usa l'endpoint `/crea`);\n\t- Se non conosco l'endpoint corretto posso indirizzare le richieste a un endpoint generico. A quel punto il server prova a capire cosa farci ($\\Rightarrow$ a quale endpoint mandarlo), magari anche interpretando il body (l'implementazione specifica sono fatti suoi);\n\t\t- Se non conosco neanche l'endpoint generico tocca cercare la documentazione, salvo avere voglia di fare trial-and-error: se specifico un endpoint che non esiste il server mi risponde 404;\n\t\t- Inviare deliberatamente un gran numero di richieste POST generiche per costringere il server ad un overhead di smistamento è considerabile un attacco DoS;\n\n- **_PUT_** - Invia nel body un intero documento da salvare nella locazione `URI`, sovrascrivendo qualsiasi cosa ci fosse prima. Ovviamente è un'operazione rischiosa, sta al server gestirla bene;\n- **_DELETE_** - Autoesplicativo;\n- ***PATCH*** - applica modifiche parziali a una risorsa.\n- **_COPY, MOVE_** - Copiano o spostano la risorse in una nuova locazione (anche un'altro server);\n- **_LOCK, UNLOCK_** - Primitive di sincronizzazione (come in un SO) (ESISTONO ??????);\n- **_OPTIONS, TRACE_** - Opzioni e diagnostica della connessione;\n- ***CONNECT*** - Stabilisce una connessione di tunnel (e.g. VPN).","x":-12907,"y":7956,"width":837,"height":1040,"color":"4"},
		{"id":"2edbb402780f44c6","type":"text","text":"# HTTP (Porta 80)\n\nParadigma **_richiesta-risposta (client-server)_** di tipo ***stateless*** basato su ***TCP*** che convenzionalmente utilizza la ***porta 80***.\n","x":-12762,"y":7716,"width":548,"height":160,"color":"6"},
		{"id":"8b3faa26de750a2c","type":"text","text":"# Protocollo HTTP","x":-11619,"y":7771,"width":290,"height":50,"color":"6"},
		{"id":"349ec5026bac8b92","type":"text","text":"# Protocolli Applicazione\n\nSono i protocolli di livello più alto, e ignorano completamente la complessità della rete (e.g. percorso dei pacchetti, reinvio in caso di perdita, ...).\n\nA ogni porta è convenzionalmente associato un protocollo, che definisce\n\n- le **_tipologie_** dei messaggi scambiati (e.g. richiesta, risposta, ...);\n- la **_sintassi_** del messaggio ($\\Rightarrow$ come va scritto, e.g. definisce i **campi**);\n- la **_semantica_** del messaggio ($\\Rightarrow$ cosa significa quello che scrivo secondo la sintassi);\n- le **_regole_** che devono rispettare mittente e destinatario per scambiarsi i messaggi (e.g. quanto aspettare tra un messaggio e l'altro, \"se cancello un messaggio qui va cancellato anche dall'altra parte\").\n\nTra i protocolli applicazione troviamo due macro-categorie:\n\n- **_open-source_** (e.g. HTTP), definiti con uno standard pubblico ([RFC](https://it.wikipedia.org/wiki/Request_for_Comments)). Paradossalmente questo aiuta a ridurre le vulnerabilità del protocollo, in quanto aumentano le persone che possono individuarle e conseguentemente correggerle. La condivisione del protocollo è in generale un principio ben noto in ambito sicurezza, e di norma i problemi di vulnerabilità in questi casi si riducono al tempo che intercorre tra il ritrovamento di un bug e il suo *fix*;\n- **_proprietari_** (e.g. Skype), più ottimizzati ma a volte meno efficienti (difficile trovare problemi con poca statistica).\n\n","x":-10856,"y":6005,"width":700,"height":1072,"color":"4"},
		{"id":"35235b872aeaab53","type":"text","text":"# Stack Protocollare ISO/OSI\n\nNel 1984 l'_International Organization for Standardization_ (ISO) ufficializza uno standard architetturale chiamato _Open Systems Interconnection_ (OSI).\n\nLa stack protocollare prevede 7 livelli. Rispetto a TCP/IP (di cui è predecessore spirituale) vi sono due layer aggiuntivi:\n\n- Layer di Presentazione (anche detto livello 6, partendo dal basso) - si pone subito sotto al livello di Applicazione, il quale lo assorbe completamente in TCP/IP. Si occupa esplicitamente della codifica e della crittografia dei dati;\n- Layer di Sessione (livello 5) - definisce alcuni dettagli della comunicazione inter-host, come la gestione degli errori nell'invio dei pacchetti E ALTRO???? Nel modello TCP/IP, i suoi compiti sono stati divisi tra l'Applicazione e il Trasporto.\n\n","x":-4940,"y":4203,"width":700,"height":586,"color":"3"},
		{"id":"ea111d8cb579b650","type":"text","text":"# Paradigmi di Comunicazione\n\nUn **_paradigma di comunicazione_** è uno schema secondo cui avvengono lo scambio di informazioni e la gestione delle connessioni all'interno di una rete (tendenzialmente si implementa a livello di Internet).\n\nVi sono due paradigmi di comunicazione principali:\n\n- **_client-server_** - utilizzato da protocolli Applicazione quali HTTP, FTP e IMAP. I sistemi terminali vengono divisi in due categorie:\n\t- **_server_** - host sempre attivo ($\\Rightarrow$ **_sempre in ascolto_**) e con indirizzo IP permanente ($\\Rightarrow$ sempre identificabile nella rete). **_Fornisce servizi_** al client. Se si scollega non può esserci comunicazione, neanche tra client (in quanto si basano su percorsi di tipo client -> server -> client);\n\t- **_client_** - host che comunica solo e soltanto con un terminale di tipo server, a cui **_richiede servizi_**. Non è tenuto ad essere sempre attivo, né ad avere un IP fisso $\\Rightarrow$ non è tenuto ad essere reperibile (da chi, poi?);\n- **_peer-to-peer (p2p)_** - ogni host (*peer*, \"di egual importanza\") può essere sia client che server, richiedendo e fornendo servizi. Questo paradigma rende la rete estremamente **_scalabile_**, in quanto al crescere dei peer aumenta anche l'offerta di servizi. Più complesso da gestire, perché non ci sono indirizzi fissi e nessun peer è tenuto ad essere sempre in ascolto. Utilizzato tipicamente da protocolli legati alla condivisione di file.\n","x":-10856,"y":4181,"width":700,"height":610,"color":"4"},
		{"id":"aa2f1768f7663ebf","type":"text","text":"# Come?\n\nChi vuole avviare una comunicazione ha bisogno di far girare un **_processo client_**. Questo dovrà scegliere un canale di comunicazione virtuale, detto **_socket_** (o **identifier**, che puoi vedere come un'***interfaccia virtuale*** con il layer di Trasporto), una coppia di valori che rappresentano\n\n- **_indirizzo IP_**, che identifica univocamente da dove il client sta comunicando (e quindi dove inviare la risposta);\n- **_porta_**, un numero che convenzionalmente specifica con quale tipo di protocollo Applicazione standard *mi aspetto* di inviare e ricevere, ma che più in generale serve a identificare il ***socket***. Quello di porta è un concetto ***virtuale***.\n\nLa creazione del socket avviene tramite le API fornite dal livello di Trasporto.\n\nA questo punto la richiesta discende la stack protocollare del client e risale quella del **_destinatario_**, che per ricevere il messaggio a livello Applicazione deve essere **_già in ascolto_** sulla porta richiesta dal client. Questo si realizza tramite un **_processo server_**, che a sua volta per ascoltare ha creato un **_socket_**.\n\nIl che ci fa capire che in realtà quello che rompe il ghiaccio è il server. Costui runna il suo processo server mettendosi in ascolto, e si fa pubblicità (*\"Ciao a tutti, sono 6.6.6.6! Mandatemi pure un messaggio PAI (Protocollo che ho Appena Inventato) sulla porta 69!\"*). A questo punto il client sa a chi scrivere e su quale porta.\n\nLa coppia di socket definisce il **_canale di comunicazione_** $\\Rightarrow$ entrambi sanno a chi comunicare (IP) e come comunicare (porta). Stabilito il canale di comunicazione, i due processi usano uno schema di tipo **_message passing_**.\n\nO meglio, questo succede se uso TCP. A UDP non frega niente di creare canali di comunicazione. *\"Sei in ascolto? ... scherzo, non serve che tu lo sia, era una domanda retorica. Tieni questo pacchetto! Ciao!\"*. Sarà arrivato a destinazione?","x":-10856,"y":3360,"width":700,"height":777,"color":"4"},
		{"id":"40ee9c3447f7fb82","type":"text","text":"# Trasferimento File","x":-12648,"y":7047,"width":319,"height":60,"color":"6"},
		{"id":"acea343615dea605","type":"text","text":"# Protocolli Applicazione","x":-12681,"y":6508,"width":386,"height":66,"color":"6"},
		{"id":"877a13b60a49c414","type":"text","text":"# Posta Elettronica (Porta 25)\n\nSchema per scambio di messaggi tra server basato su ***TCP*** che usa tre protocolli: ***SMTP*** per il *push*, ***POP*** e ***IMAP*** per il *pull*.","x":-11605,"y":5648,"width":548,"height":160,"color":"6"},
		{"id":"a13ba86d0881bc3c","type":"text","text":"# Evoluzione del protocollo HTTP\n\nIl prototipo di ***Hypertext Transfer Protocol***, ***HTTP/0.9***, nasce nel 1991 con il World Wide Web. Si trattava di un protocollo scarno, in cui esisteva solo il metodo GET con pochi parametri.\n\nNella sua prima versione ufficiale _**HTTP/1.0**_ ([RFC 1945](https://www.rfc-editor.org/rfc/pdfrfc/rfc1945.txt.pdf), 1996) era prevista una connessione di tipo ***non-persistente*** (si apre il canale TCP, si invia uno e un solo oggetto, si chiude il canale TCP).\n\nIl problema ovvio è che per richiedere $N$ oggetti devo aprire e chiudere $N$ connessioni, ognuna delle quali deve fare *handshaking* sprecando un RTT. \n\nAllora i browser dissero \"abbiamo la soluzione! mandiamo $N$ richieste TCP in parallelo!\". Bello, ma TCP non è pensato per una cosa del genere, e questa pratica congestiona la rete.\n\nLa vera soluzione la porta **_HTTP/1.1_** ([RFC 2616](https://www.rfc-editor.org/rfc/pdfrfc/rfc2616.txt.pdf), 1999), lasciando la connessione aperta e introducendo introducendo i GET in successione (può essere visto come una forma di **multiplexing**, essendo più informazioni su singolo canale che vengono poi smistate dal server).\n\nQuesto mitiga il problema, ma non lo risolve del tutto. Una pagina web è un contenitore di elementi \"grandi\" e \"piccoli\", i quali vengono richiesti al server, che gestisce le richieste GET secondo l'ordine di arrivo (FCFS), motivo per cui\n\n- Un oggetto piccolo può ritrovarsi dietro oggetti grandi, facendo schizzare alle stelle l'*average waiting time* $\\Rightarrow$ **blocco head-of-line (HOL)**;\n- Per come è scritto TCP, se perdo anche un solo pacchetto dell'oggetto grande perdo un sacco di tempo prima di ritrasmetterlo $\\Rightarrow$ l'attesa media cresce ancora.\n\nQuesto problema viene risolto da ***HTTP/2*** (**RFC 7540, 2015**) \"spezzettando\" ogni richiesta/risposta in **frame** e costruendo una **pipeline** (migliora quindi il multiplexing di HTTP/1.1, trasmettendo più oggetti contemporaneamente).\n\nInclude anche migliorie generali al protocollo:\n\n- ***server push*** - cerca di fare prediction e inviarti cose che non hai ancora richiesto, potenzialmente riducendo il numero di richieste. In teoria questi elementi non vengono eseguiti se non richiesti, ma potrebbero restare salvati in una qualche cache;\n- ***priorità*** - consente di assegnare una priorità alle richieste;\n- ***compressione degli header*** - riduce l'overhead di trasferimento.\n\nResta ancora un problema. TCP assume che ogni client instauri una e una sola connessione, e gestisce il sovraccarico di rete e l'affidabilità dando questo per scontato. In pratica, è un protocollo basato su grandi oggetti e su pochi flussi (connessioni), mentre Internet di fatto funziona al contrario.\n\nNasce quindi l'idea di spostare HTTP su UDP sfruttando ***QUIC*** (**Quick UDP Internet Connections**), un protocollo di trasporto sviluppato da ***Google***. Questo protocollo, chiamato ***HTTP/3*** ([RFC 9914](https://www.rfc-editor.org/rfc/rfc9114.html), 2022), al momento in cui scrivo è in fase di sviluppo e sperimentazione.\n\n\tOnce a client knows that an HTTP/3 server exists at a certain endpoint, it opens a QUIC connection. QUIC provides protocol negotiation, stream-based multiplexing, and flow control.","x":-14838,"y":7956,"width":700,"height":1395,"color":"4"},
		{"id":"6694e27578406638","type":"text","text":"# Ma essere stateless è un problema!\n\n- **Autenticazione** - Faccio una richiesta mandando username e password. Il server mi dice `200 OK`, ma alla richiesta successiva non sa che sono io (`chi siete? cosa portate? un fiorino!`);\n- **Sessione** - Non posso memorizzare le preferenze sui siti;\n- **Lock** - Voglio fare due modifiche consecutive un oggetto, e non accetto che ne venga fatta una sola o che qualcuno usi l'oggetto tra una modifica e l'altra. Usando un protocollo *stateful* posso usare un *lock* fino a fine operazioni, ma HTTP non sa chi sono (`chi l'ha messo quel lucchetto? Boh vabbè, per me resta così`);","x":-13980,"y":8251,"width":837,"height":280,"color":"4"},
		{"id":"f99413b00ff804a3","type":"text","text":"# Una possibile soluzione: i Cookies di Sessione\n\nSono costretto ad usare qualcosa di esterno al protocollo che tenga traccia dello stato del client, e si chiama ***cookie***.\n- All'apertura di una connessione, il server riceve una prima richiesta senza cookie;\n- Al server non piace non sapere chi sei, quindi quando manda la prima risposta riempie il campo `set-cookie` dell'header con un valore che identifica univocamente l'utente (e.g. `1678`);\n- Il client riceve il cookie come stringa (e.g. `set-cookie: nome-cookie=1678; Max-Age=3600; Domain=example.com`), e sta a lui manipolarla per estrarne i dati. Tipicamente il browser si crea un file (e.g. `.txt`) che mantiene in RAM e che usa come riferimento per le richieste successive;\n- Quando invia una nuova richiesta, il client include nel campo `Cookie` dell'header le informazioni di cui è in possesso;\n- Adesso il server saprà con chi sta parlando e agirà di conseguenza fino alla scadenza del cookie, al termine della quale il client si ritroverà stampato a schermo `session expired`.\n\n**Il singolo cookie è associato a uno specifico dominio del server**, e vale solo per quest'ultimo. Si possono specificare ulteriori domini di validità del cookie nel campo `Domain`(e.g. `Domain=.eg.com` rende il cookie valido per tutti i sottodomini di tipo `subdomain.eg.com`).","x":-13980,"y":8576,"width":837,"height":520,"color":"4"},
		{"id":"2661b4a7e85defac","type":"text","text":"# ChatGPT risponde: \"Perché lasciare aperta una connessione TCP (HTTP 1.1) non è banale a livello implementativo?\"\n\nLasciare aperta una connessione TCP, come previsto dal protocollo HTTP/1.1, non è banale a livello implementativo per diversi motivi:\n\n1. **Gestione delle risorse del server**: Ogni connessione TCP aperta richiede risorse da parte del server, come memoria e capacità di elaborazione. Mantenere molte connessioni aperte contemporaneamente può esaurire rapidamente le risorse del server, riducendo le prestazioni complessive del sistema.\n    \n2. **Gestione dello stato della connessione**: Quando una connessione TCP rimane aperta, il server deve mantenere uno stato associato a quella connessione, che include informazioni sullo stato della sessione, i dati in sospeso e altre informazioni di controllo. Gestire lo stato di molte connessioni aperte contemporaneamente può diventare complesso e richiedere una gestione accurata delle risorse.\n    \n3. **Rischio di esaurimento delle risorse**: Se non gestite correttamente, le connessioni TCP aperte possono portare all'esaurimento delle risorse del server, che può causare degrado delle prestazioni o addirittura un blocco completo del server.\n    \n4. **Potenziali problemi di sicurezza**: Le connessioni TCP aperte possono essere soggette a attacchi come attacchi di tipo DoS (Denial of Service) o DDoS (Distributed Denial of Service), che sfruttano la disponibilità delle connessioni per sovraccaricare o saturare il server.\n    \n5. **Complessità dell'implementazione del pooling delle connessioni**: Per mitigare i problemi sopra menzionati, è comune utilizzare meccanismi di pooling delle connessioni, che consentono di riutilizzare le connessioni TCP esistenti anziché aprirne continuamente di nuove. Tuttavia, la corretta implementazione di un pool di connessioni può essere complessa e richiedere una gestione accurata delle risorse e dei timeout.\n    \n\nIn sintesi, sebbene mantenere aperte le connessioni TCP possa offrire vantaggi come tempi di risposta più rapidi e una maggiore efficienza complessiva della comunicazione client-server, è necessario affrontare diverse sfide implementative e gestionali per farlo in modo sicuro ed efficiente.","x":-16680,"y":8135,"width":848,"height":817},
		{"id":"c25570b5d51372e2","type":"file","file":"Protocolli Applicazione/HTTP/HTTP_1.0.png","x":-15541,"y":7991,"width":460,"height":411},
		{"id":"04b979f48c716c0b","type":"file","file":"Protocolli Applicazione/HTTP/HTTP_2.0.png","x":-15660,"y":8952,"width":698,"height":313},
		{"id":"77ddaf1188c7b900","type":"file","file":"Protocolli Applicazione/HTTP/HTTP_1.1.png","x":-15660,"y":8494,"width":698,"height":319},
		{"id":"dab2f7463a1544fc","type":"text","text":"# Cookies Traccianti\n\nCi sono siti che si ricordano chi sei anche quando riavvii il computer. Ma il browser non si limita a salvare i cookie in RAM? Non proprio. A seconda della sua implementazione interna può decidere di salvarli su disco (e.g. se mi arriva un cookie che scade tra una settimana forse ha senso conservarlo).\n\nOra, è chiaro che mi va bene non dover loggare su Steam ogni volta che riavvio il computer. Infatti, finché questi ***cookies persistenti*** sono solo quelli del server con cui sto parlando non c'è problema.\n\nNon va più bene se oltre ai suoi cookies il server mi manda quelli di altri server che non contatto direttamente (***cookies di terze parti***), che permettono a gruppi di server di tracciare le attività del client.","x":-14031,"y":9176,"width":420,"height":568,"color":"4"},
		{"id":"431962e65465019d","type":"text","text":"# Sicurezza\n\nE se intercetto un cookie di sessione? In linea di principio posso impersonare un client regolarmente loggato pur non avendo alcuna password.\n\nIn pratica ci sono diverse forme di difesa:\n\n- Utilizzare il flag `Secure`, che consente lo scambio del cookie solo con ***HTTPS***;\n- Utilizzare il flag `HttpOnly`, che impedisce al codice ***Javascript*** di accedere al contenuto del cookie tramite l'API `document.cookie`;\n- Settare il parametro `SameSite` al valore `Strict` consente l'invio del cookie solo e soltanto al server che l'ha creato.\n\nChe c'entra Javascript?\n\nIl cookie è in generale un contenitore di informazioni i cui campi sono inizialmente stabiliti dal server che lo crea, ma il Javascript ($\\Rightarrow$ il server fa girare codice sul client) può aggiungerne e riempirli con le informazioni del client. Segue che il cookie può trasformarsi in una vera e propria ***fingerprint*** contenente informazioni come font, risoluzione dello schermo, latenza e preferenze sui siti che visito, e che il server può rivendere a gruppi di server interessati a tracciare un profilo dei miei gusti (e.g. siti di e-commerce).\n\n\tSi possono mascherare queste informazioni, ma dall'altra parte possono accorgersi che tu mascheri, quindi attiri l'attenzione. L'unico metodo funzionante è disabilitare Javascript\n","x":-13520,"y":9176,"width":420,"height":1035,"color":"#4545ff"},
		{"id":"beb0fa9d0cb9609a","type":"text","text":"### Cross-Site Scripting (XSS)\n\nSei su un forum, e un tizio senza foto profilo posta un link. Tu lo apri, sembra un sito tranquillo, interagisci ed esci. Fine.\n\nO almeno, questo è quello che vedi tu.\n\nCiò che succede è che in qualsiasi punto (URL compreso, in questo caso hai perso anche solo cliccando sul link) di questo *nuovo sito* (*Cross-Site*) potrebbe esserci *codice Javascript* (*scripting*) malevolo.\n\n\"Vabbè, ma cosa potrà mai fare il Javascript\".\n\n- Leggere e/o modificare la zona di memoria del browser (e quindi credenziali d'accesso, cookies, ...);\n- Inviare richieste web, come scaricare contenuto o inviare informazioni a un server malevolo;\n- Sfruttare vulnerabilità del browser per accedere al filesystem locale del client.","x":-14031,"y":9791,"width":420,"height":612,"color":"#4545ff"},
		{"id":"51c10dffbde894c3","type":"text","text":"Un attacco Canvas, anche noto come Canvas Fingerprinting, è una tecnica di tracciamento utilizzata dai siti web per identificare univocamente gli utenti visitatori basandosi sulle caratteristiche grafiche del loro browser e del loro dispositivo. Questa tecnica sfrutta l'elemento HTML5 Canvas, che consente ai browser di disegnare grafica dinamica e manipolare immagini utilizzando JavaScript.\n\nNell'attacco Canvas, il sito web genera un'immagine invisibile all'interno dell'elemento Canvas e utilizza JavaScript per manipolarne i pixel in modo specifico e univoco per ogni visita. Questa manipolazione dei pixel è sottoposta a un algoritmo che crea un \"fingerprint\" grafico univoco del dispositivo e del browser dell'utente, basato su caratteristiche come la precisione del colore, la profondità di bit, la risoluzione dello schermo e altre proprietà grafiche.\n\nIl fingerprint ottenuto attraverso l'attacco Canvas può essere utilizzato per tracciare gli utenti attraverso le loro visite a diversi siti web, anche se questi siti non condividono direttamente i dati di tracciamento. Questo perché il fingerprint grafico rimane costante anche quando l'utente visita diversi siti, consentendo ai tracker di profilare l'utente e seguire le sue attività online.\n\nGli attacchi Canvas sono considerati una minaccia alla privacy degli utenti, poiché consentono ai siti web di tracciare e profilare gli utenti senza il loro consenso esplicito. Tuttavia, le moderne tecnologie di privacy e sicurezza dei browser cercano di limitare l'efficacia di queste tecniche e offrono agli utenti opzioni per proteggere la propria privacy online, come il blocco dei fingerprinting e l'uso di estensioni anti-tracciamento.","x":-13520,"y":10237,"width":420,"height":1040},
		{"id":"8235584e2a6409b7","type":"text","text":"# HTTPS (Porta 443)\n\nA ognuna delle versioni di HTTP posso affiancare il layer di sicurezza SSL/TLS e chiamare il protocollo risultante HTTPS. In realtà posso farlo con tutti i protocolli Applicazione (e.g. FTPS, SSHS, ...), ma nessuno di loro è mainstream come HTTPS.","x":-14838,"y":7497,"width":700,"height":162,"color":"#4545ff"},
		{"id":"b42a1d8cb55878e0","type":"text","text":"# Proxy Server per Web Cache HTTP\n\nUn ***proxy server*** è in generale un intermediario tra un client e un server.  \n\nPosso usarlo per tante cose, tra le quali costruire una ***cache*** del \"vero\" server a cui è indirizzata la richiesta del client, mirando a **ridurre i tempi di risposta** e **alleggerire il traffico del server** di origine.\n\nIn che modo viene gestita questa web cache?\n\n- Il server distribuisce ai propri proxy delle copie dei dati, specificando per ognuno valori come `Last-Modified`, `ETag`, `TTL`, ...;\n- Quando il client fa una richiesta GET al proxy possono verificarsi due scenari:\n\t- ***cache miss*** - non ha il dato richiesto, si accolla il compito di recuperarlo con un GET dal server e se lo salva per eventuali richieste future.\n\t\t- Notare che il motivo per cui non ha il dato richiesto dipende dalle **politiche di gestione della cache**. Magari semplicemente non lo ha mai avuto, ma magari l'ha dovuto sacrificare perché aveva esaurito lo spazio. Come in tutte le cache, l'algoritmo che sceglie cosa rimuovere è fondamentale per l'ottimizzazione dei *cache hit*.\n\t- ***cache hit*** - ha il dato richiesto. Ma è aggiornato? Seguono esempi di **politiche di cache hit**:\n\t\t- il proxy non si pone nemmeno la domanda - \"`la copia che ho resta valida fino alla scadenza del TTL`\". Rischia di dare al client roba non aggiornata, ma non perde tempo;\n\t\t- il proxy manda una richiesta HEAD al server - è interessato al valore di `Last-Modified`:\n\t\t\t- se coincide con la propria copia, la congestione di rete tira un sospiro di sollievo. Il client un po' meno, perché per fare questo check serve comunque almeno un RTT;\n\t\t\t- se non coincide con la propria copia non solo ho già aspettato un RTT per l'HEAD, ma ora mi tocca aspettarne un altro per il GET (più il tempo di trasmissione!). In pratica è **peggio di un cache miss**!\n- A questo punto (e senza curarsi di quello che è successo internamente alla rete) il client è certo che il proxy gli fornirà il dato richiesto.\n\nNotare che in questo scenario anche nel caso migliore il proxy invia un file al client. Posso fare di meglio? Certamente, usando il ***GET condizionale***. Nella richiesta GET specifico una certa data e ora nel campo `If-Modified-Since`, intendendo \"dammi questo dato solo se è stato modificato rispetto alla versione indicata\". Dall'altra parte possono rispondere con\n\n- `304 Not Modified` - nessun payload in risposta;\n- `200 OK` - \"`è stato modificato, eccoti la versione più recente`\";\n- Eventuali codici di errore se il server non ha il dato.\n\nQuesto semplifica di parecchio lo schema di prima, sfrutta la cache del client e riduce ulteriormente i tempi di attesa, dal momento che il caso peggiore è il *cache miss*:\n\n- Il client manda un GET condizionale di un elemento che evidentemente ha in cache;\n- **cache miss** - \"`E che ne so? Chiedo al server usando un GET condizionale!`\";\n- **cache hit** - Se è aggiornato è finita, se non lo è ricadiamo nel cache miss. Uso il TTL per aggiornare periodicamente il contenuto della cache.","x":-13980,"y":6511,"width":837,"height":1148,"color":"#006400"},
		{"id":"acb4f16f12e3f2e9","type":"text","text":"# ... ma perché stateless?!\n\nSe TCP supporta lo storico, perché HTTP sceglie di non implementarlo?\n\n- Da qualche parte devo salvare (grandi quantità di) dati $\\Rightarrow$ mi serve altro spazio di archiviazione;\n- Client e Server devono in ogni momento concordare sullo storico, il che richiede sincronizzazione e causa problemi se un terminale crasha;\n- In generale, i protocolli non-stateless sono più complessi.","x":-13980,"y":7956,"width":837,"height":254,"color":"4"},
		{"id":"52edf2e6ee84f9b0","type":"text","text":"# P2P (cenni)\n\nvedi slides\n\nserve un sistema per coordinare il gruppo di peer. si può anche decentralizzare (database distribuito).\nI vicini sono scelti secondo criterio di download più veloce. potrei anche fare solo download (greedy), servono incentivi a condividere.\n\ndevo iniziare chiedendo lista dei blocchi e scaricando i pezzi di di file più rari. \"optimistic unchoke\" anche se non sei nella top 4 ti includo (altrimenti si scambiano dati solo i primi 4) (tutti questi numeri sono parametri modificabili)\n\ntesto randomicamente velocità dei vicini per vedere se è top, in caso ci accoppiamo e inizia il torrent\n\nnel protocollo non è richiesto che qualcuno abbia il file intero, così come potrei mettere a disposizione il file e poi scollegarmi a metà\n\nil protocollo aumenta la velocità di download secondo la disponibilità di upload\n\nskype era p2p, poi l'ha preso microsoft e hanno centralizzato e non ha funzionato bene fino al dimensionamento dei server.\n\nci sono modi per fare l'Internet decentralizzato, ogni oggetto è rappresentato in modo univoco tramite un oggetto hash e poi \"boh qualcuno ce lo avrà\"","x":-11691,"y":3360,"width":720,"height":1431},
		{"id":"aa76e477e11e779d","type":"text","text":"# SMTP, IMAP (posta elettronica)\n\n\nforse cronolgicamente prima di HTTP. slides. in teoria posso farlo p2p ma in quel caso devo essere acceso. allora uso il server (al tempo potevano anche essere spenti a tratti). quello di uscita poteva tenere le cose se il secondo non rispondeva. smtp è un protocollo di tipo push, serve a scrivere i messaggi. per il pull (leggere i messaggi) serve pop3 o imap. smtp è anche usato end-to-end tra server di posta (p2p), ma in mezzo ci sono i router e TCP. Posso creare io stesso un server di posta con smtp. porta 25 vedi slides per protocollo.\n\nConnessione tcp persistente fino al quit. server ha timeout lungo. 7bit (8 con primo bit 0). dopo fine messaggio (CRLF, ovvero semanticamente cr+lf) ne aspetta un altro a meno che non scrivo quit.\n\nintestazione stessa della mail (to, from, subject) ma non è SMTP. prima c'è handshaking con comandi helo, ...\n\nQuesto è solo ascii 8bit. per altri formati c'è un altro protocollo (MIME). Immagine convertita in ascii e poi riconvertita a destinazione.\nDi nuovo, i protocolli interni sono lenti a cambiare. piuttosto che modificare SMTP creo un altro protocollo a livello più alto.\n\nCome accedo alla posta? POP3 o IMAP, o addirittura HTTP se lo faccio da browser. non specifico quante connessioni apro.\n- POP3 porta 110 (slides), quando il client scarica i messaggi il server li cancella (posso non farlo togliendo comando dele). basta definire regole per comunicare. problemi: pensato per un solo client. se ne ho tanti devo sincronizzare tutto, ma è difficile senza stato. allora uso\n- IMAP, che tiene traccia dello stato (e.g. ci sono le cartelle tipo spam, i tag, ...), se faccio modifiche in locale viene aggiornata anche sugli altri client.\n- HTTP, l'agente è un browser\n\ninizialmente associavo mail ad ogni utente linux, ora no (?) (se uso postfix?) \"sono vago perché serve poco\".\n\nse uso thunderbird (IMAP) per mettere gmail (HTTP) posso trovare differenze in cose tipo la divisione in cartelle, i tag, ...\n\n\n\" a livello applicativo è abbastanza lasciato libero\"","x":-11691,"y":4937,"width":720,"height":596},
		{"id":"0efd970a1119442f","type":"text","text":"# FTP (Porte 20 e 21)\n\nParadigma ***client-server*** di tipo ***stateful*** basato su ***due connessioni TCP*** parallele:\n\n- **Connessione di Controllo (Porta 21)** - Resta sempre aperta (***persistente***), e viene usata per handshaking, autenticazione e scambio dei parametri della Connessione Dati (e.g. username e password, inizio e fine trasferimento dati, ...);\n- **Connessione Dati (Porta 20)** - Viene aperta dalla Connessione di Controllo ogniqualvolta sia necessario trasferire un file, e viene richiusa a trasmissione terminata (***non-persistente***).\n\nI parametri di controllo hanno una connessione dedicata e restano quindi separati dai dati. Questo schema è detto ***out-of-band***, e presenta diversi vantaggi:\n\n- per come è strutturato TCP è ottimale (poche connessioni, grandi quantità di dati);\n- posso abortire il download in caso di sovraccarico della rete;\n\t- protocolli in cui l'`abort` viene mandato nello stesso canale dei dati (**in-band**) come HTTP il segnale si perde nel traffico della rete.\n\nLato server, questo mantiene lo stato della connessione (directory di lavoro, autenticazione, ...) senza bisogno di cookies.\n\nRETR (retrieve)\n\nper il resto è simile a smtp, http.\n\n\nSFTP, FTPS","x":-11691,"y":6747,"width":720,"height":660,"color":"3"},
		{"id":"6bf7cded55aa9efd","type":"file","file":"Protocolli Applicazione/FTP.png","x":-12148,"y":7157,"width":400,"height":250},
		{"id":"bedf94234f8fbd9d","type":"text","text":"nel browser posso usare ftp (scrivendo `ftp:` al posto di `http:`).???????????????","x":-10925,"y":7236,"width":250,"height":171},
		{"id":"84d5d9e7cf116171","type":"text","text":"network time protocol\n","x":-10675,"y":6817,"width":250,"height":60},
		{"id":"2c357555847a692e","type":"text","text":"# DNS Overview\n\nI siti web sono hostati su server aventi un certo indirizzo IP. Questi però sono **difficili da ricordare** (e.g. 174.252.76.196) e **possono variare** (e.g. il sito può essere spostato su un altro server).\n\nInfatti nessuno usa gli indirizzi IP. Apro il browser e nel campo URL scrivo `google.com`. Come fa la rete a conoscere la locazione del server che hosta il sito che cerco?\n\nCon un servizio di ***traduzione dei nomi*** (semplici e fissi, utilizzabili dagli umani) ***in indirizzi IP*** (complessi e variabili, utilizzati dalla rete per indirizzare i datagrammi), detto ***Domain Name System (DNS)***. In pratica è una ***tabella di corrispondenze***, inizialmente ([RFC 882](https://www.rfc-editor.org/rfc/rfc882), 1983) contenuta in un singolo file (con allegato un povero cristo che la aggiornava).\n\nIn generale, il server DNS è quello che \"sa a chi devi chiedere\", e se non è direttamente il server che hosta il sito che cerchi sarà un altro server DNS che probabilmente ha le informazioni di tuo interesse.\n\nOggi ([RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) ed [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), 1987) è un DB hostato su più server (***distribuito***) avente struttura ad albero (***gerarchico***). Con DNS si può intendere sia il DB che il protocollo applicazione che fa da DMBS.\n\n","x":-13980,"y":5897,"width":837,"height":532,"color":"4"},
		{"id":"6efc85167597eec6","type":"text","text":"# DNS (Porta 53)\n\nServizio (***client-server***) di ***traduzione dei nomi in indirizzi IP*** implementato tramite ***DB delocalizzato*** che sfrutta principalmente ***UDP***.","x":-13835,"y":5648,"width":548,"height":160,"color":"6"},
		{"id":"0d69bbc0efaf38ce","type":"text","text":"# Gerarchia DNS\n\nConsideriamo l'URL `www.uniroma1.it.`. Sì, in teoria ci sarebbe un punto alla fine. Perché? In generale, ***il punto divide i livelli gerarchici***. Leggiamo questo indirizzo da destra verso sinistra.\n\n- ***Root nameserver*** - Il punto finale si riferisce alla ***radice dell'albero*** gerarchico del DB distribuito, il *punto* (no pun intended) da cui devo partire per trovare il server che mi interessa. Ma non ho ancora fatto alcuna richiesta DNS, come faccio a sapere il suo IP?\n\t- Anzitutto, il root nameserver non è uno solo. Ci sono ***13 indirizzi IP standard*** (10 in USA, 2 in Europa, 1 in Giappone), che vengono inclusi nelle distribuzioni dei SO. Possono variare, ma succede poco spesso. Ovviamente se variano sta a me distributore di SO starci attento;\n\t- Quindi a questi 13 IP standard trovo 13 copie del root nameserver? No! ***Ad ognuno di questi 13 indirizzi è associato un gran numero di copie del root nameserver*** (stavolta sono davvero server fisici), a ognuno dei quali corrisponde un IP. In pratica, i 13 IP standard fanno da \"switch\", e **reindirizzano la richiesta a una di queste copie fisiche** del root nameserver;\n\t\t- Il numero esatto di copie fisiche associato a ciascun IP standard è molto variabile, orientativamente si va **da poche decine a diverse centinaia**;\n\t- ... e ***non sono gli unici***, sono solo quelli standard! Copie del contenuto dei root nameserver standard lo si trova in vari server sparsi per il mondo, per ridurre la latenza e il carico sul singolo server.\n- ***Top Level Domain (TLD)*** -  Subito sotto al root troviamo il primo macro-raggruppamento (e.g. `.it.`, `.com.`, ...). In pratica ci sono (gruppi di) server che gestiscono principalmente (... lo vediamo dopo) `.it`, altri che gestiscono principalmente `.com`, e così via. Il root nameserver ha quindi il compito di indirizzare la richiesta al giusto TLD, il quale a sua volta reindirizza la richiesta al giusto server Autoritativo, oppure al giusto SLD;\n- ***Second-Level Domain (SLD)*** - I livelli di dominio sono la profondità dell'albero DNS. Una foglia può trovarsi a profondità 2, ma anche a profondità 3. In quest'ultimo caso troviamo anche gli SLD. E potenzialmente oltre, ma non è interessante a livello concettuale. In `it.wikipedia.org.` dopo il root `.` e il TLD `.org.` `wikipedia.org.` è un SLD, ma manca ancora da risolvere il sottodominio `it.wikipedia.org.`. E chi lo risolve? L'Autoritativo!\n- ***Autoritativi*** - Server che hanno l'autorità di rispondere per un dato dominio, restituendone l'IP corretto. Sono in pratica le foglie dell'albero DNS.","x":-13980,"y":4737,"width":837,"height":842,"color":"4"},
		{"id":"2c547fef2c5dcf45","type":"text","text":"# Chi gestisce cosa?\n\n\nC'è tutta una questione di sicurezza, se si rompe il DNS si rompe tutto.\n\nICANN sono \"gentlemen agreement\" tra le varie nazioni. chi gestisce il TLD può fare quello che vuole (e.g. lo stato italiano può nazionalizzare il .it). Posso creare amazon.it e venderlo ad amazon.com? ... sì ma ci stanno le leggi sul copyright.\n\nogni organizzazione privata che mette a disposizione un server deve mettere a disposizione anche un dns server. in genere ce ne sono sempre due per protocollo (perché? boh!)\n","x":-13020,"y":4737,"width":460,"height":842},
		{"id":"ff62151f49666864","type":"text","text":"# Quanto conviene un proxy?\n\nDipende principalmente dal ***cache hit rate*** e ovviamente da quali sono i problemi da risolvere. In generale, è ottimo per la congestione di rete: sappiamo che se il traffico cresce troppo il ritardo medio in coda esplode, sgravare il server è sempre una buona idea.\n\nE perché non metto semplicemente dei cavi più grossi?\n\n- il proxy è *mediamente* più economico;\n- il proxy ha prestazioni *mediamente* migliori.\n\nMa *mediamente* è una roba teorica che in pratica significa \"sempre\"? No, **bisogna fare i conti**. Magari scopri che il cavo più grosso serve davvero. E comunque fare i conti non basta, perché sono una roba teorica e l'unico dato attendibile è la misura delle prestazioni. Il proxy è un'ottima soluzione ma non è la panacea di tutti i mali.\n\nSicuramente è indicativo che ISP come Netflix scelgano di hostare i film italiani su un proxy in Italia (\"magari non in Antartide\"). O magari su più proxy in Italia.\n\nUn buon proxy cerca di imparare cosa chiede la platea nella zona che deve servire.\n\n","x":-14838,"y":6882,"width":700,"height":560,"color":"4"},
		{"id":"0b031d2a05976038","type":"file","file":"Protocolli Applicazione/HTTP/proxy.png","x":-15490,"y":6935,"width":359,"height":454},
		{"id":"2a51de9d069e3b02","type":"file","file":"Protocolli Applicazione/DNS/GerarchiaDNS.png","x":-13980,"y":4497,"width":837,"height":191},
		{"id":"d9218fbe64e55603","type":"text","text":"# La mia prima query DNS\n\nIpotizziamo di cercare un sito appena creato (e.g. `gaia.cs.umass.edu.`), di cui nessuno sa niente se non l'Autoritativo corrispondente. Ho due modi di effettuare la ricerca.\n\n- ***Query Iterativa*** - Vado da `root`, il quale risponde \"ti dico dove sta `.edu`\". Vado da `.edu` (TLD), il quale risponde con l'indirizzo di `umass.edu`. Sicuramente è un SLD, se mi va bene è anche autoritativo. Dipende da cosa mi risponde. Nel peggiore dei casi mi risponde con l'IP di `cs.umass.edu`, il quale a questo punto dovrebbe essere Autoritativo, e in quanto tale avere gli indirizzi di tutti i sottodomini di tipo `*.cs.umass.edu.`;\n\t- Il **peso della ricerca** sta tutto **sul client**, o sul suo DNS locale;\n- ***Query Ricorsiva*** - Vado da `root`, chiedendogli con un'apposita flag di \"vedersela lui\" e darmi la risposta definitiva quando ha risolto. Lui prende in carico la mia richiesta e contatta il TLD, dicendogli la stessa cosa. In generale, ogni server contattato deve fare da sé, risolvendo personalmente la richiesta per conto di chi la fa.\n\t- Il **peso della ricerca** va **sulla rete**;\n\t- Sovraccarica `root`, motivo per cui non si dovrebbe fare;\n\t- Anche provandoci, ***probabilmente root risponderà iterativo***. Il protocollo **DNS non obbliga i nameserver a rispondere con la ricorsione**;\n\t- Se volevo la ricorsione e `root` mi risponde solo `.edu` allora la ricerca fallisce? No, semplicemente mi metto l'anima in pace e contatto `.edu`.","x":-14838,"y":3937,"width":700,"height":751,"color":"4"},
		{"id":"0bcac05d389026f2","type":"text","text":"# Query DNS","x":-14596,"y":5128,"width":216,"height":60,"color":"6"},
		{"id":"c2f115d30b383cd0","type":"text","text":"# Altri usi dei Proxy Server?\n\n- sicurezza\n- load balancing","x":-15661,"y":7418,"width":700,"height":320},
		{"id":"c242d9b28161dee6","type":"text","text":"localhost -> IP loopback solitamente `127.0.0.1`","x":-15911,"y":7003,"width":250,"height":171},
		{"id":"5b4a906a7f7134ec","type":"text","text":"\n***header***: insieme di campi che danno informazioni al destinatario. non fa parte dell'incapsulamento (leggo-distruggo-replace), ***payload*** del (parte del messaggio visto dal) livello sottostante, non cambia (resta leggibile","x":-18080,"y":6722,"width":250,"height":367},
		{"id":"29e96eab29abd54f","type":"text","text":"# Glossario dei Protocolli di alto livello\n\n- **_Handshaking_** - La danza rituale per aprire una connessione TCP. Tipicamente il client manda al server una richiesta di connessione, il quale tipicamente risponde con un OK. Il canale di comunicazione è nato, evviva! Tutto questo impiega almeno un RTT; \n- ***Round Trip Time (RTT)*** - tempo impiegato da un pacchetto di \"piccole dimensioni\" (idealmente un solo bit, in modo tale che $D_t \\sim 0$) per compiere il percorso client-server-client;\n- ***Request For Comments (RFC)*** - quando i primi sviluppatori ideavano un protocollo in ambito accademico, lo condividevano in cerca di feedback. Questa etichetta nel tempo è diventata il nome dei documenti definitivi che standardizzano i protocolli;\n- ***Stateless*** - protocollo che non conserva informazioni sulle interazioni passate;\n- ***Uniform Resource Identifier (URI)*** - convenzione standard per identificare univocamente le risorse su Internet. Può essere di diversi tipi:\n\t- ***Uniform Resource Locator (URL)*** - Specifica sia l'indirizzo della risorsa sia le istruzioni per accedervi. Consta di tre parti:\n\t\t- Il protocollo da utilizzare per stabilire una comunicazione con l'host della risorsa (HTTP, FTP, SSH, SMTP, ...);\n\t\t- Il nome dell'host, eventualmente da risolvere tramite ricerca DNS per trovare l'IP corrispondente;\n\t\t- Il percorso della risorsa all'interno dell'host.\n\t- ***Uniform Resource Name (URN)*** - Associa ad una risorsa un identificatore persistente e univoco, indipendentemente dalla sua posizione o raggiungibilità tramite URL, esattamente come un libro è identificato univocamente dal suo codice *ISBN (International Standard Book Number)* $\\Rightarrow$ `urn:isbn:0451450525313`. Va registrato presso l'altisonante *Internet Engineering Task Force (IETF)*, e immagino uno debba avere un buon motivo per farlo (?)\n\t- Se so per certo di essere, ad esempio, all'interno di un server, anche un **_path relativo_** è considerabile un URI. In questo senso, un URL è un path assoluto;\n\t- Contesti più specifici possono definire dei propri URI (e.g. il **_File URI_** viene usato dai browser per accedere ai file locali dell'utente);","x":-19000,"y":6117,"width":758,"height":837,"color":"4"},
		{"id":"807b9ea551e9eb4a","type":"text","text":"# DNS Locale\n\nIl client non si interfaccia direttamente con l'albero DNS, ma piuttosto usa un ***server DNS locale***.\n\nIn pratica, non serve partire ogni volta da `root`: il DNS locale potrebbe avere ciò che cerco in cache. Se così non è, si occupa di risolvere la ricerca al posto del client.\n\nPartendo da `root`? No, partendo dal basso! Non voglio sovraccaricarlo, quindi chiedo prima a SLD. Se non ne sa niente (ovvero, non ha quel valore in cache e non gestisce quei domini) risponde una roba tipo \"`boh!`\", e il DNS locale capisce che deve salire di livello, dal TLD. Se anche questo non sa niente ovviamente arrivo da `root`, dal quale sicuramente qualcosa trovo.\n\nBene, ma chi è il DNS locale?\n\n- La situazione più comune è che lo fornisca l'ISP tramite il primo accesso alla rete (hop). Nel caso domestico, il router (e.g. Fastweb `192.168.1.254`) reindirizza le richieste effettuate nella LAN al server DNS proprietario dell'ISP (e.g. Fastweb `85.18.200.200`);\n- In alternativa, posso impostarlo manualmente come parametro della connessione, specificando ad esempio `8.8.8.8` (nameserver offerto da Google);\n- Posso implementare un server DNS direttamente su `localhost`, ovvero il mio stesso computer (raggiungibile attraverso l'indirizzo IP loopback `127.0.0.1`)\n\nIl DNS locale ***non fa parte dell'albero gerarchico DNS***, piuttosto ***è un servizio*** per interagire con esso. Uno potrebbe allora chiedersi cosa ci guadagna ad avere un DNS locale.\n\n- Tu che lo usi hai una cache vicinissima, e ti fa comodo perché diminuisce la latenza. Inoltre, in sua assenza dovresti fare \"a mano\" con `localhost`, e scopriresti ti toccherebbe scrivere e runnare un sacco di roba;\n- La rete è contenta perché così decentralizza il DB DNS, sgravando i server \"standard\";\n- L'ISP che te lo offre apprende cosa cerchi, che nel dubbio male non le fa.\n","x":-16589,"y":3937,"width":806,"height":751,"color":"4"},
		{"id":"2cf0e73ceaebad33","type":"text","text":"# Cache DNS\n\nNel mondo reale i server hanno una ***cache***. Questo significa che già il root nameserver potrebbe rispondere subito con l'IP che mi interessa.\n\nLa garanzia che la risposta che mi arriva sia corretta me la dà solo l'Autoritativo associato a quell'IP. Un qualsiasi altro server che risponde al suo posto (e.g. `.com` mi restituisce l'IP di `uniroma.it`) è tenuto a specificare che non è l'Autoritativo per quell'IP (della serie, mette le mani avanti e ti dice che non è responsabile).\n\nQueste cache si aggiornano principalmente mediante ***TTL***, motivo per cui un server non-autoritativo può restituire una risposta obsoleta (anche ***DNS è best-effort***).\n\nLa durata dei TTL varia tipicamente tra i pochi minuti e i giorni/settimane, dipende molto dalle esigenze. Se ho fretta, esistono operazioni di *purge* (offerte dalla singola applicazione server e non incluse nel protocollo DNS) che permettono di svuotare manualmente le cache. Se mando un comando del genere lato client, i tempi tipici di propagazione di questa informazione sulla rete sono dell'ordine dei 5/10 minuti. Altrimenti, posso sempre settare un TTL molto breve (e.g. pochi secondi). In teoria potrebbe creare problemi all'intera rete, ma in genere regge bene.\n\nQuesto ovviamente senza contare che la cache potrebbe riempirsi, e gli oggetti al suo interno venire scartati prima della scadenza del TTL. Oppure potrebbe essere il server stesso ad avere come politica un timeout per gli oggetti in cache.\n\nAlla perdita di un dato cache, il DNS potrebbe richiederlo subito al livello superiore oppure attendere che venga richiesto lato client, dipende dall'implementazione.\n","x":-15659,"y":4825,"width":700,"height":667,"color":"#006400"},
		{"id":"84caca764ec7fb4e","type":"text","text":"# Server DNS","x":-15422,"y":5698,"width":223,"height":60,"color":"6"},
		{"id":"b99dcc266569a95d","type":"file","file":"Protocolli Applicazione/DNS/DNSRicorsivo.png","x":-15546,"y":4399,"width":475,"height":289},
		{"id":"4694cc6e9478ff73","type":"file","file":"Protocolli Applicazione/DNS/DNSIterativo.png","x":-15546,"y":3937,"width":475,"height":304},
		{"id":"d9194ed55437e184","type":"text","text":"# Registrar DNS\n\nSe voglio includere il mio sito (e.g. `cacciacapitale.it`) hostato sul mio personalissimo server nelle ricerche DNS devo fornire al ***registrar DNS*** gli indirizzi di due DNS Autoritativi per il mio dominio, detti **glue**, il quale li inserisce nel server TLD corrispondente (e.g. `.it`). Se il server non-autoritativo risponde con un oggetto in cache deve fornire anche i glue.\n\nIn alternativa posso pagare qualcuno che lo fa al posto mio. Spesso si fa per il mail server `MX` con un `CNAME` che punta a Cloudfare\n\n???????","x":-13980,"y":3937,"width":837,"height":391,"color":"3"},
		{"id":"a290001f0c2b618c","type":"text","text":"# PROVA NSLOOKUP!","x":-13771,"y":4357,"width":419,"height":90},
		{"id":"12862795d7c14b6d","type":"text","text":"# Restrizioni (aggiorna slides domani?)","x":-16965,"y":4737,"width":315,"height":209},
		{"id":"f10a4ae200557701","type":"text","text":"se voglio mat.uniroma1, phys.uniroma1, ... devo fornire diversi CNAME. se però faccio così mappo tutto su un unico server. utile perché se cambia cambio solo il canonico. ","x":-16600,"y":4857,"width":414,"height":257},
		{"id":"937953a052fa5efa","type":"file","file":"Screenshot from 2024-04-08 21-29-11.png","x":-17400,"y":4916,"width":400,"height":243},
		{"id":"bbe47f0bdff82cd9","type":"text","text":"# Vedi ultime slides 08 NEW","x":-18080,"y":5397,"width":461,"height":163,"color":"1"},
		{"id":"a0476a2b8399dc67","type":"text","text":"# Cosa posso fare con DNS?\n\n- Aliasing -  hostname canonico è il \"vero\" nome, sotto al quale c'è l'ip, ma poi a questo collego gli alias. in questo modo se cambio ip lo cambio solo al nome canonico. Se cambio IP in teoria dovrei avvisare tutti i DB e cambiarlo, ma non succede. Ogni associazione ha un TTL che alla scadenza chiede al proprietario del dominio dove sta.\n- LOAD BALANCING: il sito viene sdoppiato su più server. Nel DNS li associo tutti e a chi lo chiede dò una lista random. qualunque metodo scelgo io richiedente resta random, a meno che non conosco il loro seed di randomizzazione.\n","x":-14838,"y":5897,"width":700,"height":405},
		{"id":"29e1d3a847d6212b","type":"file","file":"Protocolli Applicazione/DNS/RichiestaRispostaDNS.png","x":-14838,"y":6400,"width":699,"height":338},
		{"id":"06b8d6a48ee1e326","type":"text","text":"# Vincoli\n§ CNAME non può coesistere con altri record di altro tipo per lo stesso\ndominio: non posso avere un record A e un record CNAME per lo\nstesso (sub)dominio nella stessa tabella\n§ CNAME non può essere usato nei domini di root. Quindi il DNS\nserver di example.com NON può contenere:\nexample.com.\nCNAME\nalias.example.net.\n§ Se si tengono in cache valori di un server non di competenza,\nbisogna anche fornire il NS autoritativo quando rispondiamo a una\nquery\n§ Raccomandati\n• MX dovrebbe essere usato su un nome canonico e non un CNAME\n• quando si fornisce il NS di un server autoritativo, bisogna anche fornire il\nrecord A (glue) per evitare riferimenti circolari","x":-18940,"y":5237,"width":677,"height":530},
		{"id":"3c95ceb1f8d66d4b","type":"text","text":"# rappresentazione domini \n\nho due modi di rappresentare i domini\n- assoluti (rispetto alla root), in teoria terminano con un punto (e.g. google.com.)\n- relativi (alla locazione in cui sono), se sono connesso a di.uniroma1.it va a cercare in di.","x":-17161,"y":5198,"width":393,"height":354},
		{"id":"dadc08ce77ef0c49","type":"text","text":"dns potrebbe essere usato come controllo blocchi (dare not found per certi ip), però se chiedo a root bypassando il locale lo frego","x":-16932,"y":6077,"width":329,"height":144},
		{"id":"60429356d103493a","type":"text","text":"# DNS e Sicurezza\n\nIn genere a tutti conviene che DNS funzioni, motivo per cui gli attacchi (DDoS) diretti ai nameserver sono limitati. Anche provandoci, i `root` sono protetti dal filtraggio del traffico (gli altri server hanno la cache). Sui TLD è potenzialmente più pericoloso (?)\n\nQuello che si può invece fare è sfruttare DNS per azioni illecite. Come?\n\n- ***man-in-the-middle*** - intercetto le query DNS (e che ci faccio????);\n- ***poisoning*** - mando risposte sbagliate ai server DNS, che le mettono in cache. Questo potenzialmente mi permette di reindirizzare delle richieste safe sul mio sito malevolo;\n- ***DDoS***- posso inviare query DNS falsificando l'IP di origine (***spoofing***), indirizzando le risposte DNS a chi voglio io (***reflection***). Con una singola richiesta non risolvo niente, ma esiste l'opzione `ANY`, che fa rispondere il nameserver con tutti i record relativi al dominio richiesto (e.g. chiedo `example.com` e mi arrivano tutti i `.com` che ha????). Questi due ingredienti insieme mi permettono in linea di principio di cucinare un DDoS, ma\n\t- se un IP `100.x.x.x` manda una richiesta specificando come mittente `200.x.x.x`, la rete locale dovrebbe essere in grado di riconoscerlo (Chi??? Come???);\n\t- il nameserver può essere impostato per non rispondere a richieste di tipo `ANY`.","x":-16592,"y":5773,"width":806,"height":530,"color":"#4545ff"},
		{"id":"ad79665cff57c7f0","type":"text","text":"# UDP\n\ndns gira su udp perché evita il traffico e i vari handshaking di tcp.\n\nper dns non ha senso il concetto di connessione, perché è stateless.","x":-16036,"y":6378,"width":250,"height":383},
		{"id":"f4a58217f873b504","type":"text","text":"# Protocollo DNS\n\nQuery e risposte DNS hanno lo stesso formato.\n\n","x":-15659,"y":5897,"width":700,"height":532},
		{"id":"010165be9fd56b6c","type":"text","text":"# Livello di Rete\n\nLayer d'incontro tra SW (***control plane***) e HW (***data plane***).","x":-756,"y":7556,"width":316,"height":121,"color":"6"},
		{"id":"5c698a4734fe88d7","type":"text","text":"# Panoramica\n\nQualunque oggetto in grado di comunicare su internet scambiando traffico dati è detto ***Host***.\n\nTipicamente, quando si avvia una comunicazione tra host, questi si distinguono in ***client***, che avvia la richiesta di comunicazione, e ***server***, che risponde a tale richiesta.\n\nUn server è un host su cui gira un processo server in grado di rispondere alle richieste esterne.\n\nUn ***hub*** è un ripetitore con più porte. Quando un segnale entra da una di esse, viene ripetuto in uscita su tutte le altre. Se ci sono host a cui questo segnale non interessa posso mettere un ***bridge***, ovvero un filtro. Il bridge impara quali host sono alla sua sinistra e alla sua destra, e se la comunicazione avviene solo da un lato impedisce al segnale di propagarsi nell'altra sottorete.\n\nSe unisco questi due concetti ottengo uno ***switch***, il quale associa ogni host connesso a una porta e reindirizza il messaggio solo al destinatario, senza fare broadcast su tutta la rete.\n\nFare **switching** significa reindirizzare dati all'interno di una rete, lo switch è un oggetto il cui scopo *principale* è lo switching.\n\nGli switch sono in genere il nodo radice di una sottorete contenente host con necessità simili (e.g. una LAN domestica). Diverse LAN con uno switch come nodo radice comunicano tra loro tramite un ***router***. Ogni LAN ha un diverso indirizzo IP per il router, detto di ***gateway*** (ovvero, l'indirizzo a cui devo chiedere se voglio comunicare al di fuori della LAN). Mentre nella LAN con lo switch non ci sono implementazioni di sicurezza, il router può implementare un ***firewall***.\n\nFare **routing** significa reindirizzare dati tra reti diverse, il router è un oggetto il cui scopo *principale* è il routing.\n\nTutti gli altri dispositivi di rete (Access Points, Firewall, Load Balancers, Proxies, ...) in qualche modo implementano anche routing e/o switching.","x":-7620,"y":676,"width":700,"height":1164},
		{"id":"6a2f9951f496a69f","type":"text","text":"Ad esempio, un **_modem_** trasforma la codifica dei dati per l'invio dell'informazione (**trasmissione**, da digitale ad analogico) e viceversa (**ricezione**);","x":-3293,"y":3860,"width":250,"height":408},
		{"id":"3881465ee755981e","type":"text","text":"# Stack Protocollare TCP/IP\n\nLo standard *de facto* di Internet. **_TCP/IP_** prevede **_5 livelli_**, che descriverò in approccio _down-top_ (si dice? chissà), partendo quindi dalla realtà fisica per arrivare alla virtualizzazione di più alto livello.\n\n- **_Livello Fisico (Physical Layer)_** - Qualunque oggetto che abbia come risultato quello di trasferire fisicamente dei bit da un punto A ad un punto B è una *layer-1 technology* (e.g. cavi, frequenze, ripetitori). \n- **_Livello di Collegamento (Data Link Layer)_** - Tutto ciò che, interagendo con il livello fisico, mette i bit nel cavo o li preleva da esso (e.g. Network Interface Cards, Wi-Fi Access Cards, Switches). Ogni oggetto che implementa il *layer-2* ha un codice identificativo unico a 48bit (spesso rappresentato come 12 cifre esadecimali) detto ***MAC Address***. L'obiettivo del Data Link Layer è quello di spostare i dati \"**hop-to-hop**\" (l'obiettivo dell'header di collegamento è quello di spostare i dati da un dispositivo fisico identificato da un certo MAC ad un altro \"adiacente\");\n- **_Livello di Rete (Network Layer)_** - Si occupa della comunicazione **end-to-end**, identificando mittente e destinatario con un indirizzo ***IP***. Ogni router intermedio legge l'IP del destinatario e reindirizza il pacchetto al prossimo *hop* tramite il MAC Address, usando le funzioni del layer precedente. Lo scopo dell'header di Rete è quello di spostare i dati da un dispositivo fisico identificato da un certo IP ad un altro arbitrariamente lontano).\n\t- ***Address Resolution Protocol (ARP)*** - Intuitivamente, l'IP è un indirizzo logico, mentre per farmi arrivare i pacchetti serve il MAC. Se conosco un IP posso provare a scoprire il MAC sottostante tramite richiesta ARP.\n- **_Livello di Trasporto_** - Primo layer interamente SW. Si assicura che i giusti messaggi siano consegnati alle giuste applicazioni. In pratica, contiene il protocollo usato (e.g. TCP, UDP, ...) e le ***porte*** di invio e destinazione.\n- **(SSL/TLS)** - non incluso nel modello TCP/IP, ma di fatto è il layer di Presentazione del modello ISO/OSI. Si occupa esplicitamente della sicurezza.\n- **_Livello di Applicazione_** - è la vista di più alto livello (e.g. HTTP, FTP, DNS).\n\nOra però passiamo all'approccio *top-down* per seguire l'evoluzione di un messaggio.\n\n- ciò che comanda l'utente è trasformato dall'Applicazione in un **_messaggio_**, costituito da\n\t- ***header*** - qui si inseriscono istruzioni comprensibili al trasporto (e.g. \"devi raggiungere `www.example.com`, e questo è il il quarto di sei messaggi\") e all'Applicazione di chi lo riceverà, che deve parlare la stessa lingua (ovvero usare lo stesso protocollo) per poter decodificare correttamente;\n\t- ***corpo*** - i dati veri e propri, anche detti ***payload*** (un po' come se il vero messaggio ai fini della comunicazione sia una zavorra, uno sforzo).\n- L'Applicazione invoca le API del Trasporto, che riceve il messaggio e gli aggiunge le proprie informazioni (**header di trasporto**), portando a termine il secondo **_incapsulamento_** e rendendo il messaggio un **_segmento_** (o **_datagramma utente_**). Notare che il payload del segmento è il messaggio. Come per l'Applicazione, l'header del Trasporto è comprensibile per il trasporto stesso e per la Rete, che saprà cosa farci;\n- Il Trasporto passa il segmento alla Rete, che aggiunge il proprio header e crea un **_datagramma_** contenente IP di mittente e destinatario;\n- Si passa quindi al Collegamento, che aggiungendo il proprio header rende il pacchetto un **_frame_**, che viene poi modulato nel mezzo Fisico.\n\nA questo punto il pacchetto ha completamente disceso la stack. Può avvenire il trasferimento fisico attraverso la rete e un altro dispositivo può applicare le trasformazioni inverse per risalire prima al datagramma, poi al segmento e infine al messaggio.","x":-4138,"y":4220,"width":688,"height":1431,"color":"4"},
		{"id":"1edf7a2ed1d99849","type":"text","text":"# IRC","x":-12169,"y":5676,"width":250,"height":60},
		{"id":"d0bc31a12d2847f8","type":"file","file":"Stack Protocollare/chifacosa.png","x":-5736,"y":4392,"width":700,"height":209},
		{"id":"0719791a80c12eb2","type":"text","text":"# Chi fa cosa?\n\nMittente e destinatario devono implementare tutti gli step dell'incapsulamento o decapsulamento, naturalmente mediante dispositivi diversi.\n\nUn router vede solo dal livello di Rete in giù. Una sua azione tipica è **distruggere l'header di Rete** del pacchetto in ingresso **e crearne uno nuovo** ($\\Rightarrow$ così realizza il **reindirizzamento**).\n\nNon ha bisogno di avere i protocolli software di Trasporto e Applicazione (tipicamente implementati solo a livello di SO), perché non arriva a vederli. Si limita a collegare $N$ sottoreti tramite $N$ strutture diverse sottostanti.\n\nUno switch si ferma al Collegamento. Non dovendo reindirizzare (si limita ad inoltrare i frame in ingresso), non distrugge/crea alcun header.","x":-5736,"y":4716,"width":700,"height":440,"color":"3"},
		{"id":"179ce6b66f1a29fe","type":"text","text":"# Livello di Applicazione","x":-9240,"y":5211,"width":400,"height":69,"color":"6"},
		{"id":"5c7cb3e9b597a877","type":"text","text":"# Telnet\n\ntelnet?? interfaccia con tcp a livello testuale, devo mandare a capo due volte. una volta che si apre una connessione ogni carattere fa un roundtrip, ma di default non vedo l'echo di quello che ho scritto su terminale.\nbrowser fa questo ma in automatico con le librerie TCP.\nwireshark???\n","x":-11948,"y":6095,"width":1032,"height":334},
		{"id":"19dd5229975701ca","type":"text","text":"# User-friendliness?\n\nUna pagina web è composta da oggetti, ciascuno dei quali\npuò essere archiviato su un diverso server Web\n l'oggetto può essere un file HTML, un’immagine JPEG, applet\nJava, file audio,...\n la pagina web consiste in un file HTML di base che include\ndiversi oggetti referenziati, ciascuno indirizzabile da un URL,\nad es.\nwww.someschool.edu/someDept/pic.gif\n\nclient: browser che richiede, riceve\n(utilizzando il protocollo HTTP) e\n“visualizza” oggetti Web\n• server: il server Web invia\n(utilizzando il protocollo HTTP)\noggetti in risposta alle richieste","x":-10896,"y":5053,"width":700,"height":623},
		{"id":"2df2877d35b32cbf","type":"text","text":"# RDT 3.0 (Perdite)\n\nIn caso di perdita del pacchetto, il mittente aspetta un ACK che non arriverà mai. Come risolvo questo problema?\n\nAggiungo un ***timeout*** oltre il quale se non arriva risposta considero il pacchetto perso e ***reinvio il pacchetto***.\n\nOk, e se se il pacchetto non si fosse perso? Se l'ACK semplicemente arriva oltre il timeout, nessun problema: ho solo inviato un duplicato, che il destinatario scarterà in scioltezza grazie al numero di sequenza.\n\nQuesto mi consente di semplificare il protocollo: se assumo che il pacchetto è stato perso, posso ignorare il controllo degli errori $\\Rightarrow$ tratto stesso modo pacchetti persi e corrotti (\"se arriva un ACK corrotto lo ignoro, tanto scatterà il timer\"). Ci rimetto un po' in termini di tempo, ma è anche vero che riduco l'overhead sul mittente.\n\n\n","x":-3302,"y":10585,"width":520,"height":507,"color":"4"},
		{"id":"3ab56f2cab6111ff","type":"text","text":"\nSono ancora in regime stop-and-wait, e questo è un enorme spreco per le capacità del cavo. Allora faccio **_PIPELINING_**.\n\n\n#### Oltre RDT 3.0\nMando più pacchetti prima di aver ricevuto l'ACK del primo. Il protocollo va solo aggiustato per gestire più di un messaggio alla volta","x":-3286,"y":10168,"width":520,"height":296},
		{"id":"d336bdc958fc40a1","type":"file","file":"Protocolli Trasporto/RDT/RDT3.0.png","x":-3286,"y":11133,"width":488,"height":329},
		{"id":"bc91687bf97c4515","type":"file","file":"Protocolli Trasporto/RDT/SenderWindow.png","x":-2714,"y":11173,"width":519,"height":113},
		{"id":"73ccf1e79df95ce8","type":"file","file":"Protocolli Trasporto/RDT/ReceiverWindow.png","x":-2714,"y":11313,"width":520,"height":127},
		{"id":"133c092a1da3e3ae","type":"text","text":"# RDT 3.1 (Pipelining)\n\nL'unico problema di questa cosa è che ha prestazioni infime. Come risolvo? Faccio ***pipelining***, ovvero in pratica allargo il concetto di *stop-and-wait*: invece di mandare un pacchetto alla volta ne mando $N$.\n\nE il destinatario risponde con un ACK per ognuno? Ni. Posso anche usare il concetto di ***ACK cumulativo***. $ACK_n$ significa \"ho ricevuto tutti i pacchetti fino all'$n$-esimo\". Questo mi garantisce anche che siano ricevuti in ordine: se ricevo i pacchetti 1, 3, 4 rispondo sempre con $ACK_1$.\n\nSia mittente che destinatario hanno una ***finestra di buffer*** larga $N$. Se il mittente aveva una finestra larga 4 (diciamo pacchetti 1, 2, 3, 4) e riceve $ACK_1$, sposta la finestra di 1 più avanti (pacchetti 2, 3, 4, 5).","x":-2713,"y":10585,"width":519,"height":507,"color":"4"},
		{"id":"621da05b43f27ecc","type":"text","text":"# Varie\n\nPosso manovrare ad hoc il checksum per far apparire un pacchetto autentico e fare injection","x":-3286,"y":9941,"width":520,"height":176},
		{"id":"b5e970d69276ee2b","type":"text","text":"In questo caso il significato della risposta è chiaro, ma ci sono situazioni in cui ai messaggi che ricevo possono corrispondere più stati nel resto della rete. L'obiettivo è quello di massimizzare la probabilità di comprendere cosa accade dove non si può vedere.\n\n in situazioni complicate potrei andare fuori sync perché non so cosa si aspettano gli altri.","x":-2655,"y":9912,"width":460,"height":289},
		{"id":"00cca53cff5a9684","type":"file","file":"Protocolli Trasporto/RDT/RDT2.2.png","x":-3914,"y":11133,"width":520,"height":329},
		{"id":"b10d92ba15bd083f","type":"text","text":"Se il canale inaffidabile ha problemi devo risolverli. ","x":-5094,"y":11580,"width":520,"height":70},
		{"id":"35a7e50dd8bbb651","type":"text","text":"# TCP","x":-5206,"y":12571,"width":250,"height":60},
		{"id":"cb01800e5666feb6","type":"text","text":"# controllo congestione TCP 2\n\ninvece di cercare perdite tracciamo l'aumento del ritardo. se aumentando il rate di invio invece del throughput aumenta il ritardo, prima ancora di avere perdite, sto saturando le code (delay based)\n\nECN non è ancora implementato\npacchetto arriva al router (IP), quello aggiunge un bit di coda piena, il destinatario lo legge e gira l'info al mittente (a livello tcp)\n\n","x":-4289,"y":12931,"width":467,"height":354},
		{"id":"97af67201a182e72","type":"file","file":"Protocolli Trasporto/RDT/RDT2.0.png","x":-5094,"y":11297,"width":520,"height":165},
		{"id":"f0f623558b7a1bd2","type":"text","text":"# Cartacei","x":-5338,"y":12020,"width":514,"height":328,"color":"1"},
		{"id":"dbda1bb853280987","type":"text","text":"# Principi di controllo congestione\n\nproblema attuale e difficile\n\npiù hop attraverso più cresce la probabilità di essere scartato. Ogni scarto si ripercuote sul traffico dell'intero sistema (devo ritrasmettere).\nSe saturo il throughput la probabilità di arrivo a destinazione tende a zero, e tutto il traffico è solo di ritrasmissioni inutili -> non funziona niente.\n\nquesto se ognuno \"urla\" continuamente i suoi dati incurante del resto del sistema. bisogna coordinare (storicamente, all'inizio non serviva poi si sono accorti sperimentalmente che si bloccava tutto)\n\nendtoend - niente feedback dalla rete, preferibile se temo leak di info struttura rete. se non mi arrivano ack posso dedurre che ci sia congestione.\n\nrete - più recente, i router lo sanno se sono sovraccarichi, lo dicono. non banale: se ho buffer pieno magari il pacchetto manco mi arriva, o non riesco a rispondere (figuriamoci rispondere a tutti). ","x":-5566,"y":12931,"width":441,"height":1000},
		{"id":"47339376d0be509e","type":"text","text":"# Controllo di congestione di TCP\n\nbasato sull'avere perdite e non su evitarle. \"se la gente si comporta così funziona\". \n\nAIMD algoritmo distribuito asincrono, non facile farlo meglio. così c'è fairness. dimezzare rate di invio -> dimezzare la finestra.\n\nin genere mando un pacchettone grande quanto la congestion window (cwnd). all'inizio è 1MSS, poi 2, poi 3, ... Poi perdo qualcosa e\n- dimezzo se è un fast recovery\n- riduco a 1 se è un timeout\n\nin realtà non si aumenta linearmente all'inizio, ma esponenzialmente.\n\n- anni 70 - TCP partiva al massimo (throughput = bitrate), e poi crashava tutto;\n- slow start è perché esponenziale all'inizio è basso\n\na un certo punto però devo smettere di crescere esponenziale e passare in AIMD. esiste una soglia di andamento variabile chiamata ssthresh.\n\ncome determino ssthresh? la inizializzo a un certo valore (tipo 8, parametro TCP che probabilmente dipende pure dalla versione), poi la aggiorno. Come? Dipende dalla versione. in genere è la metà della grandezza della finestra prima dell'ultimo salto catastrofico. Tahoe riparte esponenziale da 1, Reno riparte lineare dalla threshold.\n\novviamente i grafici sono campionati a ogni RTT\n\n\"è la fairness che non esiste nel nostro sistema economico\"\n\nfast recovery aumenta grandezza finestra di 1 a ogni ack duplicato (altrimenti resto bloccato): se perdo il primo pacchetto ma arrivano gli altri dovrei mandare solo il primo e aspettare l'ack, invece oltre a rimandarlo allargo la finestra\n\nvedi kurose per dettagli (e.g. se tolgo fast recovery e metto un or diventa tahoe)\n\nvedi nuove slides 14...... c'è un link\n\ni tcp \"classici\" sono tahoe reno cube","x":-5026,"y":12931,"width":617,"height":1034},
		{"id":"7b504cb84b196e7e","type":"text","text":"# Fairness\n\n","x":-4289,"y":13345,"width":467,"height":620},
		{"id":"f55770ab8bdeed44","type":"text","text":"# Go-Back-N (ACK Cumulativo)\n\nDi default, ***il destinatario non ha una finestra***. Manda un ACK cumulativo ogni volta che riceve un qualsiasi pacchetto. Questo semplifica la sua implementazione, in quanto deve solo tenere traccia di dove è arrivato, ma di contro scarta tutti i pacchetti fuori ordine. Posso ovviamente implementare una variante con buffer, ma mi perdo per strada il suo punto forte (semplicità implementativa).\n\nLato mittente, quando arriva l'ACK cumulativo scorro la finestra. Al primo pacchetto senza ACK ($\\Rightarrow$ il primo della finestra) è associato un timer, alla scadenza del quale il mittente nel dubbio reinvia tutta la finestra.\n\nPerché dovrei usare questo protocollo?\n\n- Rimandando tutta la finestra in pratica faccio un refresh, quindi evito situazioni convolute;\n- Robusto rispetto alla perdita degli ACK che manda il destinatario. Se succede, reinvia la finestra a costo di ridondanza (?)\n\nDi contro, spreca un sacco di banda e rischia di congestionare la rete.","x":-1634,"y":10168,"width":577,"height":641,"color":"3"},
		{"id":"9b35587f0d6f95ff","type":"text","text":"# Selective Repeat (ACK Individuale)\n\nIl destinatario conferma individualmente tutti i pacchetti ricevuti\ncorrettamente $\\Rightarrow$ ***niente ACK cumulativi***. Ha una finestra di buffer che avanza con il più vecchio pacchetto in ordine ricevuto (più pesante a livello implementativo rispetto a Go-Back-N).\n\nLato mittente, ogni pacchetto ha un timeout e viene reinviato singolarmente alla scadenza di esso. Per il resto, la finestra avanza esattamente come in Go-Back-N.\n\nMa le due finestre si spostano in modo asimmetrico...? Sì. Infatti se si perde un ACK rischio di perdere la sincronizzazione, portando al blocco (irreversibile??) del protocollo. \n\nMolto più leggero sul traffico di rete.\n\nse la sequenza è in base 2m,la\nfinestra può essere al più grande 2m-1","x":-1634,"y":10869,"width":577,"height":641,"color":"3"},
		{"id":"be538ff257591a0a","type":"file","file":"Protocolli Trasporto/Receiver_GoBackN.png","x":-1014,"y":10331,"width":399,"height":158},
		{"id":"21c89f14ccde6dc6","type":"file","file":"Protocolli Trasporto/SelectiveRepeat.png","x":-938,"y":11182,"width":399,"height":222},
		{"id":"bbf5ef7138640f85","type":"text","text":"# Cosa usa TCP?\n\n\nma è più pesante da implementare. TCP usa l'ack cumulativo ma anche alcuni concetti di SR.","x":-870,"y":10716,"width":332,"height":186},
		{"id":"7ef6e3a292cb6a28","type":"text","text":"Il Transmission Control Protocol (TCP) è un protocollo risiedente sul layer di\ntrasporto in grado di fornire trasporto affidabile, ossia senza perdita di alcun pac-\nchetto, e controllo del flusso e della congestione, in cambio di un’assenza di garanzie\ntemporali, di throughput e di sicurezza.\nInoltre, il protocollo TCP è orientato alla connessione, ossia richiedente una confi-\ngurazione (handshaking) tra il processo client e il processo server\nDefinizione 18: User Datagram Protocol (UDP)\nL’User Datagram Protocol (UDP) è un protocollo risiedente sul layer di traspor-\nto in grado di fornire trasporto veloce poiché non orientato alla connessione ed\nestremamente scarno, ossia sprovvisto di: trasporto affidabile, controllo del flusso e\ndella congestione e garanzie temporali, di throughput e di sicurezza","x":166,"y":10384,"width":708,"height":402},
		{"id":"aafdfc81117b9e28","type":"text","text":"# Implementazioni","x":-2101,"y":10809,"width":307,"height":60,"color":"6"},
		{"id":"991d5b508f22877f","type":"file","file":"Protocolli Trasporto/Sender_GoBackN.png","x":-1545,"y":9912,"width":400,"height":199},
		{"id":"219387a67a5b2a86","type":"file","file":"Protocolli Trasporto/RDT/RDT2.1_Mittente.png","x":-4733,"y":10201,"width":444,"height":282},
		{"id":"2f558b72d21a3998","type":"file","file":"Protocolli Trasporto/RDT/RDT2.1_Destinatario.png","x":-4238,"y":10201,"width":494,"height":282},
		{"id":"2282be8cea1536dd","type":"text","text":"# RDT 2.0 (Bit Flip)\n\nRilassiamo la condizione di canale sottostante perfetto e assumiamo che possa flippare i bit del messaggio.\n\n**Se il pacchetto è danneggiato, il mittente deve inviarlo di nuovo**. Ma come fa a saperlo? In generale, le uniche informazioni in possesso degli host sono i pacchetti che ricevono, quindi ***assumendo che il destinatario sia in grado di rilevare gli errori*** (e.g. tramite un checksum) questo deve rispondere con l'esito del suo controllo.\n\n- ***Acknowledgement*** (***ACK***) - \"Non ho rilevato errori. Vai col prossimo\";\n- ***Negative Acknowledgement*** (***NAK***) - \"Ho rilevato errori. Puoi ripetere?\".\n\nPer il mittente serve un secondo stato: dopo aver mandato il pacchetto deve aspettare l'esito, e finché non lo riceve non può inviare altri pacchetti (***stop-and-wait***, $\\Lambda$ sta per \"nessuna azione da intraprendere se non il cambio di stato).\n\nOvviamente il NAK è una di quelle cose che potrebbe farmi entrare in un loop infinito, ma non posso farci niente!","x":-5094,"y":10585,"width":520,"height":667,"color":"4"},
		{"id":"10dba3310cd9aed8","type":"text","text":"# RDT 2.1 (ACK/NAK Corrotti)\n\nTutto questo ha un problema: ACK e NAK possono a loro volta essere corrotti. Se il mittente riceve un oggetto che non capisce potrebbe reinviare il pacchetto, ma così rischia di inviare un duplicato.\n\nCome risolvo? Ma chiaramente ***etichettando i pacchetti con un numero di sequenza***! E visto che faccio *stop-and-wait* (e che quindi devo solo distinguere \"quello prima\" da \"quello dopo\") mi basta un bit. In questo modo il destinatario che riceve due volte di fila un messaggio etichettato $1$ sa di doverlo scartare in quanto duplicato (\"*'sto scemo non ha capito che questo pacchetto mi è arrivato, mo je rimando l'$ACK_0$ e vediamo se stavolta capisce\"*).\n\nAspe, mando $ACK_0$ se voglio confermare la ricezione del pacchetto $1$? Sì. Per convenzione, **il numero dell'$ACK$ indica sempre il numero di sequenza del prossimo pacchetto atteso dal destinatario.**","x":-4511,"y":10585,"width":520,"height":667,"color":"4"},
		{"id":"976d5b3f569f713f","type":"text","text":"# RDT 2.2 (Solo con gli ACK)\n\nSe l'ACK ha un numero di sequenza esplicito il NAK è superfluo: se mando il pacchetto $n$ e mi arriva in risposta un $ACK_n$ (ovvero \"tutto chiaro! mandami il pacchetto $n$!\"), questo implicitamente significa $NAK_{n}$.\n\nQuando inviando il pacchetto $n$ riceverò in risposta $ACK_{n+1}$ saprò che il destinatario ha ricevuto correttamente il pacchetto $n$.\n\nNon avere i NAK complica leggermente la FSM ma semplifica concettualmente il protocollo (e.g. ***TCP***).","x":-3914,"y":10585,"width":520,"height":365,"color":"4"},
		{"id":"35bf718e7b0b1267","type":"text","text":"# Numeri di Porta\n\nNell'header di trasporto posso usare fino a 16bit per identificare il numero di porta, motivo per cui TCP e UDP possono usare valori nel range $[0, 65535]$.\n\n- ***Porte privilegiate*** ($[0, 1023]$) - riservate ai servizi di rete standard (e.g. 80 per HTTP, 22 per SSH, ...);\n- ***Porte registrate*** ($[1024, 49151]$) - possono essere utilizzate da applicazioni registrate presso l'Internet Assigned Numbers Authority (IANA).\n\t- Skype utilizza principalmente la porta 3478 con protocollo UDP;\n\t- MySQL usa la porta 3306 per connettersi al server in remoto;\n- ***Porte non registrate*** ($[49152, 65535]$) - hanno due utilizzi principali:\n\t- ***porte dinamiche*** - quando un processo client stabilisce una connessione TCP, questa viene identificata con un socket a quattro componenti: IP sorgente, porta sorgente, IP destinazione e porta destinazione. Visto che il mio interesse principale è identificare univocamente il canale, il SO assegna alla porta sorgente una porta dinamica casuale. Questo consente di creare più connessioni distinte alla stessa porta dello stesso server;\n\t- ***porte private*** - utilizzabili da applicazioni non registrate.\n\n... tutto questo è solo una ***convenzione***. Nulla mi vieta di configurare il mio server in modo che sulla porta 22 o 3306 ci sia il protocollo che voglio io.","x":-6122,"y":9760,"width":668,"height":623,"color":"4"},
		{"id":"ca345537eca5f999","type":"file","file":"Protocolli Trasporto/FormalismoFSM.png","x":-5714,"y":10483,"width":520,"height":204},
		{"id":"587ced46e42595c9","type":"text","text":"# RDT 1.0 (Canale Perfetto)\n\nPartiamo dall'ipotesi ideale che il canale fisico sottostante sia completamente affidabile: il mittente invia il messaggio con una primitiva del protocollo RDT 1.0, e il destinatario lo riceve con un'altra primitiva.\n\nPossiamo descrivere mittente e destinatario tramite ***macchina a stati finiti*** (***FSM***, utile anche per dimostrare matematicamente proprietà e teoremi). In questo caso, per entrambi esiste solo lo stato di attesa:\n\n- per il mittente, che l'Applicazione gli consegni un messaggio da inviare;\n- per il destinatario, che la Rete gli consegni un datagramma da consegnare all'Applicazione.\n\nSegue che il protocollo è sostanzialmente diviso in due, in modo ***asimmetrico*** (invio e ricezione) $\\Rightarrow$ il canale perfetto è di per sé ***unidirezionale***: se lo voglio bidirezionale sono costretto ad implementare due.\n\n","x":-5714,"y":10765,"width":520,"height":532,"color":"4"},
		{"id":"42184aaeeadc6b30","type":"file","file":"Protocolli Trasporto/RDT/RDT1.0.png","x":-5714,"y":11381,"width":520,"height":81},
		{"id":"e2750b6b7a2c01af","type":"text","text":"# SSL/TLS\n\nSono protocolli di sicurezza che agiscono su un canale di comunicazione. \nSi occupano sia di crittare i dati (previene i leak di dati da **eavesdropping**) che di generare e verificare i ***certificati di autenticità***, ovvero delle firme digitali in grado di attestare che il server con cui si è stabilita la connessione è effettivamente chi dice di essere (previene attacchi di tipo **man-in-the-middle**). Seguono concettualmente uno schema del tipo\n\n- ***Handshaking*** - quando si crea la connessione con il server che supporta SSL/TLS succedono due cose in contemporanea:\n\t- vengono generate le chiavi pubbliche di uno schema di cifratura asimmetrica (e.g. RSA, DCC, ECC);\n\t- il server fornisce il suo certificato di autenticità al client, il quale lo inoltra a un server di un'Autorità di Certificazione (CA), in grado di validare il certificato tramite il proprio DB;\n- ***Message Authentication Code (MAC)*** - ad ogni messaggio inviato dal server viene allegato un codice generato da una funzione di hash, consentendo quindi di autenticare ogni singolo pacchetto.","x":-8594,"y":11212,"width":656,"height":520,"color":"#4545ff"},
		{"id":"a040ad793f9beeac","type":"text","text":"# Garanzie di Sicurezza\n\n\nInoltre posso aver bisogno di comunicare informazioni riservate, e avere necessità di **_sicurezza_** nei confronti di ascoltatori indesiderati. Questo può essere implementato tramite schemi di **_crittografia_**\n\n- nel layer di Applicazione, e quindi a livello di browser (nel modello OSI se ne occupava esplicitamente il layer di Presentazione);\n- nel **_TLS (Transport Layer Security)_**, e prima nel suo predecessore **SSL (Secure Sockets Layer)**. Sebbene non sia ufficialmente parte di TCP/IP, è diventato uno standard *de facto* (e.g. **HTTP + TLS = HTTPS**). Viene diffuso insieme alle API di TCP, e critta i messaggi prima di passarli a quest'ultimo. Si noti che aggiungere un layer è molto più semplice rispetto ad aggiornare esplicitamente un protocollo come TCP.\n\nA seconda di che applicazione sto usando posso avere necessità diverse.\nSe mando una mail non voglio perdite ma non ho particolari necessità di velocità o di throughput, mentre se faccio live streaming posso accettare di perdere qualche frame purché il ritardo sia minimo (e se non ho un thoughput minimo garantito... non faccio live streaming).\n","x":-8594,"y":10660,"width":656,"height":523,"color":"#4545ff"},
		{"id":"b81367aa9de6afb4","type":"text","text":"# Garanzie di Comunicazione\n\nSe invio un messaggio voglio anzitutto **_che arrivi a destinazione_** (... e no, su Internet non è scontato), dopodiché se possibile vorrei lo facesse\n\n- ***integro***, ovvero che non subisca corruzione (e.g. se faccio una chiamata non voglio pacchetti in disordine o fenomeni di *bit-flip*), che naturalmente può essere anche volontaria;\n- **_in tempi ragionevoli_** (e.g. nell'esempio della chiamata, non voglio un ritardo di minuti tra l'invio e la ricezione)\n\nSe ho tanti messaggi di grandi dimensioni (e.g. straming video) sarebbe carino avere un **_throughput minimo garantito_**.\n\nOra, chi è che si occupa di fornire tali garanzie?\n\n- Il layer di **_Trasporto_**, se si usa un servizio affidabile come TCP. Questi protocolli sono distribuiti come API e implementati a livello di SO;\n- Il layer di **_Applicazione_** stesso, rimediando ad alto livello alle non-garanzie di servizi inaffidabili come UDP (il quale non garantisce neanche che il messaggio arrivi, in caso sta all'Applicazione programmare il suo reinvio). I protocolli dell'Applicazione sono implementabili direttamente (appunto) sulle applicazioni (e.g. un browser), senza necessità di API standardizzate e distribuite su SO. Questo li rende generalmente più rapidi nello sviluppo.\n","x":-8616,"y":9760,"width":700,"height":623,"color":"4"},
		{"id":"dff88af00a536f81","type":"text","text":"# Su cosa si basano?","x":-8431,"y":10483,"width":330,"height":50,"color":"6"},
		{"id":"0d17add1cb774159","type":"text","text":" (\"se su TCP vado al massimo blocco anche me stesso\"). ","x":-8391,"y":12812,"width":250,"height":209},
		{"id":"ba32fe7205e2606f","type":"text","text":"# Guida rapida alla scelta tra TCP e UDP\n\n- **_TCP_** - è il *lawful good* della situazione. \"Prima creiamo una connessione, dichiarando chi parla e chi ascolta (paradigma mittente-destinatario) ognuno con le rispettive informazioni (***handshaking***), poi parliamo\"\n\t- ***Garantisce l'arrivo dei pacchetti in ordine***;\n\t- Implementa dei controlli di non-congestione sull'utente (***controllo di flusso***) e sulla rete (***controllo della congestione***). In pratica evita il sovraccarico di rete aggiustando le velocità delle singole connessioni a seconda del livello di riempimento dei router, evitando che si blocchi tutto e che le informazioni si perdano;\n\t- NON dà garanzie di velocità (da bravo *lawful good*, \"chi va piano...\"). In ogni caso, se uso commutazione di pacchetto dovrei già sapere che latenza e throughput non possono mai essere garantiti;\n\t- Ogni servizio offerto da TCP aggiunge complessità, ritardi e overhead computazionale.\n\t- Utile in situazioni in cui mi interessa l'affidabilità piuttosto che la velocità (e.g. caricamento di pagine web, transazioni bancarie).\n\n- **_UDP_** - è ovviamente *chaotic evil*. \"Io ci provo a trasmettere i dati, poi se succede qualcosa non guardare me... da parte mia best effort fratello\".\n\t- Non crea alcuna connessione, non c'è nessun paradigma: se il destinatario è in ascolto sulla giusta porta si vede semplicemente recapitare un pacchetto UDP;\n\t- Visto che non perdo tempo a creare la connessione, UDP può essere molto veloce... se il pacchetto arriva a destinazione. Già, perché questo protocollo non offre nessuna garanzia in tal senso;\n\t- Perché mai dovrei usare UDP se non garantisce niente?\n\t\t- Se non mi interessa che ogni tanto si perdano dei dati (e.g. streaming) sfrutto un servizio statisticamente più veloce;\n\t\t- Se mi interessa posso sempre costruire il mio trasporto affidabile a livello di Applicazione e poi usare UDP perché è più veloce di TCP. Questa è in generale una tendenza degli ultimi anni: implementare regole a livello applicazione senza cambiare i protocolli più bassi (e.g. ***QUIC***).","x":-8594,"y":11812,"width":656,"height":938,"color":"4"},
		{"id":"3f4a905d3f1d3058","type":"text","text":"discorso generale, un possibile rdt è un protocollo di TCP che usa udt (IP) inaffidabile per costruire una roba affidabile","x":-7015,"y":10572,"width":250,"height":246},
		{"id":"fb29b2016fb66f0d","type":"text","text":"# Trasferimento Affidabile\n\nOvvero, come implementare un protocollo affidabile (cioè in grado di rimediare a perdita, disordinamento e corruzione dei pacchetti) su un canale fisico inaffidabile.\n\nUtilizzando un ***UDT*** (***Unreliable Data Transfer***), si prova a costruire un ***Reliable Data Transfer*** (***RDT***).","x":-6472,"y":10895,"width":451,"height":272,"color":"6"},
		{"id":"6f3226cdbb9850aa","type":"text","text":"# Servizi del Trasporto\n\nOffrono all'Applicazione un canale di comunicazione logico.\n\nDal punto di vista dell'Applicazione è come se i vari livelli di Trasporto siano connessi, il *come* non è affar suo.\n\nDal punto di vista del Trasporto, è sufficiente sapere dove e come inviare i messaggi, sfruttando i propri protocolli e quelli del livello di Rete (IP).\n\nSe uso TCP, il Trasporto si preoccupa anche di garantire che in qualche modo i messaggi arrivino a destinazione, avendo cura di informarmi se ciò non succede.\n\n","x":-7812,"y":11031,"width":688,"height":331,"color":"4"},
		{"id":"968f90c621f36328","type":"text","text":"# Controllo della Congestione","x":-6472,"y":11462,"width":451,"height":270,"color":"6"},
		{"id":"1a7e522c18045e6d","type":"text","text":"# (De)multiplexing Protocollare\n\nSe al TCP del destinatario arriva un segmento, come fa a sapere a quale protocollo dell'Applicazione (e.g. HTTP, FTP, DNS, ...) consegnarlo?\n\nServe un codice identificativo standard da associare al messaggio. Potrei ad esempio dire che se nell'header TCP scrivo 80, allora il destinatario interpreterà di default il payload in arrivo come HTTP.\n\nQuesto numero, detto numero di ***porta***, consente di effettuare il ***multiplexing*** lato mittente: qualsiasi protocollo Applicazione può consegnare il proprio payload a TCP, e il segmento che quest'ultimo genera è sempre uguale ad eccezione del numero di porta. In pratica, TCP riunisce i diversi protocolli Applicazione in un'unica entità logica: il segmento TCP (e.g. non esistono il *segmento HTTP*, il *segmento DNS*, ...).\n\nA destinazione avviene il **_demultiplexing_**, ovvero a seconda del numero di porta il messaggio viene consegnato al giusto protocollo Applicazione (un'unica entità logica viene divisa in più canali, corrispondenti ai vari protocolli Applicazione).\n Il SO ha in genere una lista delle porte standard, ma posso creare un canale di comunicazione usando la porta che preferisco.\n \nNel caso di TCP si parla di **_(de)multiplexing protocollare_** (potremmo dire _logico_ o *virtuale*, in quanto avviene a livello software: le porte non sono entità fisiche, ma concetti virtuali), ed è associato principalmente al livello di Trasporto.","x":-6947,"y":9760,"width":700,"height":623,"color":"4"},
		{"id":"51014418878ce34a","type":"file","file":"Protocolli Trasporto/RDT/SchemaRDT.png","x":-6472,"y":10483,"width":451,"height":292},
		{"id":"34401d45639b449d","type":"text","text":"# Livello di Trasporto","x":-7638,"y":10483,"width":341,"height":50,"color":"6"},
		{"id":"78a5ab219227020b","type":"text","text":"# Protocolli del Trasporto","x":-7662,"y":12251,"width":388,"height":60,"color":"6"},
		{"id":"b2c8e74231cf5ae9","type":"text","text":"# TCP","x":-6308,"y":12251,"width":122,"height":60,"color":"6"},
		{"id":"bc22bb5d7b6798d3","type":"text","text":"\nil socket TCP vuole stabilire una connessione, quindi gli servono \n\n- indirizzo IP di origine\n- numero di porta di origine\n- indirizzo IP di destinazione\n- numero di porta di destinazione\n\nregola per mappare i pacchetti al processo.\nperché metto anche l'IP? anche per aumentare lo spazio dei socket (avere più scelte per demultiplare).\n\nPosso mentire sul mio IP sorgente? (direi in UDP sì e sta alla rete controllare che io non faccia cose strane) ma non lo mette UDP nell'header mi sa, sta alla rete temo\nPiù processi che si aspettano HTTP (e.g. firefox e chrome) lo fanno sullo stesso socket? c'è un ulteriore demux? uno dei due è forzato a cambiare porta (tanto è TCP)? (secondo me ognuno apre un socket)\n","x":-6784,"y":12456,"width":871,"height":436},
		{"id":"cfd8a6577c228df0","type":"text","text":"# UDP (User Datagram Protocol)\n\nUDP è il servizio \"base\" del livello di Trasporto. Fa solo il (de)multiplexing, e lo fa senza connessione. Gli basta sapere IP e numero di porta di destinazione (e.g. $\\delta$ per \"destinatario\"), dopodiché invia il segmento e se ne lava le mani.\n\nSe l'IP di destinazione è in ascolto sulla porta $\\delta$, si vede arrivare un pacchetto UDP in cui è specificato l'IP di chi lo manda e la porta dinamica (e.g. $\\mu$ per \"mittente\") che identifica il processo client che l'ha generato.\n\nOvviamente più client e più processi dello stesso client possono mandare segmenti alla porta $\\delta$, quindi chi è in ascolto si vede arrivare un unico flusso (stream) di dati, ma grazie alla coppia ($IP_\\mu, \\mu$) effettua il demultiplexing.\n\nCon UDP chiunque può parlare quando vuole dicendo una parola alla volta\n\nC'è un minimo controllo degli errori dato da un checksum molto rudimentale (una somma in complemento a 1). Se a destinazione trovo un errore, scarto il pacchetto (e lo richiedo? dipende dal protocollo Applicazione).\n\nIn realtà c'è più di un checksum, il che rende vagamente più sensato il fatto che sia molto grezzo","x":-7812,"y":12892,"width":688,"height":699,"color":"3"},
		{"id":"a122bc5c3c127d03","type":"text","text":"\nUser Datagram Protocol (della serie, in pratica lavoro sui datagrammi)\n\nsnmp gestione router, devo mandare info asap\n\n","x":-7034,"y":12952,"width":250,"height":496},
		{"id":"9727e675784a8b75","type":"text","text":"**Load Balancer (Bilanciatore di Carico)**: Immagina che stai lanciando una festa e hai molte persone che vogliono entrare. Un \"load balancer\" è come il tipo che controlla l'ingresso e distribuisce le persone in modo uniforme in modo che non ci sia troppa confusione in una zona. Nei server, il load balancer fa lo stesso, distribuendo il traffico in modo equo tra diversi server, in modo che nessun server sia sovraccaricato.","x":-6614,"y":13512,"width":468,"height":491},
		{"id":"fd5376187828d385","type":"text","text":"# Definizioni di RFC 2460 (IPv6)\n\n- node - a device that implements IPv6;\n- router - a node that forwards IPv6 packets not explicitly addressed to itself;\n- host - any node that is not a router.","x":-5752,"y":769,"width":716,"height":186,"color":"4"},
		{"id":"bd9ffece9b4d9aa9","type":"text","text":"# Record DNS\n\nCome ogni DB, anche DNS ha un formato standard per i record: `(name, value, type, ttl)`.\nIl valore dominante è `type`, al variare del quale gli altri valori cambiano di significato.\n\n- `type = A` - un record di tipo ***address*** associa il campo `A_name` all'IP corrispondente (nel campo `A_value`). Intuitivamente, è lo step finale della ricerca DNS: se trovo questo ho vinto;\n- `type = NS` - un record di tipo ***name server*** è un reindirizzamento ad un altro server DNS. Se trovo questo, il server mi sta dicendo una cosa del tipo \"se stai cercando il dominio `NS_name`, dovresti chiedere al nameserver `NS_value`\". Verosimilmente, oltre a questo mi darà anche un record di tipo address il cui campo `A_name` è il nameserver a cui chiedere (`NS_value`) e il cui campo `A_value` è il suo indirizzo IP;\n- `type = CNAME` - un record di tipo ***alias*** mi dice che \"in nome `CNAME_value` che mi hai dato è un nickname, quello che cerchi in realtà si chiama `CNAME_value`\";\n\t- Il \"vero\" nome del server è detto ***nome canonico***; \n\t- Un alias fa puntare più sottodomini allo stesso server (gestisco solo il nome canonico);\n\t- Un `CNAME` può puntare ad un altro `CNAME`, ma sarebbe buona norma evitarlo;\n- `type = MX` - un record che associa un dominio al ***mail server*** associato ($\\Rightarrow$ il server che gestisce SMTP). Dovrebbe essere sempre usato su un nome canonico (??????????)","x":-16592,"y":5200,"width":806,"height":530,"color":"3"},
		{"id":"595d6fa8c5535979","type":"text","text":"# Su cosa appoggio il mio protocollo Applicazione?","x":-10425,"y":7392,"width":310,"height":128,"color":"6"},
		{"id":"e02622616641968a","type":"text","text":"# Switch\n\nReindirizza i frame tra IP della stessa subnet tramite una tabella che associa gli indirizzi MAC dei dispositivi ad esso connessi con la relativa porta fisica.\n\nOgni switch implementa tre azioni.\n\n- ***Learn*** - Riempire una riga della tabella. Immaginiamola inizialmente vuota. Quando da una porta fisica arriva un frame, questo contiene il MAC address del mittente;\n- ***Flood*** - Se lo switch non conosce il MAC address di destinazione, si comporterà da hub, inoltrando il frame in broadcast su tutte le altre porte. Solo il diretto interessato risponderà, di fatto passando per lo switch e facendogli imparare la sua associazione porta-MAC;\n- ***Forward*** - Se so già tutto, reindirizzo in scioltezza.\n\nTutto questo funziona anche per inoltrare i frame al gateway router, il quale poi se la vede con Internet.\n\nAnche lo switch ha un MAC e un IP, in caso serva configurarlo (e.g. con Telnet, o SSH). Fintantoché il traffico non è rivolto esattamente a lui, questi restano inutilizzati.","x":1955,"y":2420,"width":720,"height":520},
		{"id":"05c3b8792f604a34","type":"text","text":"# Glossario del Data Link Layer\n\n- ***Data Link Control (DLC)*** - protocollo che definisce la comunicazione nodo-a-nodo (canale condiviso da due host);\n- ***Media Access Control (MAC)*** - protocollo che definisce la comunicazione broadcast (canale condiviso da più host);\n\t- Diverso è l'***indirizzo MAC***, che identifica univocamente un dispositivo nella LAN. In teoria è hard-coded, in pratica posso cambiarlo via SW.\n- ***Flooding*** - Azione di uno switch. Inoltra un frame proveniente da una porta a tutte le altre porte;\n- ***Unicast*** - Un tipo di frame in cui il MAC di destinazione identifica un singolo host. Uno switch può eseguire un'azione di flooding se non conosce il MAc di destinazione;\n- ***Broadcast*** - Un tipo di frame in cui il MAC (FFFF.FFFF.FFFF) indica allo switch di fare flooding. Un host che si vede recapitare un broadcast può decidere se accettarlo o meno, a seconda della configurazione;\n","x":1955,"y":3003,"width":720,"height":551},
		{"id":"f0c161be25e73aa9","type":"file","file":"Data Link Layer/Confronto_VLAN_Header.png","x":2946,"y":3279,"width":715,"height":165},
		{"id":"9d135ba1fbe86052","type":"text","text":"# VLAN (Virtual LAN)\n\nDivido le porte dello switch in sottogruppi. In pratica divido un singolo switch fisico in più switch virtuali, aventi ognuna una tabella MAC indipendente.\n\nPosso collegare, ad esempio, la VLAN 10 di uno switch con la VALN 10 di un altro con un cavo fisico. Potrebbe essere comodo collegare un router solo con determinate VLANs e non con altre. Devo usare un cavo per ciascuna? No, esistono cavi che collegano in blocco più VLANs (detti Trunk). I cavi che trasportano informazioni relative ad una sola VLAN sono invece detti Access.\n\nOk, ma se su un Trunk arriva un frame come faccio a sapere in che VLAN vive? C'è un campo dell'header (VLAN Tag) che glielo dice. Chi lo mette? Lo switch, quando lo invia. Nell'esempio sotto, 802.1q è il protocollo per i VLAN Tag e ID:10 è il numero di VLAN. E se mi arriva un frame senza VLAN Tag? Definisco una Native VLAN a cui indirizzare di default i frame senza Tag. Non serve solo a questo! Ipotizziamo la Native sia la 10. Se arriva una frame da un Access della VLAN 30, lo switch controlla se 30 è la Native. Non lo è, allora mette il tag 30 e invia. Se invece arriva un frame da un Access della Native (10 in questo esempio), lo switch non mette alcun tag!\n\nI Trunk sono connessi alle Tagged ports, gli Access alle Untagged ports. La Native VLAN è l'unica che attraversa un Tagged Link senza Tag.\n\nPerché tutto ciò è utile? Perché è una virtualizzazione: la topologia virtuale non è vincolata alla topologia fisica!","x":2946,"y":2609,"width":715,"height":631},
		{"id":"9782d3812a907a46","type":"file","file":"Data Link Layer/VLAN_1.png","x":3706,"y":2609,"width":400,"height":223},
		{"id":"cb8b6e91609f50e1","type":"file","file":"Data Link Layer/VLAN_2.png","x":3706,"y":2861,"width":400,"height":142},
		{"id":"82a06f2b58f08c38","type":"file","file":"Stack Protocollare/Screenshot from 2024-05-01 16-10-50.png","x":2119,"y":1920,"width":390,"height":126},
		{"id":"9f731eac72823c6c","type":"text","text":"# Livello di Collegamento","x":941,"y":2275,"width":391,"height":50,"color":"6"},
		{"id":"c3187d1caf5835bf","type":"text","text":"# Quindi cosa serve per comunicare?\n\nSe voglio comunicare in locale, mi bastano due informazioni:\n- il mio IP;\n- la maschera di sottorete.\n\nSe voglio comunicare al di fuori della mia sottorete, mi servono anche\n- IP del router (default gateway)\n- IP di un server DNS.\n\nTutto questo viene configurato automaticamente al momento della creazione della connessione dal DHCP.","x":3906,"y":3274,"width":619,"height":400},
		{"id":"c9c9037d39594e6d","type":"text","text":"# Dataflow\n\nComplessivamente, tutto il traffico di Internet è interamente determinato da tre oggetti:\n\n- MAC Address Table - Mappa gli indirizzi MAC in porte fisiche (switchports);\n- ARP Table/Cache - Mappa gli indirizzi IP in indirizzi MAC;\n- Routing Table - Indirizza i datagrammi (contenenti gli indirizzi IP) al prossimo router.\n\nPercHé avvenga il flusso di informazioni, se uso la RT poi userò anche la ARP.","x":3906,"y":3714,"width":619,"height":700},
		{"id":"7eefd49bc7f4fed8","type":"text","text":"# Data Plane\n\nA livello locale, il data plane si preoccupa di gestire il (***de)multiplexing logico e fisico dei singoli router*** ($\\Rightarrow$ associare a ogni informazione in ingresso l'uscita adeguata). Ciò avviene tramite una ***tabella di corrispondenze***, ed è detto ***forwarding***.\n\n","x":-440,"y":5460,"width":454,"height":211,"color":"6"},
		{"id":"b356a8ba2ad031a0","type":"text","text":"# Rete\n\ntutte le macchine di rete devono avere questo livello per inoltrare i pacchetti -> necessario per stare su una rete (obv). diviso in due parti\n\n- piano dei dati (data plane) - livello locale, ogni router deve sapere implementare queste funzioni. riceve datagamma da una porta e deve sapere da che porta farlo uscire (Tabella);\n- control plane - la visione globale, che definisce gli algoritmi di routing. a sua volta può essere implementato\n\t- nei singoli router, in cui è una tabella con tutti gli ip e le porte corrispondenti, che risolve il forwarding. ogni router fa girare un pezzetto di un algoritmo distribuito (basato su scambi di messaggi tra nodi), che ha come output la modifica di questa tabella. è responsabile dalla propria tabella ma influenza i vicini (in quanto distribuito). rischio loop di configurazione\n\t- nei server (SDN), lo stesso algoritmo, ma centralizzato. Remoto. Conosce tutte le tabelle. non rischio loop. Dentro un singolo ISP posso fare tutto centralizzato. faccio copie di questo supercomputer per sicurezza.\n\nspostiamoci nel nucleo di rete e programmiamo i router.\n\n\"il router è più un forwarder che un router\".  keep router simple, basta la tabella di corrispondenze, ma come passo da comportamento locale a globale?\n\nl'autostrada dei pacchetti può essere modificata live (Negli anni 50 si faceva a mano), ma facciamo un passo indietro.\n\novviamente è best effort.\nci sono stati tentativi di implementazione di rete che offra qualche servizio, ma non hanno funzionato. Ma alla fine scialla, è semplice! non serve HW particolare.\n\nse la rete soffre faccio caching. insomma, un modo lo trovo senza cambiare IP. \"ormai è così, chi è che si mette a cambiare tutto?\"","x":-358,"y":7040,"width":713,"height":940},
		{"id":"d24861aa7ccdefd8","type":"text","text":"# Bellman-Ford (Distance-Vector)\n\nci si è resi conto che Dijkstra ha problemi. se il costo cambia \"poco\" devo poter eseguire \"poco\" codice. Alleggerisce peso su singolo router. non devo fare broadcast (niente O(n^2) messaggi sulla rete).\nIn pratica scarico le responsabilità sui vicini: se sono x e voglio andare da y calcolo la distanza minima come\n$$min(\\text{distanza}_{xi} + \\text{minima distanza}_{iy})$$\ndove $i$ sono tutti e soli i primi vicini. Ogni vicino comunica ad x la stima della minima distanza$_{xy}$.\nSe cambia un costo, gli unici a dover comunicare sono i vicini. Se passo da un costo 100 a un costo 1 forse sta cosa si propaga su tutta la rete, ma piccole variazioni triggerano piccole esecuzioni di codice.\n\nquesta roba converge in modo \"molto ragionevole\", nel senso che è robusto rispetto ad asinconia, dati non perfettamente aggiornati. se non cambia niente non manda messaggi (dijkstra si aggiorna ogni t secondi). avviso i vicini solo se cambiano le mie stime dei miei distance vectors, e lo faccio istantaneamente (più veloce di dijkstra)\n\nnotare che nessun nodo conosce il percorso globale. in alcuni casi può essere un problema (e.g. non voglio far passare i pacchetti da una certa rete). algoritmo distribuito che (spesso) gira solo in alcuni punti della rete.\n\nil concetto di tempo non è molto importante, meglio ragionare per eventi. All'inizio ci sono tanti scambi e calcoli, poi si placa.\n\nnota che l'informazione si propaga ad una velocità finita, quindi quando ho tutta la tabella calcolata in realtà lo sto facendo con dati vecchi (relativistic-friendly). in realtà la velocità di propagazione dell'informazione di dipende dal tipo di notizia: le \"buone\" notizie (e.g. un costo si riduce) viaggiano velocemente, le \"cattive\" (e.g. il contrario) si propagano lentamente. (un buon modo per rompere questo algoritmo è spezzare solo il cavo migliore...?)\n\nnel caso di notizia negativa, se l'informazione non si propaga abbastanza velocemente\n\nsulla rete non si usa praticamente più, si usa dijkstra ma per collegare diverse reti si usano i concetti di distance vector.\n\nSplit horizon: non invio rotte apprese da A indietro ad A stesso.","x":1357,"y":8866,"width":789,"height":920},
		{"id":"dbc47f290845eb11","type":"text","text":"# Protocolli di instradamento\n\ndevo trovare un buon collegamento tra Alice e Bob. cosa significa buono dipende molto dalle circostanze. lavoro su grafi. gli algoritmi si dividono in\n\n- centralizzati: link-state\n- decentralizzati - distance vector\n\npossono essere statici o dinamici (e.g. a seconda del costo). farlo troppo dinamico può rompere l'algoritmo. pensa a google maps. se aggiornasse ogni 10 secondi tutti prendono la strada veloce che diventa rapidamente quella lenta\n\n## Dijkstra (link-state)\n\npercorso ottimale tra due nodi, ma mi servono tutte le info. quindi la premessa è che ogni router comunichi tutti i livelli di intasamento di tutte le porte. ci sono algoritmi intelligenti per questo (e.g. se un router riceve info da un altro router, inoltra entrambe le info)\nuna volta che ho le info globali, Ogni nodo risolve un dijkstra diverso (dal suo POV). potrebbe anche risolvere quelli degli altri, ma non gli serve a niente.\n\nproblemi: se k è grande la rete può collassare.\n\nil fatto che ogni router sappia tutto il percorso è una ridondanza, il singolo router deve solo aggiornare la sua tabella (per questo ha senso avere un control computer coso).\n\n*L’algoritmo link-state ha una complessità computazionale pari a $O(n^2)$ (anche se è\npossibile implementarlo ottimamente in O(n log n)) ed una complessità di comunica-\nzione pari a O($n^2$ ), poiché ogni router deve trasmettere in broadcast il suo stato dei costi\na tutti gli altri router (richiedendo O(n) tramite algoritmi efficienti).*\n\nse ho una rete troppo grossa è un problema: ogni router dovrebbe conoscere la topologia della rete.\nad ogni variazione di un solo costo devo ricalcolare tutto. caso patologico: i costi dipendono dal volume istantaneo. disastro. ogni aggiornamento triggera un nuovo aggiornamento. \"di per sé non è un male, ma può esserlo\". infatti il volume non si usa più come parametro (si usano capacità cavo, \\#hop, ...)\n\ndijkstra è BFS (esplora l'albero in profondità)\n","x":2184,"y":8866,"width":855,"height":920},
		{"id":"02b1bc097aa674f5","type":"text","text":"\"se conoscete Linux sapete cosa sono i demoni\"","x":2525,"y":9912,"width":339,"height":85},
		{"id":"352b4beb483d264e","type":"text","text":"# Control Plane\n\nal di sopra delle tabelle c'è un algoritmo distribuito basato sulla trasmissione di messaggi. una volta che converge, modifica le tabelle.in realtà se possibile tendiamo a non renderlo distribuito, ma a usare un server centralizzato (remote controller). perché? se lascio ai router il compito di comunicare tra loro potrebbe metterci una vita. è una centralizzazione logica, ovviamente, a livello fisico ho ridondanza. il punto è che per ogni istante so l'informazione complessiva dello stato delle tabelle. idealmente.\n\ncome lo implemento? impongo ai router di comunicare in broadcast la propria tabella (?)\nin genere un algoritmo centralizzato è più potente di uno distribuito (ha più info). in entrambi i paradigmi possono girare entrambi i tipi di algoritmi.\n\n","x":-391,"y":9038,"width":855,"height":370},
		{"id":"ff85fbdd6c733437","type":"text","text":"# Protocolli di Instradamento\n\nsulla rete reale nessuno di questi algoritmi funziona. $O(n^2)$ se ho milioni di router è problematico. inoltre, una sottorete dovrebbe essere indipendente dagli \"ordini imposti dall'alto\" (e.g. un'ISP è veloce ma non vuole che il traffico passi da lei. è legale...? oppure (non) vuole far passare il suo traffico da una sottorete specifica).\n\ndistinguiamo allora protocolli intra-ISP e inter-ISP. Diversi ISP hanno obiettivi, capacità e politiche diverse. ogni admin vorrebbe controllare il traffico e l'instradamento della propria rete e come gestire il traffico di passaggio.\n\nmagari internamente mi implemento dijkstra. quello fuori deve essere uguale per tutti. I router interni li aggiorna il mio algoritmo, sui gateway intervengono sia il mio sia quello di tutti.\n\nquello di tutti deve avere il quadro generale degli indirizzi raggiungibili dalle varie reti autonome.","x":3297,"y":8759,"width":789,"height":464},
		{"id":"d92ff2e0bcf964fc","type":"text","text":"# Routing interno\n\nposso pensare che tutti i router interni siano uguali.\n\n- RIP (non entrare troppo in dettaglio...) - protocollo client-server (UDP porta 520). costo misurato in \\#hop. raro che servano più di 15hop in una sottorete, per questo 16 era usato come infinito. periodicamente mando i miei DV. Posso mandare\n\t- request - mandatemi tutti i DV adesso;\n\t- response - mando la mia tabella, risposta a request o ogni 30sec.\n- EIGRP (Cisco, USA) - open source dal 2013, ci hanno trovato un tot di backdoor, c'era un periodo in cui se non avevi questo router non funzionava niente (???) \"Cisco non ha mai letto i paper di chi studiava le reti nelle università\"\n- OSPF - successore di RIP, ma link-state. messaggi mandati come payload di IP: non devo fare un \"finto livello applicativo\" perché non uso TCP/UDP implementa anche layer sicurezza. si può rendere gerarchico, facilitando la trasmissione delle info di aggiornamenti: se devo fare flooding (propagazione mie info) nella mia sottorete tutto ok, se devo farlo verso zone lontane posso passare dalla backbone gerarchicamente più in alto (e più veloci). inoltre non vedo il costo per tutte le possibili destinazioni della LAN, ma solo quello del router che fa \"NAT\". in pratica è sia scalabile che ottimizzato nelle piccole LAN.\n\ndistancevector gerarchico non sa se è stato implementato, forse è difficile\ndijkstra è più facile (infatti esiste OSPF).\n\n","x":3297,"y":9326,"width":789,"height":553},
		{"id":"828e56b6e0fa5425","type":"text","text":"Oltre agli algoritmi di routing implementati all’interno dei singoli router, per il control\nplane può essere utilizzato anche il Software-Defined Networking (SDN), dove un\nserver remoto, detto controller remoto, calcola preventivamente tutte le forwarding\ntable dei router, ossia le tabelle contenenti le regole di inoltro, i quali poi si connetteranno\ncon il controller stesso per ottenere ed installare la propria tabella","x":3816,"y":7287,"width":509,"height":285},
		{"id":"f537b296b73bc81b","type":"text","text":"# Comunicazione\n\nPrima di tutto verifico se l'IP che voglio raggiungere è dentro la mia LAN o se devo passare dal router. Come? Confrontando il mio IP col suo attraverso la Subnet Mask.\n\n- Se l'IP che voglio raggiungere è in locale ma non so il suo MAC Address mando broadcast una richiesta ARP (RFC 826), includendo la mia coppia (IP, MAC). L'interessato riceve la richiesta, si segna la mia coppia (IP, MAC) nella cache ARP e procede a rispondermi unicast (perché a questo punto sa il mio MAC) con la sua coppia. Quando mi arriva il messaggio siamo in grado di comunicare.\n\n- Se l'IP che voglio raggiungere NON è in locale devo passare dal gateway router. Faccio ARP sul gateway router (il cui IP è impostato di default come parametro di connessione), dopodiché se la vede lui con le proprie tabelle di routing. Questo ovviamente avviene solo la prima volta. Preso il MAC del gateway, se la vede lui.\n\t- Nota che alla stessa porta possono corrispondere diversi MAC. La porta fisica è \"dove andare per raggiungere questo MAC\", non \"SOLO questo MAC\"!.","x":2946,"y":2060,"width":715,"height":480},
		{"id":"5813ffbd6cdf2642","type":"text","text":"# Aggiunte al DLL\n\noltre che identificare l'errore posso provare a recuperarlo (utile se ho un canale con altissima latenza, e.g. satellite)\n\ngli errori sono spesso *bursty*, nel senso che spesso non c'è problema finché non arriva un'interferenza che fa casino localizzato temporalmente (l'interferenza è lenta rispetto alla velocità del segnale). quindi in realtà è difficile l'errore sul singolo bit, spesso ne coinvolge tanti (finestra di interferenza) -> metto i bit su una matrice e faccio checksum su riga e colonna per identificare meglio l'errore.\n\n\"sintonizzarsi\" su una frequenza significa campionare ad una certa frequenza con l'idea che le altre risultino \"rumore\" o medino a zero.\n\nil processo di flooding si ferma al router, che butta il pacchetto\n\nmentre il router legge l'header di rete e sostituisce l'header di link, lo switch si limita a reindirizzare","x":1360,"y":2420,"width":480,"height":640},
		{"id":"88c9b35b0c391a8a","type":"text","text":"# Frammentazione\n\ni pacchetti di rete hanno una max_transfer_size a livello di collegamento, caratteristico del cavo/mezzo di comunicazione. Se mi arriva un pacchetto troppo grande devo spezzarlo (IPv4). Quando arrivano al destinatario, i vari pacchetti IP frammentati vengono riassemblati.\n\nIPv6 vieta la frammentazione, devo esplorare il livello di collegamento per capire quanto grande  posso mandare i pacchetti. notare che viola il principio di divisione dei layer.","x":-288,"y":3005,"width":680,"height":713},
		{"id":"07b851654a6db276","type":"text","text":"# NAT\n\ngli indirizzo che vedo in rete locale non sono gli stessi che vedo dall'esterno. questo perché uso i NAT.\n\nCi sono specifiche subnet che rappresentano LAN (e.g. 192.xxxxxxx, 10.xxxxxxx), mentre dall'esterno vedo solo il router che poi se la gestisce all'interno.\n\nIl router \"NATtato\" spara in rete pacchetti che hanno tutti lo stesso indirizzo. E come li distinguo?? Sfrutto le porte.\n\nè una cosa un po' sporca: il router (che vive a livello di rete) così cambia la porta, che vive nel livello di trasporto.\nQuanti computer gestisco? $2^{16}$, quante sono le porte. Ma dipende anche da quali porte sono aperte dal router e dai computer.\n\nquesta cosa ha N vantaggi scritti sulle slides\n\nse il NAT non ha creato una connessione con il computer target, i pacchetti a lui diretti vengono scartati (sicurezza)\n\nSvantaggi: se apro un server non ho modo di comunicare il mio IP al mondo. Come si risolve? DNS dinamico.\n\nquesta roba funziona bene quando i computer dietro il nat sono quelli che aprono le connessioni (non se c'è invece un server in ascolto). In pratica cambio il nome della sorgente. In pratica, a ogni nuova connessione aggiungo una riga alla tabella NAT.\n\nPuò essere\n- SIMMETRICO se usa una nuova porta per ogni combinazione IP/PORTA, anche se la destinazione è la stessa (ma la porta cambia). Diventa difficile *bucare* il NAT, ovvero targettare correttamente un pc dietro il NAT di tipo 1;\n- asimmetrico?\n\nper ogni nuova connessione cambia porta, per bucare il NAT dovrei appoggiarmi a un server esterno (?)\n\nspesso la sicurezza viene gestita sapendo che esiste questo livello NAT da bucare. possono esserci anche più livelli di NAT annidati. UDP NAT Punching metodi per provare a bucare il NAT, ma a volte ci sono controlli. Se sono un admin di rete ho paura di chi buca i NAT, perché potenzialmente creo vulnerabilità, e spesso creo meccanismi di difesa per impedire questa cosa.\n\nnel router posso APRIRE LE PORTE, ovvero indicare una porta e associare un IP locale a cui inoltrare i pacchetti (non è più NAT, è una mia impostazione manuale)\n\nse apro tanti server dietro a un nat è ancora più complesso perché devo disambiguare","x":-288,"y":3845,"width":680,"height":1300},
		{"id":"c46e0b69e7092d81","type":"text","text":"# IPv6\n\nheader fisso (velocizzo, perché so già dove sta il payload e inizio a leggerlo in parallelo alle opzioni) e indirizzi a 128bit. identifico *ogni oggetto* su internet (e.g. una pagina ha un indirizzo fisso)\n\nelimina checksum e frammentazione\n\ncrea concetto di flusso a livello IP (e.g. VoIP, MultiplayerGaming) che vengono gestiti in modo particolare dai router (ma ancora non si usa molto) -> flow label\n\nimplementa bene l'anycast\n\nil problema è che quasi tutti i router sono ancora IPv4. Alcuni solo 6 altri ibridi. come faccio a farlo funzionare? Incapsulo! trasporto IPv6 come payload dell'IPv4 -> tunneling.\n\nse provo ad usare IPv6 palese non funziona niente, il DNS va lentissimo, ...\n\nPerché ci metto così tanto? PErché stiamo a livello di infrastruttura, ed è difficile cambiare tutto l'HW; poi è nato il NAT, quindi meno fretta. \"stiamo cambiando le fondamenta di una casa con gli abitanti ancora dentro\"\n\nsi può cambiare il concetto di cosa rappresenta un indirizzo: può diventare direttamente un URI di ogni oggetto che metto online (piuttosto che una destinazione!). Ovvero, è un hash che identifica l'oggetto. IPFS (Interplanetary Filesystem), molto carino per applicazioni p2p.","x":456,"y":4185,"width":569,"height":800},
		{"id":"447f8e71a756c709","type":"text","text":"# ICMP\n\ncostruito direttamente su IP. Il suo payload va direttamente su IP. Serve tendenzialmente a comunicare tra il router e chi gli ha mandato il pacchetto. in pratica gestisce gli errori. dice qualcosa rispetto al pacchetto IP mandato in precedenza.\n\nmessaggi importanti: richiesta eco (\"voglio sapere se ci sei\") e risposta eco (\"ci sono\"). \\[Questi ping sono a livello ICMP (esistono anche quelli a livello UDP)\\].\nanche TTL scaduto e porta irraggiungibile ()\"guarda che su questa porta non c'è alcun servizio\", può essere usato per...?).\nTraceroute è un abuso di ICMP: datagrammi UDP con un numero di porta tipicamente non usato per UDP. Prima mando TTL = 1, il primo router lo scarta e risponde ICMP, il che include l'IP del router che l'ha scartato. e così via. quando arrivo a destinazione, il server non ha un servizio attivo su quella porta. Quindi ricevo un \"porta irraggiungibile\" e so di aver finito. Così trovo la gente anche se non accetta i ping. I router possono anche decidere di non rispondere. Qui non sto mandando ping, sono loro che decidono di rispondere al fatto che un pacchetto è stato scartato. Ci sono altre N cose da sfruttare per costruire servizi sfruttando l'architettura di rete.\n\nesiste, un po' diverso, anche a livello di IPv6. Utile perché non essendoci frammentazione voglio trovare l'MTU minimo, c'è un algoritmo per trovarlo usando ICMPv6 (PathMTUDiscovery)","x":-1007,"y":3005,"width":600,"height":713},
		{"id":"23a2937e757042d7","type":"text","text":"# IP\n\nriguarda il formato del datagramma e come strutturare gli indirizzi e come frammentare i pacchetti se non entrano in un solo datagramma (MAC address \"applicato a tutto il mondo\", dice quello che ha già hackerato la NASA).\n\nniente nel protocollo IP richiede che l'indirizzo IP sia unico! :)\nIl primo che raggiungo è quello a cui mando il pacchetto. oppure no.\n\nalcuni ip non sono reali ma virtuali (255.255.255.255 è broadcast, ovver \"mandalo ovunque\". Se il router è configurato per farlo, lo manderà a chiunque nella sottorete (non in giro per internet!). Sulle reti locali è usato spesso).\n\nvedi slides","x":-1007,"y":3825,"width":600,"height":820},
		{"id":"798615d376321d80","type":"text","text":"Il livello di rete è gestito da protocolli come IP, RIP, OSPF e BGF, che instradano i pacchetti attraverso Internet. Al livello di collegamento, ci sono diverse tecnologie, tra cui Ethernet e Wi-Fi, mentre il livello fisico si occupa della trasmissione fisica dei dati.\n\nICMP è un protocollo di controllo di Internet che consente ai router di segnalare errori di instradamento o di comunicare con gli host.\n\nL'indirizzamento IPv4 utilizza indirizzi a 32 bit suddivisi in net_id (identificativo di sottorete) e host_id (identificativo dell'host). La frammentazione dei pacchetti è gestita per adattarsi alle dimensioni massime di trasmissione delle reti fisiche.\n\nInfine, IPv4 ha subito una serie di evoluzioni per affrontare problemi di esaurimento degli indirizzi e migliorare l'efficienza delle comunicazioni.","x":-995,"y":4734,"width":515,"height":560},
		{"id":"7f27ffe9c326e924","type":"text","text":"# Router\n\nprende decisioni in O(ns). embedded, hw specifico, oppure lato sw ma sono lentissimi. banda O(Tbit/s), centinaia di porte. SW si occupa di settare tabelle. rosso rete blu collegamento verde fisico (slides????).\nogni cavo ha la propria implementazione di collegamento/fisico. in pratica in genere i cavi sono tutti uguali.\n\nguardo IP e decido la porta. oppure leggo intestazioni (e.g. se l'IP sorgente è bannato, butta il pacchetto (firewall)).\n\nIPv4: 2^32 possibili destinazioni. Posso costruire IP in modo gerarchico. primi bit identificano \"macrorete\" in cui indirizzo il pacchetto.\n\n\n\nswitching fabric deve andare a N volte il rate se ci sono N ingressi ed N uscite. se lo fa, si dice non blocking. altrimenti (blocking): se il router rallenta rispetto alla velocità del cavo (non dovrebbe diventare il bottlenek!) se il router è blocking la coda è in ingresso (vecchi router, non succede più), se il bottleneck è il cavo di uscita la coda è in uscita.\n\nprimi SF erano computer linux scritti in assembly (openwrt (?) fa così). altrimenti BUS, altrimenti tanti bus (reti di interconnessione). idealmente sarebbe matrice NxN ma poi scala quadratica, allora uso struttura gerarchica. a livello hw il datagramma viene frammentato e ricomposto a destinazione (uscita). perché? per parallelizzare la trasmissione dei singoli bit. ogni datagramma subisce questa cosa in un fabric plane, e ce ne sono molteplici disponibilii.\n\nad ogni porta associo una velocità ($\\sum$ = NR).\n\nbuffer enorme non migliora, aumenta attesa in coda e il router di prima ritrasmette. come li gestisco? se lo costruisco ho un po' di gioco su chi favorire, ma rischio congestione e/o non-neutralità della rete.\n\npotrei garantire una bandwidth per una certa classe (e.g. voice over IP)\n\n","x":1440,"y":5567,"width":753,"height":1171},
		{"id":"f51086f517d2e458","type":"text","text":"# Forwarding Generalizzato\n\nquello normale è: guarda l'IP, scegli un'uscita guardando la forwarding table.\n\nil generalizzato guarda anche gli header di trasporto e collegamento, non solo l'IP Uso una flow table (forwarding table generalizzata).\n\n- modify - è un NAT\n- drop - è un firewall\n\nin pratica implemento delle *middleboxes*. si può bannare un MAC. con OpenFlow su un router posso implementare cose, compreso l'INSTRADAMENTO!\n\ncon le tabelle possiamo costruire un percorso.","x":1476,"y":7510,"width":680,"height":400},
		{"id":"3b6b15d9eb09a426","type":"text","text":"# Protocolli MAC\n\nPrincìpi di non-collisione.\nFai CSMA+ prima di aloha\n\ncosa serve per un MAC -> CSMA\npoi ci sono protocolli basati su\n- partizionamenti\n- accesso casuale\n\t- aloha\n\t- ethernet\n- vie di mezzo (rotazione)","x":1360,"y":3114,"width":480,"height":440},
		{"id":"84260917d7aeb08b","type":"text","text":"# Aggiunte ARP\n\n\"chi ha questo IP mi dica il suo MAC\"\nse arrivano due risposte?\ndipende dall'implementazione, alcune tengono solo la risposta più recente, altre restituiscono un errore (ARP conflict)\nesistono attacchi ARP spoofing in cui mi fingo un'altra interfaccia, ma poco interessante perché dovrei già trovarmi sulla LAN.\n\nswitch in cascata funzionano esattamente come un singolo switch\n\n","x":1520,"y":3668,"width":600,"height":492},
		{"id":"7835eb2894c58e79","type":"text","text":"","x":2355,"y":3755,"width":425,"height":305},
		{"id":"b6aaf46ed042cc05","type":"text","text":"# Popolare la Routing Table\n\ninterfaccia fisica del router (layer 2) ha nomi tipo fa01, e0, e3, ...\n","x":480,"y":7226,"width":580,"height":660},
		{"id":"d1b8f4d6b685141c","type":"text","text":"# Router\n\nDispositivo che implementa il layer di Rete reindirizzando i pacchetti non diretti a lui (invece di scartarli, come farebbe un host).\n\nElemento di base con cui è costruito il ***nucleo di rete***, si occupa di smistare i datagrammi IP (***forwarding***) in tempi $O(ns)$ tramite una ***routing table*** che associa ogni IP ad una porta fisica di uscita ($\\Rightarrow$ si comporta anche da switch). Gestisce flussi di dati $O(Tbit/s)$.\n\nAgisce sia a livello di data plane (implementando il forwarding tramite HW *ad-hoc*) sia a livello di control plane (ad esempio, modificando a livello SW le routing table secondo gli algoritmi di instradamento)","x":80,"y":5400,"width":760,"height":331,"color":"4"},
		{"id":"d6095c8e59ae3f07","type":"text","text":"# aggiunte VLAN\n\nse voglio dividere due sottoreti posso mettere un router. problema: riduco flessibilità, introduco struttura gerarchica al posto di topologia piatta degli switch (è come se tutti fossero connessi a tutti)\n\nse un computer di una rete si sposta in un altra, con i router è un casino, dovrei spostare il cavo da una rete all'altra.\n\ncon la VLAN si fa tutto tramite SW. se qualcuno si sposta lo metto sull'altra VLAN (modo SW di ricablare la rete). broadcast solo tra stesso tag\n\nper passare da una VLAN all'altra devo passare per un router, oppure uso le porte trunk (modifico il protocollo! 802.1q, ma solo sui trunk)","x":3740,"y":1980,"width":508,"height":520},
		{"id":"ea6978e20c848100","type":"file","file":"802.1q.png","x":3022,"y":3474,"width":564,"height":220},
		{"id":"b7cbea2785c98166","type":"text","text":"# Routing Table\n\nTabella interna al router che fa corrispondere un IP o un gruppo di IP di destinazione ad una porta fisica a cui inoltrare i datagrammi.\n\nNel caso in cui arrivi un pacchetto destinato ad un IP che non compare nella tabella, il router di default lo butta. Bisogna quindi popolarla prima che arrivi il traffico.\n\nGli elementi sono della forma `IP PORTA_FISICA`. Questo sottintende il passaggio logico dal MAC Address: ????????????????????\n\nTramite una tabella ARP, il router ricava `IP -> MAC`, `MAC -> PORTA_FISICA`\nI router hanno anche una tabella ARP per associare l'IP alla porta fisica. Questa, al contrario, viene popolata \"as traffic flows\".\n\n#### Come consulto la tabella?\n\n- Potrei andare in ordine e specificare quali range di IP forwardo dove. Non è velocissimo da valutare;\n- Uso il ***match del prefisso più lungo***, che per alcuni HW *ad-hoc* richiede un solo tempo di clock. Se ho ad esempio le righe `111 111 111 xxx 21` e `111 111 xxx xxx 34`\n\t- l'IP `111 111 111 111` matcha con entrambe, ma ha un bit di corrispondenza in più con la prima. Verrà quindi inoltrato sulla porta `21`;\n\t- l'IP `111 111 000 000` matcha solo con la seconda, verrà inoltrato alla porta `34`;\n\t- l'IP `100 000 000 000` non matcha con nessuna delle precedenti. Che ci faccio?\n\t\t- Se non trovo nessun match di default il router butta il pacchetto;\n\t\t- Posso definire una ***default route*** `0.0.0.0/0` in cui mando tutti i pacchetti che non matchano con le restanti ($O(10^6)$) righe: tutto ciò che non ha un match del prefisso più lungo va per la default route;\n\n\n#### Come riempio la tabella?\n\n- ***Direct Connection*** - la subnet 10.0.44.x/24 è connessa sulla porta X. Il router sa che un qualsiasi pacchetto con un IP in questo range è arrivato a destinazione, e che quindi si interfaccerà con una LAN;\n- ***Static Route*** - l'admin di rete inserisce manualmente le direttive nella tabella;\n- ***Dynamic Route*** - i router parlano automaticamente tra loro dicendosi a vicenda cosa possono raggiungere e aggiornando di conseguenza le tabelle. In genere ci sono più percorsi possibili, motivo per cui si usano degli ***algoritmi di instradamento***.\n","x":80,"y":5820,"width":760,"height":1020,"color":"2"},
		{"id":"6605d0100c8c141c","x":1700,"y":4817,"width":493,"height":343,"type":"text","text":"# PPP\n\nprotocollo point to point vecchio."}
	],
	"edges":[
		{"id":"6ddf40dd3d233286","fromNode":"4958894e7197fe3c","fromSide":"top","toNode":"23227e82062b49bc","toSide":"right"},
		{"id":"f97b165cd5b79ca1","fromNode":"23227e82062b49bc","fromSide":"top","toNode":"06174ae2aacf2d26","toSide":"bottom"},
		{"id":"79cea350f5f65501","fromNode":"a569f47822207faf","fromSide":"left","toNode":"4f9f693b64bc0e3f","toSide":"right"},
		{"id":"6d5ee26096e39af5","fromNode":"06174ae2aacf2d26","fromSide":"left","toNode":"a569f47822207faf","toSide":"right"},
		{"id":"efca276162b37995","fromNode":"a569f47822207faf","fromSide":"right","toNode":"06174ae2aacf2d26","toSide":"left"},
		{"id":"a779e63db92ba963","fromNode":"06174ae2aacf2d26","fromSide":"top","toNode":"165209213bc6a130","toSide":"bottom"},
		{"id":"9f06416bd06bfdef","fromNode":"a569f47822207faf","fromSide":"top","toNode":"165209213bc6a130","toSide":"bottom"},
		{"id":"61b78f68c63f4e8a","fromNode":"23227e82062b49bc","fromSide":"left","toNode":"b72f299bae389d13","toSide":"right"},
		{"id":"6f94fecf4639c0f4","fromNode":"4958894e7197fe3c","fromSide":"bottom","toNode":"1ec4d0918042c205","toSide":"right"},
		{"id":"18732b858dd6d8e8","fromNode":"b72f299bae389d13","fromSide":"bottom","toNode":"795690d5ce7e1c11","toSide":"top"},
		{"id":"236fb80dc10bcb1c","fromNode":"795690d5ce7e1c11","fromSide":"top","toNode":"b72f299bae389d13","toSide":"bottom"},
		{"id":"08f8c4d75162bc70","fromNode":"1ec4d0918042c205","fromSide":"left","toNode":"795690d5ce7e1c11","toSide":"right"},
		{"id":"2ad6aae7b242e920","fromNode":"795690d5ce7e1c11","fromSide":"left","toNode":"c842e00522cec07d","toSide":"right"},
		{"id":"6231bef59e40ecfa","fromNode":"1ec4d0918042c205","fromSide":"bottom","toNode":"5cf8d16de6efff56","toSide":"top"},
		{"id":"7ddcd8cf952994b6","fromNode":"9ed19d6e9980b34b","fromSide":"left","toNode":"0276409902e40e9c","toSide":"right"},
		{"id":"b9f2cee56ecc6884","fromNode":"165209213bc6a130","fromSide":"top","toNode":"ed6dd0d5b788bd3e","toSide":"bottom"},
		{"id":"fceeaf4ae4ae9491","fromNode":"23227e82062b49bc","fromSide":"bottom","toNode":"795690d5ce7e1c11","toSide":"right"},
		{"id":"818a74c3caa1b0b6","fromNode":"5cf8d16de6efff56","fromSide":"bottom","toNode":"1bd86960d6e5a8e2","toSide":"top"},
		{"id":"c16c39c9b26ca69c","fromNode":"1ec4d0918042c205","fromSide":"right","toNode":"44898ee22f42afdc","toSide":"left"},
		{"id":"91f484736f73f3df","fromNode":"4958894e7197fe3c","fromSide":"top","toNode":"56958c816f8128f6","toSide":"bottom"},
		{"id":"49bc3d9146b806bb","fromNode":"665f35bd71acbb90","fromSide":"top","toNode":"44898ee22f42afdc","toSide":"bottom"},
		{"id":"4d323ae12dc8b711","fromNode":"44898ee22f42afdc","fromSide":"right","toNode":"c45a83a3705f7881","toSide":"left"},
		{"id":"7534cf6c10d8c863","fromNode":"5cf8d16de6efff56","fromSide":"right","toNode":"0c876453e3807959","toSide":"left"},
		{"id":"fe0cb992b8bb8e89","fromNode":"0c876453e3807959","fromSide":"right","toNode":"665f35bd71acbb90","toSide":"left"},
		{"id":"9ab56fb991918b05","fromNode":"1ec4d0918042c205","fromSide":"bottom","toNode":"0c876453e3807959","toSide":"left"},
		{"id":"892fdf290715d14d","fromNode":"795690d5ce7e1c11","fromSide":"bottom","toNode":"9ed19d6e9980b34b","toSide":"top"},
		{"id":"ebcab486927cb5de","fromNode":"9ed19d6e9980b34b","fromSide":"right","toNode":"5cf8d16de6efff56","toSide":"left"},
		{"id":"6a0ae24e30667e00","fromNode":"665f35bd71acbb90","fromSide":"right","toNode":"981b264b7f7630c2","toSide":"left"},
		{"id":"7286f70c7c7e9e6f","fromNode":"981b264b7f7630c2","fromSide":"top","toNode":"c45a83a3705f7881","toSide":"bottom"},
		{"id":"9e27c5c48748361f","fromNode":"44898ee22f42afdc","fromSide":"top","toNode":"45a11294a8434cf8","toSide":"bottom"},
		{"id":"8af8a5f3e2ad1274","fromNode":"a569f47822207faf","fromSide":"top","toNode":"a3eaa4b44f0f3c44","toSide":"bottom"},
		{"id":"4bc5fcb03b652768","fromNode":"4f9f693b64bc0e3f","fromSide":"top","toNode":"a3eaa4b44f0f3c44","toSide":"bottom"},
		{"id":"a0745a8a10aa21ec","fromNode":"c45a83a3705f7881","fromSide":"bottom","toNode":"981b264b7f7630c2","toSide":"top"},
		{"id":"1c2152fd9676e1e4","fromNode":"c45a83a3705f7881","fromSide":"top","toNode":"305c16fa5fcbfca6","toSide":"bottom"},
		{"id":"7d0ac71b97316b5b","fromNode":"44898ee22f42afdc","fromSide":"top","toNode":"0e49609704fa8c9e","toSide":"bottom"},
		{"id":"feab48c838e8a738","fromNode":"0e49609704fa8c9e","fromSide":"top","toNode":"d7a25775f996e167","toSide":"bottom"},
		{"id":"4def83e52862fb08","fromNode":"665f35bd71acbb90","fromSide":"bottom","toNode":"1b501ca1023c98e0","toSide":"top"},
		{"id":"7b97b8d400a17d62","fromNode":"56958c816f8128f6","fromSide":"top","toNode":"d7a25775f996e167","toSide":"bottom"},
		{"id":"ee61d1fcc7c2de03","fromNode":"4df27d69ac9764ca","fromSide":"left","toNode":"f6c22dc935238119","toSide":"right"},
		{"id":"5edcd65f331c9876","fromNode":"1a0fe951bbf51b93","fromSide":"left","toNode":"472a39255272296f","toSide":"right"},
		{"id":"f14f75bb6f530e76","fromNode":"1bd86960d6e5a8e2","fromSide":"left","toNode":"4df27d69ac9764ca","toSide":"right"},
		{"id":"47a253347dc37b5d","fromNode":"1bd86960d6e5a8e2","fromSide":"bottom","toNode":"3881465ee755981e","toSide":"top"},
		{"id":"5d939219c7bb9a7a","fromNode":"3881465ee755981e","fromSide":"bottom","toNode":"34401d45639b449d","toSide":"top"},
		{"id":"7db3cb5e783eb5a1","fromNode":"3881465ee755981e","fromSide":"left","toNode":"179ce6b66f1a29fe","toSide":"right"},
		{"id":"f0bd2107ddee8ba5","fromNode":"3881465ee755981e","fromSide":"right","toNode":"010165be9fd56b6c","toSide":"left"},
		{"id":"cd673b03983e203e","fromNode":"4df27d69ac9764ca","fromSide":"left","toNode":"8ca68ef0d9cba75a","toSide":"right"},
		{"id":"208d0a9d82fd8425","fromNode":"56958c816f8128f6","fromSide":"top","toNode":"5b4bbd10c0ed915d","toSide":"bottom"},
		{"id":"048457974880d02b","fromNode":"179ce6b66f1a29fe","fromSide":"left","toNode":"ea111d8cb579b650","toSide":"bottom"},
		{"id":"86da5dab44bb03d1","fromNode":"bd9ffece9b4d9aa9","fromSide":"top","toNode":"f10a4ae200557701","toSide":"bottom"},
		{"id":"7f22da68abb7dd48","fromNode":"34401d45639b449d","fromSide":"bottom","toNode":"6f3226cdbb9850aa","toSide":"top"},
		{"id":"fa4fd6ac27fede83","fromNode":"179ce6b66f1a29fe","fromSide":"left","toNode":"349ec5026bac8b92","toSide":"top"},
		{"id":"c229738031cda2ac","fromNode":"349ec5026bac8b92","fromSide":"right","toNode":"dff88af00a536f81","toSide":"left"},
		{"id":"94b6a91f71272017","fromNode":"dff88af00a536f81","fromSide":"right","toNode":"34401d45639b449d","toSide":"left"},
		{"id":"731f0ec0ddf99b38","fromNode":"ea111d8cb579b650","fromSide":"left","toNode":"52edf2e6ee84f9b0","toSide":"right"},
		{"id":"d980c1a93aafee90","fromNode":"4df27d69ac9764ca","fromSide":"top","toNode":"1a0fe951bbf51b93","toSide":"bottom"},
		{"id":"99ef61b1863659dc","fromNode":"1bd86960d6e5a8e2","fromSide":"bottom","toNode":"35235b872aeaab53","toSide":"top"},
		{"id":"5d8bfaab9287c038","fromNode":"35235b872aeaab53","fromSide":"right","toNode":"3881465ee755981e","toSide":"left"},
		{"id":"7766ada0b75b23b1","fromNode":"3881465ee755981e","fromSide":"left","toNode":"35235b872aeaab53","toSide":"right"},
		{"id":"3c0abd32c7fec049","fromNode":"8b3faa26de750a2c","fromSide":"bottom","toNode":"89560ca8221b899c","toSide":"top"},
		{"id":"ea054aef41b0cca0","fromNode":"8b3faa26de750a2c","fromSide":"bottom","toNode":"a30868312d411d98","toSide":"top"},
		{"id":"7ce23dadaa651095","fromNode":"89560ca8221b899c","fromSide":"left","toNode":"6ce8f85f78362603","toSide":"right"},
		{"id":"dbf52d276f427907","fromNode":"973215b7fd31a26a","fromSide":"bottom","toNode":"ee9aa768d32eb89f","toSide":"top"},
		{"id":"6b464d08ca48f405","fromNode":"a30868312d411d98","fromSide":"right","toNode":"55d3231875e83cc8","toSide":"left"},
		{"id":"bd3886a5bc77d5a0","fromNode":"89560ca8221b899c","fromSide":"bottom","toNode":"ff01e5961e252647","toSide":"top"},
		{"id":"8d5e2dc5232a299d","fromNode":"a30868312d411d98","fromSide":"bottom","toNode":"ff01e5961e252647","toSide":"top"},
		{"id":"3b7a2fa2471a6608","fromNode":"ff01e5961e252647","fromSide":"bottom","toNode":"16f174d47e0dd2b5","toSide":"top"},
		{"id":"4631afa28cad3105","fromNode":"ff01e5961e252647","fromSide":"bottom","toNode":"44ce1eef2a1a2afa","toSide":"top"},
		{"id":"684296b62490a2a4","fromNode":"6ce8f85f78362603","fromSide":"bottom","toNode":"973215b7fd31a26a","toSide":"top"},
		{"id":"81a09b69b0c5bbbf","fromNode":"6ce8f85f78362603","fromSide":"bottom","toNode":"ada1ce65a17b1ff7","toSide":"top"},
		{"id":"8348e2cf9fcc3177","fromNode":"6ce8f85f78362603","fromSide":"bottom","toNode":"be024ab3c20ae124","toSide":"left"},
		{"id":"d1500d777e5a6d46","fromNode":"acb4f16f12e3f2e9","fromSide":"bottom","toNode":"6694e27578406638","toSide":"top"},
		{"id":"70d68af1971fd88f","fromNode":"2edbb402780f44c6","fromSide":"left","toNode":"acb4f16f12e3f2e9","toSide":"top"},
		{"id":"8f627262a584f38a","fromNode":"2edbb402780f44c6","fromSide":"left","toNode":"b42a1d8cb55878e0","toSide":"bottom"},
		{"id":"8fbed3ff33aca630","fromNode":"c25570b5d51372e2","fromSide":"bottom","toNode":"77ddaf1188c7b900","toSide":"top"},
		{"id":"d3994aec3181fafe","fromNode":"77ddaf1188c7b900","fromSide":"bottom","toNode":"04b979f48c716c0b","toSide":"top"},
		{"id":"95a357d298fdd7b9","fromNode":"6694e27578406638","fromSide":"bottom","toNode":"f99413b00ff804a3","toSide":"top"},
		{"id":"1684ada3383a3b04","fromNode":"f99413b00ff804a3","fromSide":"bottom","toNode":"431962e65465019d","toSide":"top"},
		{"id":"757b6e2877809f77","fromNode":"f99413b00ff804a3","fromSide":"bottom","toNode":"dab2f7463a1544fc","toSide":"top"},
		{"id":"0a9dc2c060770823","fromNode":"431962e65465019d","fromSide":"left","toNode":"beb0fa9d0cb9609a","toSide":"right"},
		{"id":"9e73506530a57cb1","fromNode":"dab2f7463a1544fc","fromSide":"right","toNode":"431962e65465019d","toSide":"left"},
		{"id":"4f90efa6599cf187","fromNode":"431962e65465019d","fromSide":"left","toNode":"dab2f7463a1544fc","toSide":"right"},
		{"id":"94aba2fbbe97d827","fromNode":"305c16fa5fcbfca6","fromSide":"right","toNode":"e98fee2b8eb0a179","toSide":"left"},
		{"id":"5baefffd457f53a0","fromNode":"35a7e50dd8bbb651","fromSide":"bottom","toNode":"dbda1bb853280987","toSide":"top"},
		{"id":"ee51101ead52c17c","fromNode":"dbda1bb853280987","fromSide":"top","toNode":"47339376d0be509e","toSide":"top"},
		{"id":"ceca913f68fcea22","fromNode":"35a7e50dd8bbb651","fromSide":"bottom","toNode":"47339376d0be509e","toSide":"top"},
		{"id":"b91001174f697fce","fromNode":"0719791a80c12eb2","fromSide":"top","toNode":"d0bc31a12d2847f8","toSide":"bottom"},
		{"id":"581c8be36c8c5d8f","fromNode":"ff62151f49666864","fromSide":"left","toNode":"0b031d2a05976038","toSide":"right"},
		{"id":"e2c0b939a1c3a84e","fromNode":"2edbb402780f44c6","fromSide":"right","toNode":"8b3faa26de750a2c","toSide":"left"},
		{"id":"26db68dfe4ccff0c","fromNode":"b42a1d8cb55878e0","fromSide":"left","toNode":"ff62151f49666864","toSide":"right"},
		{"id":"19be112fc67481ac","fromNode":"2edbb402780f44c6","fromSide":"left","toNode":"a13ba86d0881bc3c","toSide":"top"},
		{"id":"502b754c3aa17464","fromNode":"a13ba86d0881bc3c","fromSide":"top","toNode":"c25570b5d51372e2","toSide":"top"},
		{"id":"56c3bb85acedb920","fromNode":"a13ba86d0881bc3c","fromSide":"top","toNode":"8235584e2a6409b7","toSide":"bottom"},
		{"id":"3e1856f5b89479ab","fromNode":"2edbb402780f44c6","fromSide":"left","toNode":"8235584e2a6409b7","toSide":"bottom"},
		{"id":"11b4f3af12879717","fromNode":"ea111d8cb579b650","fromSide":"top","toNode":"aa2f1768f7663ebf","toSide":"bottom"},
		{"id":"56aa05d9378116fb","fromNode":"f0f623558b7a1bd2","fromSide":"bottom","toNode":"35a7e50dd8bbb651","toSide":"top"},
		{"id":"0392c6a0826a8fab","fromNode":"dff88af00a536f81","fromSide":"top","toNode":"b81367aa9de6afb4","toSide":"bottom"},
		{"id":"6879b643affd1e0e","fromNode":"dff88af00a536f81","fromSide":"bottom","toNode":"a040ad793f9beeac","toSide":"top"},
		{"id":"4e88dd4229982007","fromNode":"a040ad793f9beeac","fromSide":"bottom","toNode":"e2750b6b7a2c01af","toSide":"top"},
		{"id":"0bd09d94413ca585","fromNode":"3881465ee755981e","fromSide":"left","toNode":"0719791a80c12eb2","toSide":"right"},
		{"id":"b1b50abed84b9191","fromNode":"4df27d69ac9764ca","fromSide":"bottom","toNode":"35235b872aeaab53","toSide":"top"},
		{"id":"175fce85c6410af9","fromNode":"acea343615dea605","fromSide":"bottom","toNode":"2edbb402780f44c6","toSide":"top"},
		{"id":"e0741c499f5a9599","fromNode":"349ec5026bac8b92","fromSide":"left","toNode":"acea343615dea605","toSide":"right"},
		{"id":"472c8c49ca90d2e6","fromNode":"40ee9c3447f7fb82","fromSide":"right","toNode":"0efd970a1119442f","toSide":"left"},
		{"id":"33280d80c35d33bf","fromNode":"acea343615dea605","fromSide":"top","toNode":"6efc85167597eec6","toSide":"right"},
		{"id":"1dd2b92926522dfc","fromNode":"acea343615dea605","fromSide":"top","toNode":"877a13b60a49c414","toSide":"left"},
		{"id":"ee99fc1ed31f00ef","fromNode":"877a13b60a49c414","fromSide":"top","toNode":"aa76e477e11e779d","toSide":"bottom"},
		{"id":"06b74f9e3f7e46bd","fromNode":"6efc85167597eec6","fromSide":"bottom","toNode":"2c357555847a692e","toSide":"top"},
		{"id":"bca4d744f7646067","fromNode":"0d69bbc0efaf38ce","fromSide":"top","toNode":"2a51de9d069e3b02","toSide":"bottom"},
		{"id":"cacccf6ae674edbe","fromNode":"0d69bbc0efaf38ce","fromSide":"right","toNode":"2c547fef2c5dcf45","toSide":"left"},
		{"id":"9dd973f761a8185c","fromNode":"6efc85167597eec6","fromSide":"top","toNode":"0d69bbc0efaf38ce","toSide":"bottom"},
		{"id":"102ce3f1c097fdbf","fromNode":"6efc85167597eec6","fromSide":"left","toNode":"a0476a2b8399dc67","toSide":"top"},
		{"id":"a9b365d356249eaf","fromNode":"6efc85167597eec6","fromSide":"left","toNode":"0bcac05d389026f2","toSide":"bottom"},
		{"id":"dfac2447c54a08cc","fromNode":"0d69bbc0efaf38ce","fromSide":"left","toNode":"d9218fbe64e55603","toSide":"bottom"},
		{"id":"500541804019d1c5","fromNode":"6efc85167597eec6","fromSide":"left","toNode":"84caca764ec7fb4e","toSide":"right"},
		{"id":"02d34002b55f347e","fromNode":"6efc85167597eec6","fromSide":"left","toNode":"f4a58217f873b504","toSide":"top"},
		{"id":"60be2888bbfbe9f4","fromNode":"0bcac05d389026f2","fromSide":"top","toNode":"d9218fbe64e55603","toSide":"bottom"},
		{"id":"5de96e4cfcae595a","fromNode":"0bcac05d389026f2","fromSide":"bottom","toNode":"84caca764ec7fb4e","toSide":"right"},
		{"id":"8fb21869f7e78d8c","fromNode":"d9218fbe64e55603","fromSide":"left","toNode":"4694cc6e9478ff73","toSide":"right"},
		{"id":"d0a9712c0a098f37","fromNode":"d9218fbe64e55603","fromSide":"left","toNode":"b99dcc266569a95d","toSide":"right"},
		{"id":"d61c7aa7366222a9","fromNode":"d9218fbe64e55603","fromSide":"left","toNode":"807b9ea551e9eb4a","toSide":"right"},
		{"id":"3b79b164037dce89","fromNode":"0bcac05d389026f2","fromSide":"left","toNode":"2cf0e73ceaebad33","toSide":"right"},
		{"id":"133dc4f16a496df4","fromNode":"807b9ea551e9eb4a","fromSide":"bottom","toNode":"2cf0e73ceaebad33","toSide":"left"},
		{"id":"cdcedae67dc73ef0","fromNode":"2cf0e73ceaebad33","fromSide":"left","toNode":"807b9ea551e9eb4a","toSide":"bottom"},
		{"id":"48f18a94c4689c94","fromNode":"2cf0e73ceaebad33","fromSide":"right","toNode":"d9218fbe64e55603","toSide":"bottom"},
		{"id":"f80af4331101f38b","fromNode":"b99dcc266569a95d","fromSide":"left","toNode":"807b9ea551e9eb4a","toSide":"right"},
		{"id":"78a251b841c56b27","fromNode":"4694cc6e9478ff73","fromSide":"left","toNode":"807b9ea551e9eb4a","toSide":"right"},
		{"id":"0f53cc5be936e481","fromNode":"d9194ed55437e184","fromSide":"left","toNode":"d9218fbe64e55603","toSide":"right"},
		{"id":"79b3fa714035a627","fromNode":"84caca764ec7fb4e","fromSide":"left","toNode":"bd9ffece9b4d9aa9","toSide":"right"},
		{"id":"71708495721d21ca","fromNode":"84caca764ec7fb4e","fromSide":"left","toNode":"60429356d103493a","toSide":"right"},
		{"id":"450556ccb0e0a941","fromNode":"f4a58217f873b504","fromSide":"right","toNode":"29e1d3a847d6212b","toSide":"left"},
		{"id":"b7720bdfc2befb1b","fromNode":"23a2937e757042d7","fromSide":"top","toNode":"447f8e71a756c709","toSide":"bottom"},
		{"id":"f55bde45de849d01","fromNode":"349ec5026bac8b92","fromSide":"bottom","toNode":"ba32fe7205e2606f","toSide":"left"},
		{"id":"be05070237675422","fromNode":"34401d45639b449d","fromSide":"right","toNode":"1a7e522c18045e6d","toSide":"left"},
		{"id":"f195684b063a3945","fromNode":"6f3226cdbb9850aa","fromSide":"bottom","toNode":"78a5ab219227020b","toSide":"top"},
		{"id":"5c4afc93813ef4ca","fromNode":"ba32fe7205e2606f","fromSide":"right","toNode":"78a5ab219227020b","toSide":"left"},
		{"id":"4dcd3d54d7b9e061","fromNode":"23a2937e757042d7","fromSide":"top","toNode":"88c9b35b0c391a8a","toSide":"bottom"},
		{"id":"93fbd42d72af9344","fromNode":"7f27ffe9c326e924","fromSide":"bottom","toNode":"f51086f517d2e458","toSide":"top"},
		{"id":"7ede39539c2cdd37","fromNode":"352b4beb483d264e","fromSide":"top","toNode":"dbc47f290845eb11","toSide":"top"},
		{"id":"ecf4d2f44b241822","fromNode":"6f3226cdbb9850aa","fromSide":"right","toNode":"fb29b2016fb66f0d","toSide":"left"},
		{"id":"a5ffe1b88ee5cb9a","fromNode":"6f3226cdbb9850aa","fromSide":"right","toNode":"968f90c621f36328","toSide":"left"},
		{"id":"41bf4dd6499b56b0","fromNode":"fb29b2016fb66f0d","fromSide":"bottom","toNode":"968f90c621f36328","toSide":"top","toEnd":"none","label":"+"},
		{"id":"e7555b9b24534d41","fromNode":"968f90c621f36328","fromSide":"bottom","toNode":"b2c8e74231cf5ae9","toSide":"top","toEnd":"none","label":"="},
		{"id":"0052c55476d4df64","fromNode":"78a5ab219227020b","fromSide":"right","toNode":"b2c8e74231cf5ae9","toSide":"left"},
		{"id":"6e7db06d4aee5f49","fromNode":"78a5ab219227020b","fromSide":"bottom","toNode":"cfd8a6577c228df0","toSide":"top"},
		{"id":"22d30b12759822d9","fromNode":"1a7e522c18045e6d","fromSide":"right","toNode":"35bf718e7b0b1267","toSide":"left"},
		{"id":"79b2fc54f561c692","fromNode":"fb29b2016fb66f0d","fromSide":"right","toNode":"587ced46e42595c9","toSide":"left"},
		{"id":"aba4db3af060ec4b","fromNode":"fb29b2016fb66f0d","fromSide":"top","toNode":"51014418878ce34a","toSide":"bottom"},
		{"id":"46d81da55e0b71d5","fromNode":"587ced46e42595c9","fromSide":"top","toNode":"ca345537eca5f999","toSide":"bottom"},
		{"id":"e2c167b44e1f7bb5","fromNode":"587ced46e42595c9","fromSide":"bottom","toNode":"42184aaeeadc6b30","toSide":"top"},
		{"id":"c0414ee677bb368a","fromNode":"587ced46e42595c9","fromSide":"right","toNode":"2282be8cea1536dd","toSide":"left"},
		{"id":"4481fc97fc22338f","fromNode":"fb29b2016fb66f0d","fromSide":"left","toNode":"3f4a905d3f1d3058","toSide":"right"},
		{"id":"c659558735a7521d","fromNode":"2282be8cea1536dd","fromSide":"bottom","toNode":"97af67201a182e72","toSide":"top"},
		{"id":"98da2f55505e32f8","fromNode":"2282be8cea1536dd","fromSide":"right","toNode":"10dba3310cd9aed8","toSide":"left"},
		{"id":"cd56a58396e741c7","fromNode":"10dba3310cd9aed8","fromSide":"top","toNode":"219387a67a5b2a86","toSide":"bottom"},
		{"id":"3b0e2cb2565af188","fromNode":"10dba3310cd9aed8","fromSide":"top","toNode":"2f558b72d21a3998","toSide":"bottom"},
		{"id":"3218fb97b7d99697","fromNode":"10dba3310cd9aed8","fromSide":"right","toNode":"976d5b3f569f713f","toSide":"left"},
		{"id":"97f0e4aa926e7397","fromNode":"976d5b3f569f713f","fromSide":"bottom","toNode":"00cca53cff5a9684","toSide":"top"},
		{"id":"2523faa8c3134d3d","fromNode":"976d5b3f569f713f","fromSide":"right","toNode":"2df2877d35b32cbf","toSide":"left"},
		{"id":"a33e38e0672a62a1","fromNode":"2df2877d35b32cbf","fromSide":"bottom","toNode":"d336bdc958fc40a1","toSide":"top"},
		{"id":"b3c3793214b2f36d","fromNode":"2df2877d35b32cbf","fromSide":"right","toNode":"133c092a1da3e3ae","toSide":"left"},
		{"id":"bce1efa7d0b7ca40","fromNode":"133c092a1da3e3ae","fromSide":"bottom","toNode":"73ccf1e79df95ce8","toSide":"top"},
		{"id":"9ad333442c33e1b3","fromNode":"133c092a1da3e3ae","fromSide":"right","toNode":"aafdfc81117b9e28","toSide":"left"},
		{"id":"08935985d6adac55","fromNode":"aafdfc81117b9e28","fromSide":"top","toNode":"f55770ab8bdeed44","toSide":"left"},
		{"id":"559fc712e8a39acb","fromNode":"aafdfc81117b9e28","fromSide":"bottom","toNode":"9b35587f0d6f95ff","toSide":"left"},
		{"id":"1c0339604e1610d8","fromNode":"010165be9fd56b6c","fromSide":"top","toNode":"7eefd49bc7f4fed8","toSide":"left"},
		{"id":"fc64b5d7234fc487","fromNode":"dbc47f290845eb11","fromSide":"right","toNode":"ff85fbdd6c733437","toSide":"left"},
		{"id":"d14022224f0e1851","fromNode":"ff85fbdd6c733437","fromSide":"bottom","toNode":"d92ff2e0bcf964fc","toSide":"top"},
		{"id":"03c6665e46ca611a","fromNode":"9f731eac72823c6c","fromSide":"right","toNode":"f537b296b73bc81b","toSide":"left"},
		{"id":"0169e3fbf2b4cf68","fromNode":"b72f299bae389d13","fromSide":"left","toNode":"fd5376187828d385","toSide":"right"},
		{"id":"121d6e0e6a0bbfac","fromNode":"3881465ee755981e","fromSide":"top","toNode":"9f731eac72823c6c","toSide":"left"},
		{"id":"05f61ec5eee5f8af","fromNode":"010165be9fd56b6c","fromSide":"bottom","toNode":"352b4beb483d264e","toSide":"left"},
		{"id":"b71ad694ff506106","fromNode":"d1b8f4d6b685141c","fromSide":"bottom","toNode":"b7cbea2785c98166","toSide":"top"},
		{"id":"f45471b23cc5e3df","fromNode":"7eefd49bc7f4fed8","fromSide":"right","toNode":"d1b8f4d6b685141c","toSide":"left"},
		{"id":"d11c73bd85c9db96","fromNode":"5813ffbd6cdf2642","fromSide":"bottom","toNode":"3b6b15d9eb09a426","toSide":"top"}
	]
}
Slides #1

SO

	- Fa da "arbitro" delle risorse (Resource Manager) come CPU, memoria, I/O, (...) per ottenere efficienza.
	- Virtualizza le risorse fisiche dando l'illusione di "infinita" disponibilità.
	- Ha diversi trade-off
		- Performance vs cost (abstractions);
		- Performance vs complexity (design);
	- Esempio di "large computer system";


Designing large computer systems requires you to know
	- Each computer:
		• Architectural details
		• High-level programming language (mostly, C/C++)
		• Memory management
		• Concurrency and scheduling
		• File system and I/O
	
	- Across clusters of computers:
		• Server architectures
		• Distributed file systems and computing frameworks


	• Structure: How the whole system is organized
	• Concurrency: How parallel tasks are managed
	• Sharing: How resources are shared
	• Naming: How resources are identified by users
	• Protection: How critical tasks are protected from each other
	• Security: How to authenticate, authorize, and ensure privacy
	• Performance: How to make it more efficient (quick, compact)
	• Reliability: How to deal with failures
	• Portability: How to write once and run anywhere
	• Extensibility: How to add new features/capabilities
	• Communication: How to exchange information
	• Scalability: How to scale up as demand increases
	• Persistency: How to save task’s status
	• Accounting: How to claim on control resource usage



Slides #2

• Machine language instructions are made of 2 parts:
	• An operator (op code)
	• Zero or more operands representing either CPU internal registers or memory addresses

Each realization of the same instruction set (ISA) is an implementation of a physical
architecture (e.g., x86 --> Intel, AMD, Cyrix, etc.)



BUS

• Initially, a single bus to handle all the traffic
• Combines the functions of:
	• Data bus: to actually carry information
	• Address bus: to determine where such information should be sent
	• Control bus: to indicate which operation should be performed
• More dedicated buses have been added to manage CPU-to-memory and I/O traffic
	• PCI, SATA, USB, etc.



I/O

Ogni device I/O consta di due parti:
	- Il device stesso
	• the device controller (chip or set of chips controlling a family of physical devices)
	• OS talks to a device controller using a specific device driver


• Every device controller has a number of dedicated registers to communicate with it:

	• Status registers: provide status information to the CPU about the I/O device (e.g., idle, ready for input, busy, error, transaction complete)
	• Configuration/Control registers: used by the CPU to configure and control the device
	• Data registers: used to read data from or send data to the I/O device

How does the CPU know how to address (registers of) I/O devices?
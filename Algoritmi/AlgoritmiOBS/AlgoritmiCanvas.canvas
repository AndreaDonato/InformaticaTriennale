{
	"nodes":[
		{"id":"3cb8fa98b476d018","type":"text","text":"# Notazione Asintotica\n\n- $O$ definisce il ***limite superiore asintotico*** (i.e. \"non oltre questo andamento asintotico\");\n- $\\Omega$ definisce il ***limite inferiore asintotico*** (i.e. \"non meno di questo andamento asintotico);\n- $\\Theta$ definisce l'***esatto comportamento asintotico*** (i.e. se $f(n)$ è sia in $O(g(n))$ sia in $\\Omega(g(n))$ allora è $\\Theta(g(n))$). \n\n$$1 ≺ log_a (n) ≺ \\sqrt[b]{n} ≺ n^c ≺ d^n ≺ n! ≺ n^n$$","x":800,"y":-21,"width":628,"height":520,"color":"4"},
		{"id":"d58e07debc64d646","type":"text","text":"# Algoritmi\n\nUn ***algoritmo*** è una ***sequenza di comandi elementari ed univoci che terminano in un tempo finito*** ed operano su strutture dati.\n","x":-120,"y":148,"width":628,"height":182,"color":"6"},
		{"id":"26ecf9a9035be6c9","type":"text","text":"# Costo Computazionale\n\nLe performance di un algoritmo sono valutate su un modello di macchina astratta (dunque indipendente dalla specifica macchina che lo esegue) detta ***Random Access Machine*** (***RAM***), tale che\n\n- Esiste un solo CPU core che esegue le operazioni sequenzialmente;\n- Esiste un limite alle dimensioni degli oggetti memorizzabili.\n- Esistono solo operazioni elementari, e richiedono un tempo costante;\n\t- Questo è vero solo se assumiamo che i dati siano più brevi delle *word* di memoria, ed è detta ***misura di costo uniforme***.\n\nIntuitivamente, il costo di un algoritmo è una funzione monotona non decrescente dell'input. In particolare, è la somma dei costi di tutte le istruzioni che lo compongono. Dal momento che ogni operazione elementare ha costo costante, l'unica cosa che fa crescere il costo asintotico sono i ***cicli***.\n\nIn generale, a seconda dell'input l'algoritmo può presentare un costo migliore o peggiore. Ci focalizziamo sul ***caso peggiore***.","x":-1080,"y":-21,"width":628,"height":520,"color":"4"},
		{"id":"5c46055a11913af6","type":"text","text":"# Proprietà della notazione asintotica\n\nSe mi ritrovo un ciclo annidato, il costo complessivo è dato da $$\\sum_{i=0}^n \\Theta(i) = \\Theta\\bigg(\\sum_{i=0}{i}\\bigg) = \\Theta(n^2)$$ \nÈ possibile ***portare la sommatoria dentro la $\\Theta$*** (e viceversa).","x":800,"y":-851,"width":628,"height":671},
		{"id":"c2548ea0755bf41c","x":-120,"y":-851,"width":628,"height":671,"color":"4","type":"text","text":"# Ottimizzazione II\n\nProblema: devo calcolare un polinomio in un punto. Come faccio?\n\n```\ndef Calcola_Polinomio(A, x):\n\tsomma = 0\n\tfor i in range(len(a)):\n\t\tpotenza = 1\n\t\tfor j in range(i):\n\t\t\tpotenza = x*potenza\n\t\tsomma = somma + A[i]*potenza\n\treturn somma\n```\n\nQuesto algoritmo è $\\Theta(n^2)$. Posso fare di meglio? Sì, dal momento che le potenze sono sequenziali posso usare \"ricorsivamente\" quella precedente:\n\n```\ndef Calcola_Polinomio_Intelligente(A, x):\n\tsomma = 0\n\tpotenza = 1\n\tfor i in range(len(a)):\n\t\tpotenza = x*potenza\n\t\tsomma = somma + A[i]*potenza\n\treturn somma\n```\n\nC'è un solo ciclo `for`, ergo questo è $\\Theta(n)$."},
		{"id":"229254fddfcb152d","type":"text","text":"# Ottimizzazione I\n\nProblema: devo sommare i primi $n$ interi. Come faccio?\n\n```\ndef CalcolaSomma(n):\n\tsomma = 0\n\tfor i in range (1, n + 1):\n\t\tsomma += i\n\treturn somma\n```\n\nQuesto algoritmo ha costo $\\Theta(n)$. Ma posso fare di meglio? Sì, perché\n$$\\sum_{i=1}^nk = \\frac{n(n+1)}{2}$$\nche tradotto in codice significa\n\n```\ndef CalcolaSommaIntelligente(n):\n\tsomma = n*(n+1)/2\n\treturn somma\n```\nche ha costo $\\Theta(1)$. Morale della favola? A volte si può ottimizzare.","x":-1080,"y":-851,"width":628,"height":671,"color":"4"},
		{"id":"0c6a12bec4ec08b4","x":-1940,"y":-21,"width":560,"height":520,"color":"4","type":"text","text":"# Quante iterazioni?\n\nPrendiamo un `n` positivo, inizializziamo `x = r = 0` e valutiamo\n\n```\nwhile x*x < n:\n\tx += 1\n```\n\nLa condizione di terminazione del ciclo è $x^2 \\geq n$, quindi si ha uguaglianza dopo circa $x \\simeq \\sqrt{n}$ iterazioni $\\Rightarrow \\Theta(\\sqrt{n})$.\n\nSe invece consideriamo una situazione in cui decremento $n$ di $2^k$\n\n```\nwhile n > 1:\n\tn = n//2\n```\n\navrò uguaglianza nella condizione per $\\frac{n}{2^k} \\simeq 1$, ovvero dopo $k \\simeq log_2(n)$ iterazioni. Viene da sé che decrementare $n$ in modo logaritmico porta ad un numero esponenziale di iterazioni."},
		{"id":"eb76c79fdbda44ba","x":-2240,"y":640,"width":560,"height":431,"color":"4","type":"text","text":"# Esempio $\\Theta$ Esponenziale\n\n```\nx = t = 1\nfor i in range(n):\n\tt = 3*t\nt -= 1\nwhile t >= x:\n\tx += 2\n\tt -= 2\n```\n\nAl termine del primo ciclo (di costo $\\Theta(n)$) `t` vale $3^n$. Nel secondo ciclo `x` e `t` provano a colmare l'esponenziale distanza che li separa con incrementi lineari. Dopo $k$ iterazioni del `while` `x` vale $2k+1$, mentre `t` vale $3^n - (2k+1)$. La condizione per terminare il `while` è quindi $3^n = 2(2k+1)$, ovvero $k = \\frac{3^n-2}{4} \\Rightarrow \\Theta(3^n)$."},
		{"id":"0d969a895166efd0","x":-1640,"y":640,"width":560,"height":431,"color":"4","type":"text","text":"# Esempio $\\Theta = log(log(n))$\n\n```\np = 2\nwhile n >= p:\n\tp=p*p\n```\n\nAd ogni iterazione `p` viene incrementato del suo quadrato. Dopo $k$ iterazioni sarà $2^{2^k}$. Condizione di terminazione è che $2^{2^k} = n + 1$, ovvero dopo $k \\simeq log_2(log_2(n+1))$ iterazioni $\\Rightarrow \\Theta\\big(log_2(log_2(n))\\big)$."},
		{"id":"ec8b575605b1f28b","x":-1205,"y":1680,"width":250,"height":60,"type":"text","text":"# Ricerca"},
		{"id":"309351163ae6947b","x":1303,"y":1720,"width":250,"height":60,"type":"text","text":"# Ordinamento"},
		{"id":"6d8b317b86100794","x":74,"y":1775,"width":250,"height":60,"type":"text","text":"# Ricorsione"}
	],
	"edges":[
		{"id":"ff9241251fd89e0a","fromNode":"d58e07debc64d646","fromSide":"right","toNode":"3cb8fa98b476d018","toSide":"left"},
		{"id":"f9dca02562002393","fromNode":"d58e07debc64d646","fromSide":"left","toNode":"26ecf9a9035be6c9","toSide":"right"},
		{"id":"99d8762d8e9c3acc","fromNode":"3cb8fa98b476d018","fromSide":"top","toNode":"5c46055a11913af6","toSide":"bottom"},
		{"id":"8277042a65c7cf18","fromNode":"26ecf9a9035be6c9","fromSide":"top","toNode":"229254fddfcb152d","toSide":"bottom"},
		{"id":"e2a46a418e98fd9c","fromNode":"229254fddfcb152d","fromSide":"right","toNode":"c2548ea0755bf41c","toSide":"left"},
		{"id":"c326851f2c9d862f","fromNode":"5c46055a11913af6","fromSide":"left","toNode":"c2548ea0755bf41c","toSide":"right"},
		{"id":"eb74c7ab3baa3fc6","fromNode":"c2548ea0755bf41c","fromSide":"right","toNode":"5c46055a11913af6","toSide":"left"},
		{"id":"b6b7ac2890c9e9ff","fromNode":"26ecf9a9035be6c9","fromSide":"left","toNode":"0c6a12bec4ec08b4","toSide":"right"},
		{"id":"5e6ea51877ea4c3d","fromNode":"0c6a12bec4ec08b4","fromSide":"bottom","toNode":"eb76c79fdbda44ba","toSide":"top"},
		{"id":"eb0664e14dc0bf8f","fromNode":"0c6a12bec4ec08b4","fromSide":"bottom","toNode":"0d969a895166efd0","toSide":"top"},
		{"id":"ea8b371593eebec3","fromNode":"d58e07debc64d646","fromSide":"bottom","toNode":"ec8b575605b1f28b","toSide":"right"},
		{"id":"3c18574c76a179fc","fromNode":"d58e07debc64d646","fromSide":"bottom","toNode":"309351163ae6947b","toSide":"left"},
		{"id":"4d25840c86304103","fromNode":"d58e07debc64d646","fromSide":"bottom","toNode":"6d8b317b86100794","toSide":"top"}
	]
}
Il SO è un software che prende il controllo della macchina fisica all'avvio e modera la gestione delle risorse e l'esecuzione dei programmi.
Si tratta quindi sia di un ambiente di esecuzione programmi sia di interazione con gli utenti.
Il SO è un cuscinetto tra le applicazioni (e poi gli utenti) degli strati superiori e l'HW in modo che essi interagiscano solo tramite esso.

A livello più basso c'è l'HW. A fare da "ponti" di collegamento tra l'HW e il SO abbiamo l'ISA, il set di istruzioni che l'HW "comprende" e può eseguire,
e l'ABI, convenzioni che specificano come i compilatori generano codice eseguibile (passaggio parametri, gestione stack, ...).

Il ponte tra il SO e le applicazioni sovrastanti sono le API (Application Programming Interface), ovvero le collezioni delle dichiarazioni
di tipi, funzioni, costanti, ... (distribuiti sottoforma di librerie) che permettono a un client di utilizzare un software.
All'interno delle API ci sono anche le librerie del C standardizzate da ANSI C.
Quando usiamo una printf stiamo usando un'API. Quando scriviamo e "pubblichiamo" una libreria stiamo usando un'API.
Queste possono spaziare su vari livelli di complessità, da gestione di stringhe a manipolazione audio e video, fino a funzioni di interfaccia col SO.
Sono alla base del principio di modularità.

Generalmente si fa riferimento al SO con il nome di KERNEL. Questo è il "nucleo" del SO, che si interfaccia direttamente con l'HW.
Le sue funzioni (per permettere di interfacciarsi con esso) sono dette SYSTEM CALL (syscall). Le due cose non coincidono precisamente, in quanto vi sono
ulteriori schematizzazioni interne, ma ai fini della trattazione li si può confondere.

L'utente interagisce col SO in due modi:

	- CLI (Command Line Interface), come la Shell;
	- GUI (Graphic User Interface), desktop environment come Gnome, KDE, ...;

Su CLI vi sono comandi detti BINUTILS, collezione di strumenti standard come ls, ps, cp, echo, ...
Queste funzioni non hanno nulla di diverso da un nostro "hello_world.x" (se non che sono più sofisticate e interagiscono con il filesystem sottostante).
Sono tutte allo stesso livello concettuale, quello delle applicazioni.

Ora, in un caso come Linux (relativamente giovane, open source e quindi con molte versioni aventi kernel lievemente differenti) sarebbe spiacevole che un
programma funzioni, per dire, solo su Ubuntu. Per questo esiste la famiglia di standard POSIX (Portable Operation System Interface) della IEEE.
POSIX standardizza le API che consentono di programmare sistemi UNIX-like (UNIX è un marchio registrato e precedente a Linux), le binutils, le directories, le regex,
i linguaggi di Shell (questi ultimi sono linguaggi interpretati, e la Shell è l'interprete), le variabili d'ambiente (come PATH), ...

Nota sullo stato dell'arte: Attualmente POSIX e il marchio UNIX sono proprietà di OpenGroup. Per avere la certificazione che un SO sia compatibile POSIX tocca pagarli.
	Linux è un po' punk e si rifiuta di farlo, motivo per cui è UNIX-like e non garantisce al 100% che sia tutto compatibile con POSIX (ovviamente Apple, IBM e Oracle pagano).
	Di fatto però in pratica lo è. Perfino Windows ha un progetto per supportare POSIX, chiamato CYGWIN. Linux a rigore segue il suo Linux Standard Base (potremmo chiamarlo POSIX-like)


API
Le API verso il SO includono delle funzioni, dette SYSTEM CALL, che richiamano direttamente codice del SO (Kernel).
Un'applicazione può fare chiamate a System Call o a librerie (che possono a loro volta chiamare il sistema). Ad esempio, se uso printf questa deve in qualche modo
usare la funzione echo. Questo distingue le librerie in due categorie: quelle che necessitano o meno di interagire col SO (strlen ad esempio non ne ha bisogno).

Per visualizzare il valore di terminazione dell'ultimo comando eseguito: "echo $?" (vabb)

La funzione write in C è una delle più importanti syscall, serve a scrivere su un canale, ovvero qualsiasi destinazione che un flusso di dati può avere (terminale, file,
connessione internet, connessione verso un file, ...). In POSIX, ogni canale ha un numero. I primi tre sono riservati:

	- 0 Standard Input (stdin);
	- 1 Standard Output (stdout);
	- 2 Standard Error (stderr).

Oltre a questo, write prende un buffer (ovvero puntatore a una sequenza di byte) e il numero di byte da scrivere. Restituisce il numero di byte scritti (di tipo ssize_t).
Anche printf a un certo punto per stampare chiama la write.

Tutte le variabili d'ambiente (visibili con il comando env) vengono passate in copia dalla shell al programma che viene eseguito, rendendole disponibili al codice C. Alcune di esse sono

	- PATH: Quando si digita un comando in una shell, il sistema cerca l'eseguibile nei percorsi elencati in PATH, nell'ordine specificato.
		Esempio: PATH=/usr/local/bin:/usr/bin:/bin (: è un separatore);

	- HOME: Definisce il percorso della directory home dell'utente corrente. Viene utilizzato da molti programmi per individuare i file di configurazione personali e i dati dell'utente.
		Esempio: HOME=/home/utente

	- USER: Specifica il nome dell'utente corrente. Nota: Lo fa anche LOGNAME, ma questo valore non può variare dopo l'accesso.
		Esempio: USER=shaytaan

	- SHELL: Indica la shell predefinita per l'utente corrente.
		Esempio: SHELL=/bin/bash

	- TERM: Specifica il tipo di terminale emulato. Aiuta a stabilire le caratteristiche del terminale, come il supporto per i colori.
		Esempio: TERM=xterm-256color

	- PS1: Definisce il prompt della shell. Può includere informazioni come il nome dell'utente, il percorso attuale e altro.
		Esempio: PS1=\u@\h:\w\$

	- LANG e LC_*: Specificano le impostazioni regionali e linguistiche del sistema. Determinano la lingua e le convenzioni di formattazione per applicazioni e comandi.
		Esempio: LANG=en_US.UTF-8, LC_COLLATE=C

	- LD_LIBRARY_PATH: Elabora una lista di directory in cui cercare librerie condivise (shared libraries) quando si eseguono programmi.
		Esempio: LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/lib

	- DISPLAY: Specifica il display X Window System a cui un'applicazione deve inviare l'output grafico.
		Esempio: DISPLAY=:0

	- TMP e TEMP: Indicano la directory temporanea in cui i programmi possono archiviare file temporanei.
		Esempio: TMP=/tmp, TEMP=/tmp

	- EDITOR: Specifica l'editor di testo predefinito utilizzato da alcune applicazioni quando richiedono l'input dell'utente.
		Esempio: EDITOR=nano o EDITOR=vim


Sono accessibili tramite funzioni quali

	- getenv("VAR") - Restituisce il valore di VAR;

	- putenv("VAR=new_value")"- Modifica o imposta il valore di VAR;

	- setenv("VAR", "new_value", bool_overwrite) - Analogo, il controllo booleano su overwrite permette di decidere se forzare la sovrascrittura se VAR esiste già.
		In caso di errore restituisce -1, e setta la variabile globale errno. Per visualizzarla in modo umano posso usare la funzione perror;

	- unsetenv("VAR") - Elimina VAR.


In realtà tutte le variabili d'ambiente sono definite come "NOME=VALORE" in un array chiamato environ. Se voglio visualizzarlo, prima di un file C includo

	extern char** environ

e poi la printf con environ[i]. Così si vede che al programma in esecuzione viene associata la variabile d'ambiente _=./programma.
Notare che le modifiche alle variabili d'ambiente che fa il programma avvengono sulla sua copia della lista! Quindi non modifico veramente le variabili d'ambiente con
setenv e simili. A che mi serve? Se il programma ne crea un altro può passargli la sua copia corrente delle variabili d'ambiente. Con environ però posso farlo.
Bisogna però stare molto attenti a modificare l'ambiente di run del processo.

Un'altra syscall è open("nomefile", modalità, permessi). Richiede fcntl.h.

	- modalità ha sintassi di tipo O_CONDIZIONE. Un esempio può essere

			O_WRONLY | O_CREAT | O_TRUNC

		che significa "sola scrittura, se non esiste lo creo e se esiste lo sovrascrivo" (TRUNC fa riferimento al "troncare a zero" ciò che c'era prima).
		Il fatto che usi la sintassi dell'OR è dovuto al fatto che l'istruzione binaria complessiva è l'OR bitwise delle singole operazioni, ovvero

			00100 | 10000 | 00001  -->  10111

		Si può vedere come "maschera".

	- I permessi si rappresentano in notazione ottale. A ognuno di essi viene associato un numero

			- Lettura (r) = 4
			- Scrittura (w) = 2
			- Esecuzione (x) = 1

		e il permesso si scrive come singola cifra in binario. Ad esempio rw- = 4 + 2 = 6, r-x = 4 + 1 = 5.
		Vi sono tre soggetti per i quali bisogna specificare i permessi:

			- User: è il creatore o il possessore del file, identificato da username univoco;
			- Group: diversi User possono appartenere allo stesso gruppo, e il privilegio può essere definito sull'appartenenza a un gruppo specifico;
			- Others: Autoesplicativo, tutto ciò che non rientra nelle prime due categorie.

		A ognuno dei soggetti viene quindi associata una tripletta di permessi, e quindi un singolo numero in ottale. Ne segue che sono equivalenti le scritture

			rwxr-x---	<-->	750		--> "L'utente ha permessi rwx, il gruppo ha privilegi rx, gli altri non hanno alcun privilegio"   

			rw-rw---x	<-->	661 	--> "L'utente e il gruppo hanno privilegi rw, gli altri possono solo eseguire"


In generale, il Kernel offre diversi servizi divise in diverse famiglie:

	- Manipolazione di file e filesystem:

	- Gestione dei processi:
		- Creazione, terminazione, sospensione e ripresa dei processi;
		- Pianificazione dei processi per l'esecuzione sulla CPU.
		- Comunicazione tra i processi e sincronizzazione (eseguire un'azione al termine di un processo).

	- Gestione della Memoria:
		//- Allocazione e deallocazione della memoria per i processi.
		//- Implementazione di schemi di gestione della memoria, come la paginazione o la segmentazione (???).
		//- Gestione degli errori di memoria.

	- Gestione dell'I/O:
		//- Interazione con i driver di dispositivo per gestire l'I/O.
		//- Gestione delle code di I/O e dei buffer.
		//- Trattamento degli interrupt di I/O.

	- Sicurezza: è necessario definire delle procedure di sicurezza per l'interazione tra i programmi e il sistema. Se ad esempio ho a che fare con un programma buggato,
		o peggio un malware?

			- Il SO deve essere in grado di ISOLARE il processo in un ambiente protetto, ad esempio assegnando solo un pezzetto di memoria e facendo in modo che
				se prova a sforare si ottenga un SEGMENTATION FAULT: il processo muore, il SO ripulisce lo spazio allocato per il processo e si va avanti normalmente.
				Eventualmente può esserci il CORE DUMP, ovvero una copia (tipicamente su disco) dello stato della memoria al momento del segmentation fault, in modo che
				chi sa farlo possa analizzarne le cause;

			- Alcune istruzioni disponibili per la CPU sono utilizzabili soltanto dal Kernel (livello protetto). Non vengono lasciate ai programmatori (livello utente)
				perché sono pericolose.

		"I processi non devono essere in grado di fare danni al sistema né volontariamente né per sbaglio". Se un programma crasha, non deve far crashare tutto.
		"E la famosa schermata blu di Windows? Ehhh, quello è il SO che è entrato in una situazione talmente anomala che getta la spugna e riavvia tutto".
		Possono esserci anche malfunzionamenti HW, ma su quelli si può fare poco. Per dire, nello spazio con i raggi cosmici si può avere flip dei bit in memoria.

	- Gerione Dispositivi: Come fa un singolo Kernel a interfacciarsi con tutti i possibili HW? Non lo fa. Ci stanno i DRIVER, che sono estensioni del Kernel dispositivo-specifiche.
		E' il tipico pezzo di software scritto dal produttore nascondendo tutti i dettagli interni del loro HW.

	- Gestione Errori;

	- Controllo delle Prestazioni: se un processo è bloccato, ci sta mettendo troppo o non risponde, il SO deve rendersene conto, come pure limitare le risorse a sua disposizione.